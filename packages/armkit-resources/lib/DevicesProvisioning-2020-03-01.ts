// generated by armkit
import { ArmResource } from '@yetics/armkit-core';
import { Construct } from 'constructs';

/**
 * Microsoft.Devices/provisioningServices
 *
 * @schema Microsoft.Devices.provisioningServices
 */
export class ProvisioningServices extends ArmResource {
  /**
   * Defines a "Microsoft.Devices.provisioningServices" Arm Template object
   * @param scope the scope in which to define this object
   * @param name a scope-local name for the object
   * @param options configuration options
   */
  public constructor(scope: Construct, name: string, options: ProvisioningServicesOptions) {
    super(scope, name, {
      ...options,
      armResourceType: 'provisioningServices',
    });
  }
}

/**
 * Microsoft.Devices/provisioningServices/certificates
 *
 * @schema Microsoft.Devices.provisioningServices_certificates
 */
export class ProvisioningServicesCertificates extends ArmResource {
  /**
   * Defines a "Microsoft.Devices.provisioningServices_certificates" Arm Template object
   * @param scope the scope in which to define this object
   * @param name a scope-local name for the object
   * @param options configuration options
   */
  public constructor(scope: Construct, name: string, options: ProvisioningServicesCertificatesOptions) {
    super(scope, name, {
      ...options,
      armResourceType: 'provisioningServices_certificates',
    });
  }
}

/**
 * Microsoft.Devices/provisioningServices/privateEndpointConnections
 *
 * @schema Microsoft.Devices.provisioningServices_privateEndpointConnections
 */
export class ProvisioningServicesPrivateEndpointConnections extends ArmResource {
  /**
   * Defines a "Microsoft.Devices.provisioningServices_privateEndpointConnections" Arm Template object
   * @param scope the scope in which to define this object
   * @param name a scope-local name for the object
   * @param options configuration options
   */
  public constructor(scope: Construct, name: string, options: ProvisioningServicesPrivateEndpointConnectionsOptions) {
    super(scope, name, {
      ...options,
      armResourceType: 'provisioningServices_privateEndpointConnections',
    });
  }
}

/**
 * Microsoft.Devices/provisioningServices
 *
 * @schema Microsoft.Devices.provisioningServices
 */
export interface ProvisioningServicesOptions {
  /**
   * @schema Microsoft.Devices.provisioningServices#apiVersion
   */
  readonly apiVersion?: MicrosoftDevicesProvisioningServicesApiVersion;

  /**
   * The Etag field is *not* required. If it is provided in the response body, it must also be provided as a header per the normal ETag convention.
   *
   * @schema Microsoft.Devices.provisioningServices#etag
   */
  readonly etag?: string;

  /**
   * The resource location.
   *
   * @schema Microsoft.Devices.provisioningServices#location
   */
  readonly location: string;

  /**
   * Name of provisioning service to create or update.
   *
   * @schema Microsoft.Devices.provisioningServices#name
   */
  readonly name: string;

  /**
   * the service specific properties of a provisioning service, including keys, linked iot hubs, current state, and system generated properties such as hostname and idScope
   *
   * @schema Microsoft.Devices.provisioningServices#properties
   */
  readonly properties: IotDpsPropertiesDescription;

  /**
   * @schema Microsoft.Devices.provisioningServices#resources
   */
  readonly resources?: MicrosoftDevicesProvisioningServicesResources[];

  /**
   * List of possible provisioning service SKUs.
   *
   * @schema Microsoft.Devices.provisioningServices#sku
   */
  readonly sku: IotDpsSkuInfo;

  /**
   * The resource tags.
   *
   * @schema Microsoft.Devices.provisioningServices#tags
   */
  readonly tags?: MicrosoftDevicesProvisioningServicesTags;

  /**
   * @schema Microsoft.Devices.provisioningServices#type
   */
  readonly type: MicrosoftDevicesProvisioningServicesType;

}

/**
 * Microsoft.Devices/provisioningServices/certificates
 *
 * @schema Microsoft.Devices.provisioningServices_certificates
 */
export interface ProvisioningServicesCertificatesOptions {
  /**
   * @schema Microsoft.Devices.provisioningServices_certificates#apiVersion
   */
  readonly apiVersion?: MicrosoftDevicesProvisioningServicesCertificatesApiVersion;

  /**
   * Base-64 representation of the X509 leaf certificate .cer file or just .pem file content.
   *
   * @schema Microsoft.Devices.provisioningServices_certificates#certificate
   */
  readonly certificate?: string;

  /**
   * The name of the certificate create or update.
   *
   * @schema Microsoft.Devices.provisioningServices_certificates#name
   */
  readonly name: string;

  /**
   * @schema Microsoft.Devices.provisioningServices_certificates#type
   */
  readonly type: MicrosoftDevicesProvisioningServicesCertificatesType;

}

/**
 * Microsoft.Devices/provisioningServices/privateEndpointConnections
 *
 * @schema Microsoft.Devices.provisioningServices_privateEndpointConnections
 */
export interface ProvisioningServicesPrivateEndpointConnectionsOptions {
  /**
   * @schema Microsoft.Devices.provisioningServices_privateEndpointConnections#apiVersion
   */
  readonly apiVersion?: MicrosoftDevicesProvisioningServicesPrivateEndpointConnectionsApiVersion;

  /**
   * The name of the private endpoint connection
   *
   * @schema Microsoft.Devices.provisioningServices_privateEndpointConnections#name
   */
  readonly name: string;

  /**
   * The properties of a private endpoint connection
   *
   * @schema Microsoft.Devices.provisioningServices_privateEndpointConnections#properties
   */
  readonly properties: PrivateEndpointConnectionProperties;

  /**
   * @schema Microsoft.Devices.provisioningServices_privateEndpointConnections#type
   */
  readonly type: MicrosoftDevicesProvisioningServicesPrivateEndpointConnectionsType;

}

export enum MicrosoftDevicesProvisioningServicesApiVersion {
  "MicrosoftDevicesProvisioningServicesApiVersion_2020_03_01" = '2020-03-01',
}

/**
 * the service specific properties of a provisioning service, including keys, linked iot hubs, current state, and system generated properties such as hostname and idScope
 *
 * @schema #/definitions/IotDpsPropertiesDescription
 */
export interface IotDpsPropertiesDescription {
  /**
   * Allocation policy to be used by this provisioning service.
   *
   * @schema #/definitions/IotDpsPropertiesDescription#allocationPolicy
   */
  readonly allocationPolicy?: IotDpsPropertiesDescriptionAllocationPolicy;

  /**
   * List of authorization keys for a provisioning service.
   *
   * @schema #/definitions/IotDpsPropertiesDescription#authorizationPolicies
   */
  readonly authorizationPolicies?: SharedAccessSignatureAuthorizationRuleAccessRightsDescription[];

  /**
   * List of IoT hubs associated with this provisioning service.
   *
   * @schema #/definitions/IotDpsPropertiesDescription#iotHubs
   */
  readonly iotHubs?: IotHubDefinitionDescription[];

  /**
   * The IP filter rules.
   *
   * @schema #/definitions/IotDpsPropertiesDescription#ipFilterRules
   */
  readonly ipFilterRules?: IpFilterRule[];

  /**
   * Private endpoint connections created on this IotHub
   *
   * @schema #/definitions/IotDpsPropertiesDescription#privateEndpointConnections
   */
  readonly privateEndpointConnections?: PrivateEndpointConnection[];

  /**
   * The ARM provisioning state of the provisioning service.
   *
   * @schema #/definitions/IotDpsPropertiesDescription#provisioningState
   */
  readonly provisioningState?: string;

  /**
   * Whether requests from Public Network are allowed.
   *
   * @schema #/definitions/IotDpsPropertiesDescription#publicNetworkAccess
   */
  readonly publicNetworkAccess?: IotDpsPropertiesDescriptionPublicNetworkAccess;

  /**
   * Current state of the provisioning service.
   *
   * @schema #/definitions/IotDpsPropertiesDescription#state
   */
  readonly state?: IotDpsPropertiesDescriptionState;

}

/**
 * @schema MicrosoftDevicesProvisioningServicesResources
 */
export class MicrosoftDevicesProvisioningServicesResources {
  public static fromProvisioningServicesCertificatesChildResource(value: ProvisioningServicesCertificatesChildResource): MicrosoftDevicesProvisioningServicesResources {
    return new MicrosoftDevicesProvisioningServicesResources(value);
  }
  public static fromProvisioningServicesPrivateEndpointConnectionsChildResource(value: ProvisioningServicesPrivateEndpointConnectionsChildResource): MicrosoftDevicesProvisioningServicesResources {
    return new MicrosoftDevicesProvisioningServicesResources(value);
  }
  private constructor(value: any) {
    Object.defineProperty(this, 'resolve', { value: () => value });
  }
}

/**
 * List of possible provisioning service SKUs.
 *
 * @schema #/definitions/IotDpsSkuInfo
 */
export interface IotDpsSkuInfo {
  /**
   * The number of units to provision
   *
   * @schema #/definitions/IotDpsSkuInfo#capacity
   */
  readonly capacity?: number;

  /**
   * Sku name.
   *
   * @schema #/definitions/IotDpsSkuInfo#name
   */
  readonly name?: IotDpsSkuInfoName;

}

/**
 * @schema MicrosoftDevicesProvisioningServicesTags
 */
export interface MicrosoftDevicesProvisioningServicesTags {
}

export enum MicrosoftDevicesProvisioningServicesType {
  "MicrosoftDevicesProvisioningServicesType_MICROSOFT_DEVICES_PROVISIONING_SERVICES" = 'Microsoft.Devices/provisioningServices',
}

export enum MicrosoftDevicesProvisioningServicesCertificatesApiVersion {
  "MicrosoftDevicesProvisioningServicesCertificatesApiVersion_2020_03_01" = '2020-03-01',
}

export enum MicrosoftDevicesProvisioningServicesCertificatesType {
  "MicrosoftDevicesProvisioningServicesCertificatesType_MICROSOFT_DEVICES_PROVISIONING_SERVICES_CERTIFICATES" = 'Microsoft.Devices/provisioningServices/certificates',
}

export enum MicrosoftDevicesProvisioningServicesPrivateEndpointConnectionsApiVersion {
  "MicrosoftDevicesProvisioningServicesPrivateEndpointConnectionsApiVersion_2020_03_01" = '2020-03-01',
}

/**
 * The properties of a private endpoint connection
 *
 * @schema #/definitions/PrivateEndpointConnectionProperties
 */
export interface PrivateEndpointConnectionProperties {
  /**
   * The private endpoint property of a private endpoint connection
   *
   * @schema #/definitions/PrivateEndpointConnectionProperties#privateEndpoint
   */
  readonly privateEndpoint?: PrivateEndpoint;

  /**
   * The current state of a private endpoint connection
   *
   * @schema #/definitions/PrivateEndpointConnectionProperties#privateLinkServiceConnectionState
   */
  readonly privateLinkServiceConnectionState: PrivateLinkServiceConnectionState;

}

export enum MicrosoftDevicesProvisioningServicesPrivateEndpointConnectionsType {
  "MicrosoftDevicesProvisioningServicesPrivateEndpointConnectionsType_MICROSOFT_DEVICES_PROVISIONING_SERVICES_PRIVATE_ENDPOINT_CONNECTIONS" = 'Microsoft.Devices/provisioningServices/privateEndpointConnections',
}

export enum IotDpsPropertiesDescriptionAllocationPolicy {
  HASHED = 'Hashed',
  GEO_LATENCY = 'GeoLatency',
  STATIC = 'Static',
}

/**
 * Description of the shared access key.
 *
 * @schema #/definitions/SharedAccessSignatureAuthorizationRuleAccessRightsDescription
 */
export interface SharedAccessSignatureAuthorizationRuleAccessRightsDescription {
  /**
   * Name of the key.
   *
   * @schema #/definitions/SharedAccessSignatureAuthorizationRuleAccessRightsDescription#keyName
   */
  readonly keyName: string;

  /**
   * Primary SAS key value.
   *
   * @schema #/definitions/SharedAccessSignatureAuthorizationRuleAccessRightsDescription#primaryKey
   */
  readonly primaryKey?: string;

  /**
   * Rights that this key has.
   *
   * @schema #/definitions/SharedAccessSignatureAuthorizationRuleAccessRightsDescription#rights
   */
  readonly rights: SharedAccessSignatureAuthorizationRuleAccessRightsDescriptionRights;

  /**
   * Secondary SAS key value.
   *
   * @schema #/definitions/SharedAccessSignatureAuthorizationRuleAccessRightsDescription#secondaryKey
   */
  readonly secondaryKey?: string;

}

/**
 * Description of the IoT hub.
 *
 * @schema #/definitions/IotHubDefinitionDescription
 */
export interface IotHubDefinitionDescription {
  /**
   * weight to apply for a given iot h.
   *
   * @schema #/definitions/IotHubDefinitionDescription#allocationWeight
   */
  readonly allocationWeight?: number;

  /**
   * flag for applying allocationPolicy or not for a given iot hub.
   *
   * @schema #/definitions/IotHubDefinitionDescription#applyAllocationPolicy
   */
  readonly applyAllocationPolicy?: boolean;

  /**
   * Connection string of the IoT hub.
   *
   * @schema #/definitions/IotHubDefinitionDescription#connectionString
   */
  readonly connectionString: string;

  /**
   * ARM region of the IoT hub.
   *
   * @schema #/definitions/IotHubDefinitionDescription#location
   */
  readonly location: string;

}

/**
 * The IP filter rules for a provisioning Service.
 *
 * @schema #/definitions/IpFilterRule
 */
export interface IpFilterRule {
  /**
   * The desired action for requests captured by this rule.
   *
   * @schema #/definitions/IpFilterRule#action
   */
  readonly action: IpFilterRuleAction;

  /**
   * The name of the IP filter rule.
   *
   * @schema #/definitions/IpFilterRule#filterName
   */
  readonly filterName: string;

  /**
   * A string that contains the IP address range in CIDR notation for the rule.
   *
   * @schema #/definitions/IpFilterRule#ipMask
   */
  readonly ipMask: string;

  /**
   * Target for requests captured by this rule.
   *
   * @schema #/definitions/IpFilterRule#target
   */
  readonly target?: IpFilterRuleTarget;

}

/**
 * The private endpoint connection of a provisioning service
 *
 * @schema #/definitions/PrivateEndpointConnection
 */
export interface PrivateEndpointConnection {
  /**
   * The properties of a private endpoint connection
   *
   * @schema #/definitions/PrivateEndpointConnection#properties
   */
  readonly properties: PrivateEndpointConnectionProperties;

}

export enum IotDpsPropertiesDescriptionPublicNetworkAccess {
  ENABLED = 'Enabled',
  DISABLED = 'Disabled',
}

export enum IotDpsPropertiesDescriptionState {
  ACTIVATING = 'Activating',
  ACTIVE = 'Active',
  DELETING = 'Deleting',
  DELETED = 'Deleted',
  ACTIVATION_FAILED = 'ActivationFailed',
  DELETION_FAILED = 'DeletionFailed',
  TRANSITIONING = 'Transitioning',
  SUSPENDING = 'Suspending',
  SUSPENDED = 'Suspended',
  RESUMING = 'Resuming',
  FAILING_OVER = 'FailingOver',
  FAILOVER_FAILED = 'FailoverFailed',
}

/**
 * Microsoft.Devices/provisioningServices/certificates
 *
 * @schema #/definitions/provisioningServices_certificates_childResource
 */
export interface ProvisioningServicesCertificatesChildResource {
  /**
   * @schema #/definitions/provisioningServices_certificates_childResource#apiVersion
   */
  readonly apiVersion: ProvisioningServicesCertificatesChildResourceApiVersion;

  /**
   * Base-64 representation of the X509 leaf certificate .cer file or just .pem file content.
   *
   * @schema #/definitions/provisioningServices_certificates_childResource#certificate
   */
  readonly certificate?: string;

  /**
   * The name of the certificate create or update.
   *
   * @schema #/definitions/provisioningServices_certificates_childResource#name
   */
  readonly name: string;

  /**
   * @schema #/definitions/provisioningServices_certificates_childResource#type
   */
  readonly type: ProvisioningServicesCertificatesChildResourceType;

}

/**
 * Microsoft.Devices/provisioningServices/privateEndpointConnections
 *
 * @schema #/definitions/provisioningServices_privateEndpointConnections_childResource
 */
export interface ProvisioningServicesPrivateEndpointConnectionsChildResource {
  /**
   * @schema #/definitions/provisioningServices_privateEndpointConnections_childResource#apiVersion
   */
  readonly apiVersion: ProvisioningServicesPrivateEndpointConnectionsChildResourceApiVersion;

  /**
   * The name of the private endpoint connection
   *
   * @schema #/definitions/provisioningServices_privateEndpointConnections_childResource#name
   */
  readonly name: string;

  /**
   * The properties of a private endpoint connection
   *
   * @schema #/definitions/provisioningServices_privateEndpointConnections_childResource#properties
   */
  readonly properties: PrivateEndpointConnectionProperties;

  /**
   * @schema #/definitions/provisioningServices_privateEndpointConnections_childResource#type
   */
  readonly type: ProvisioningServicesPrivateEndpointConnectionsChildResourceType;

}

export enum IotDpsSkuInfoName {
  "IotDpsSkuInfoName_S1" = 'S1',
}

/**
 * The private endpoint property of a private endpoint connection
 *
 * @schema #/definitions/PrivateEndpoint
 */
export interface PrivateEndpoint {
}

/**
 * The current state of a private endpoint connection
 *
 * @schema #/definitions/PrivateLinkServiceConnectionState
 */
export interface PrivateLinkServiceConnectionState {
  /**
   * Actions required for a private endpoint connection
   *
   * @schema #/definitions/PrivateLinkServiceConnectionState#actionsRequired
   */
  readonly actionsRequired?: string;

  /**
   * The description for the current state of a private endpoint connection
   *
   * @schema #/definitions/PrivateLinkServiceConnectionState#description
   */
  readonly description: string;

  /**
   * The status of a private endpoint connection.
   *
   * @schema #/definitions/PrivateLinkServiceConnectionState#status
   */
  readonly status: PrivateLinkServiceConnectionStateStatus;

}

export enum SharedAccessSignatureAuthorizationRuleAccessRightsDescriptionRights {
  SERVICE_CONFIG = 'ServiceConfig',
  ENROLLMENT_READ = 'EnrollmentRead',
  ENROLLMENT_WRITE = 'EnrollmentWrite',
  DEVICE_CONNECT = 'DeviceConnect',
  REGISTRATION_STATUS_READ = 'RegistrationStatusRead',
  REGISTRATION_STATUS_WRITE = 'RegistrationStatusWrite',
}

export enum IpFilterRuleAction {
  ACCEPT = 'Accept',
  REJECT = 'Reject',
}

export enum IpFilterRuleTarget {
  ALL = 'all',
  SERVICE_API = 'serviceApi',
  DEVICE_API = 'deviceApi',
}

export enum ProvisioningServicesCertificatesChildResourceApiVersion {
  "ProvisioningServicesCertificatesChildResourceApiVersion_2020_03_01" = '2020-03-01',
}

export enum ProvisioningServicesCertificatesChildResourceType {
  CERTIFICATES = 'certificates',
}

export enum ProvisioningServicesPrivateEndpointConnectionsChildResourceApiVersion {
  "ProvisioningServicesPrivateEndpointConnectionsChildResourceApiVersion_2020_03_01" = '2020-03-01',
}

export enum ProvisioningServicesPrivateEndpointConnectionsChildResourceType {
  PRIVATE_ENDPOINT_CONNECTIONS = 'privateEndpointConnections',
}

export enum PrivateLinkServiceConnectionStateStatus {
  PENDING = 'Pending',
  APPROVED = 'Approved',
  REJECTED = 'Rejected',
  DISCONNECTED = 'Disconnected',
}


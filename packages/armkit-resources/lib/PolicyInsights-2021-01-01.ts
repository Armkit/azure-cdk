// generated by armkit
import { ArmResource } from '@armkit/core';
import { Construct } from 'constructs';

/**
 * Microsoft.PolicyInsights/attestations
 *
 * @schema Microsoft.PolicyInsights.attestations
 */
export class Attestations extends ArmResource {
  /**
   * Defines a "Microsoft.PolicyInsights.attestations" Arm Template object
   * @param scope the scope in which to define this object
   * @param name a scope-local name for the object
   * @param options configuration options
   */
  public constructor(scope: Construct, name: string, options: AttestationsOptions) {
    super(scope, name, {
      ...options,
      armResourceType: 'attestations',
    });
  }
}

/**
 * Microsoft.PolicyInsights/attestations
 *
 * @schema Microsoft.PolicyInsights.attestations
 */
export interface AttestationsOptions {
  /**
   * @schema Microsoft.PolicyInsights.attestations#apiVersion
   */
  readonly apiVersion?: MicrosoftPolicyInsightsAttestationsApiVersion;

  /**
   * The name of the attestation.
   *
   * @schema Microsoft.PolicyInsights.attestations#name
   */
  readonly name: string;

  /**
   * The properties of an attestation resource.
   *
   * @schema Microsoft.PolicyInsights.attestations#properties
   */
  readonly properties: AttestationProperties;

  /**
   * @schema Microsoft.PolicyInsights.attestations#type
   */
  readonly type: MicrosoftPolicyInsightsAttestationsType;

}

export enum MicrosoftPolicyInsightsAttestationsApiVersion {
  "MicrosoftPolicyInsightsAttestationsApiVersion_2021_01_01" = '2021-01-01',
}

/**
 * The properties of an attestation resource.
 *
 * @schema #/definitions/AttestationProperties
 */
export interface AttestationProperties {
  /**
   * Comments describing why this attestation was created.
   *
   * @schema #/definitions/AttestationProperties#comments
   */
  readonly comments?: string;

  /**
   * The compliance state that should be set on the resource.
   *
   * @schema #/definitions/AttestationProperties#complianceState
   */
  readonly complianceState?: AttestationPropertiesComplianceState;

  /**
   * The evidence supporting the compliance state set in this attestation.
   *
   * @schema #/definitions/AttestationProperties#evidence
   */
  readonly evidence?: AttestationEvidence[];

  /**
   * The time the compliance state should expire.
   *
   * @schema #/definitions/AttestationProperties#expiresOn
   */
  readonly expiresOn?: Date;

  /**
   * The person responsible for setting the state of the resource. This value is typically an Azure Active Directory object ID.
   *
   * @schema #/definitions/AttestationProperties#owner
   */
  readonly owner?: string;

  /**
   * The resource ID of the policy assignment that the attestation is setting the state for.
   *
   * @schema #/definitions/AttestationProperties#policyAssignmentId
   */
  readonly policyAssignmentId: string;

  /**
   * The policy definition reference ID from a policy set definition that the attestation is setting the state for. If the policy assignment assigns a policy set definition the attestation can choose a definition within the set definition with this property or omit this and set the state for the entire set definition.
   *
   * @schema #/definitions/AttestationProperties#policyDefinitionReferenceId
   */
  readonly policyDefinitionReferenceId?: string;

}

export enum MicrosoftPolicyInsightsAttestationsType {
  "MicrosoftPolicyInsightsAttestationsType_MICROSOFT_POLICY_INSIGHTS_ATTESTATIONS" = 'Microsoft.PolicyInsights/attestations',
}

export enum AttestationPropertiesComplianceState {
  COMPLIANT = 'Compliant',
  NON_COMPLIANT = 'NonCompliant',
  UNKNOWN = 'Unknown',
}

/**
 * A piece of evidence supporting the compliance state set in the attestation.
 *
 * @schema #/definitions/AttestationEvidence
 */
export interface AttestationEvidence {
  /**
   * The description for this piece of evidence.
   *
   * @schema #/definitions/AttestationEvidence#description
   */
  readonly description?: string;

  /**
   * The URI location of the evidence.
   *
   * @schema #/definitions/AttestationEvidence#sourceUri
   */
  readonly sourceUri?: string;

}


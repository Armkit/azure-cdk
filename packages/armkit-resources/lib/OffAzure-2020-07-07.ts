// generated by armkit
import { ArmResource } from '@yetics/armkit-core';
import { Construct } from 'constructs';

/**
 * Microsoft.OffAzure/HyperVSites
 *
 * @schema Microsoft.OffAzure.HyperVSites
 */
export class HyperVSites extends ArmResource {
  /**
   * Defines a "Microsoft.OffAzure.HyperVSites" Arm Template object
   * @param scope the scope in which to define this object
   * @param name a scope-local name for the object
   * @param options configuration options
   */
  public constructor(scope: Construct, name: string, options: HyperVSitesOptions) {
    super(scope, name, {
      ...options,
      armResourceType: 'HyperVSites',
    });
  }
}

/**
 * Microsoft.OffAzure/HyperVSites/clusters
 *
 * @schema Microsoft.OffAzure.HyperVSites_clusters
 */
export class HyperVSitesClusters extends ArmResource {
  /**
   * Defines a "Microsoft.OffAzure.HyperVSites_clusters" Arm Template object
   * @param scope the scope in which to define this object
   * @param name a scope-local name for the object
   * @param options configuration options
   */
  public constructor(scope: Construct, name: string, options: HyperVSitesClustersOptions) {
    super(scope, name, {
      ...options,
      armResourceType: 'HyperVSites_clusters',
    });
  }
}

/**
 * Microsoft.OffAzure/HyperVSites/hosts
 *
 * @schema Microsoft.OffAzure.HyperVSites_hosts
 */
export class HyperVSitesHosts extends ArmResource {
  /**
   * Defines a "Microsoft.OffAzure.HyperVSites_hosts" Arm Template object
   * @param scope the scope in which to define this object
   * @param name a scope-local name for the object
   * @param options configuration options
   */
  public constructor(scope: Construct, name: string, options: HyperVSitesHostsOptions) {
    super(scope, name, {
      ...options,
      armResourceType: 'HyperVSites_hosts',
    });
  }
}

/**
 * Microsoft.OffAzure/MasterSites
 *
 * @schema Microsoft.OffAzure.MasterSites
 */
export class MasterSites extends ArmResource {
  /**
   * Defines a "Microsoft.OffAzure.MasterSites" Arm Template object
   * @param scope the scope in which to define this object
   * @param name a scope-local name for the object
   * @param options configuration options
   */
  public constructor(scope: Construct, name: string, options: MasterSitesOptions) {
    super(scope, name, {
      ...options,
      armResourceType: 'MasterSites',
    });
  }
}

/**
 * Microsoft.OffAzure/VMwareSites
 *
 * @schema Microsoft.OffAzure.VMwareSites
 */
export class VMwareSites extends ArmResource {
  /**
   * Defines a "Microsoft.OffAzure.VMwareSites" Arm Template object
   * @param scope the scope in which to define this object
   * @param name a scope-local name for the object
   * @param options configuration options
   */
  public constructor(scope: Construct, name: string, options: VMwareSitesOptions) {
    super(scope, name, {
      ...options,
      armResourceType: 'VMwareSites',
    });
  }
}

/**
 * Microsoft.OffAzure/VMwareSites/vCenters
 *
 * @schema Microsoft.OffAzure.VMwareSites_vCenters
 */
export class VMwareSitesVCenters extends ArmResource {
  /**
   * Defines a "Microsoft.OffAzure.VMwareSites_vCenters" Arm Template object
   * @param scope the scope in which to define this object
   * @param name a scope-local name for the object
   * @param options configuration options
   */
  public constructor(scope: Construct, name: string, options: VMwareSitesVCentersOptions) {
    super(scope, name, {
      ...options,
      armResourceType: 'VMwareSites_vCenters',
    });
  }
}

/**
 * Microsoft.OffAzure/HyperVSites
 *
 * @schema Microsoft.OffAzure.HyperVSites
 */
export interface HyperVSitesOptions {
  /**
   * @schema Microsoft.OffAzure.HyperVSites#apiVersion
   */
  readonly apiVersion?: MicrosoftOffAzureHyperVSitesApiVersion;

  /**
   * eTag for concurrency control.
   *
   * @schema Microsoft.OffAzure.HyperVSites#eTag
   */
  readonly eTag?: string;

  /**
   * Azure location in which Sites is created.
   *
   * @schema Microsoft.OffAzure.HyperVSites#location
   */
  readonly location?: string;

  /**
   * Site name.
   *
   * @schema Microsoft.OffAzure.HyperVSites#name
   */
  readonly name: string;

  /**
   * Class for site properties.
   *
   * @schema Microsoft.OffAzure.HyperVSites#properties
   */
  readonly properties: SiteProperties;

  /**
   * @schema Microsoft.OffAzure.HyperVSites#resources
   */
  readonly resources?: MicrosoftOffAzureHyperVSitesResources[];

  /**
   * @schema Microsoft.OffAzure.HyperVSites#tags
   */
  readonly tags?: MicrosoftOffAzureHyperVSitesTags;

  /**
   * @schema Microsoft.OffAzure.HyperVSites#type
   */
  readonly type: MicrosoftOffAzureHyperVSitesType;

}

/**
 * Microsoft.OffAzure/HyperVSites/clusters
 *
 * @schema Microsoft.OffAzure.HyperVSites_clusters
 */
export interface HyperVSitesClustersOptions {
  /**
   * @schema Microsoft.OffAzure.HyperVSites_clusters#apiVersion
   */
  readonly apiVersion?: MicrosoftOffAzureHyperVSitesClustersApiVersion;

  /**
   * Cluster ARM name.
   *
   * @schema Microsoft.OffAzure.HyperVSites_clusters#name
   */
  readonly name: string;

  /**
   * Class for cluster properties.
   *
   * @schema Microsoft.OffAzure.HyperVSites_clusters#properties
   */
  readonly properties: HyperVClusterProperties;

  /**
   * @schema Microsoft.OffAzure.HyperVSites_clusters#type
   */
  readonly type: MicrosoftOffAzureHyperVSitesClustersType;

}

/**
 * Microsoft.OffAzure/HyperVSites/hosts
 *
 * @schema Microsoft.OffAzure.HyperVSites_hosts
 */
export interface HyperVSitesHostsOptions {
  /**
   * @schema Microsoft.OffAzure.HyperVSites_hosts#apiVersion
   */
  readonly apiVersion?: MicrosoftOffAzureHyperVSitesHostsApiVersion;

  /**
   * Host ARM name.
   *
   * @schema Microsoft.OffAzure.HyperVSites_hosts#name
   */
  readonly name: string;

  /**
   * Class for host properties.
   *
   * @schema Microsoft.OffAzure.HyperVSites_hosts#properties
   */
  readonly properties: HyperVHostProperties;

  /**
   * @schema Microsoft.OffAzure.HyperVSites_hosts#type
   */
  readonly type: MicrosoftOffAzureHyperVSitesHostsType;

}

/**
 * Microsoft.OffAzure/MasterSites
 *
 * @schema Microsoft.OffAzure.MasterSites
 */
export interface MasterSitesOptions {
  /**
   * @schema Microsoft.OffAzure.MasterSites#apiVersion
   */
  readonly apiVersion?: MicrosoftOffAzureMasterSitesApiVersion;

  /**
   * eTag for concurrency control.
   *
   * @schema Microsoft.OffAzure.MasterSites#eTag
   */
  readonly eTag?: string;

  /**
   * Azure location in which Sites is created.
   *
   * @schema Microsoft.OffAzure.MasterSites#location
   */
  readonly location?: string;

  /**
   * Site name.
   *
   * @schema Microsoft.OffAzure.MasterSites#name
   */
  readonly name: string;

  /**
   * Class for site properties.
   *
   * @schema Microsoft.OffAzure.MasterSites#properties
   */
  readonly properties: MasterSiteProperties;

  /**
   * @schema Microsoft.OffAzure.MasterSites#type
   */
  readonly type: MicrosoftOffAzureMasterSitesType;

}

/**
 * Microsoft.OffAzure/VMwareSites
 *
 * @schema Microsoft.OffAzure.VMwareSites
 */
export interface VMwareSitesOptions {
  /**
   * @schema Microsoft.OffAzure.VMwareSites#apiVersion
   */
  readonly apiVersion?: MicrosoftOffAzureVMwareSitesApiVersion;

  /**
   * eTag for concurrency control.
   *
   * @schema Microsoft.OffAzure.VMwareSites#eTag
   */
  readonly eTag?: string;

  /**
   * Azure location in which Sites is created.
   *
   * @schema Microsoft.OffAzure.VMwareSites#location
   */
  readonly location?: string;

  /**
   * Site name.
   *
   * @schema Microsoft.OffAzure.VMwareSites#name
   */
  readonly name: string;

  /**
   * Class for site properties.
   *
   * @schema Microsoft.OffAzure.VMwareSites#properties
   */
  readonly properties: SiteProperties;

  /**
   * @schema Microsoft.OffAzure.VMwareSites#resources
   */
  readonly resources?: VMwareSitesVCentersChildResource[];

  /**
   * @schema Microsoft.OffAzure.VMwareSites#tags
   */
  readonly tags?: MicrosoftOffAzureVMwareSitesTags;

  /**
   * @schema Microsoft.OffAzure.VMwareSites#type
   */
  readonly type: MicrosoftOffAzureVMwareSitesType;

}

/**
 * Microsoft.OffAzure/VMwareSites/vCenters
 *
 * @schema Microsoft.OffAzure.VMwareSites_vCenters
 */
export interface VMwareSitesVCentersOptions {
  /**
   * @schema Microsoft.OffAzure.VMwareSites_vCenters#apiVersion
   */
  readonly apiVersion?: MicrosoftOffAzureVMwareSitesVCentersApiVersion;

  /**
   * VCenter ARM name.
   *
   * @schema Microsoft.OffAzure.VMwareSites_vCenters#name
   */
  readonly name: string;

  /**
   * Class for vCenter properties.
   *
   * @schema Microsoft.OffAzure.VMwareSites_vCenters#properties
   */
  readonly properties: VCenterProperties;

  /**
   * @schema Microsoft.OffAzure.VMwareSites_vCenters#type
   */
  readonly type: MicrosoftOffAzureVMwareSitesVCentersType;

}

export enum MicrosoftOffAzureHyperVSitesApiVersion {
  "MicrosoftOffAzureHyperVSitesApiVersion_2020_07_07" = '2020-07-07',
}

/**
 * Class for site properties.
 *
 * @schema #/definitions/SiteProperties
 */
export interface SiteProperties {
  /**
   * Class for site agent properties.
   *
   * @schema #/definitions/SiteProperties#agentDetails
   */
  readonly agentDetails?: SiteAgentProperties;

  /**
   * Appliance Name.
   *
   * @schema #/definitions/SiteProperties#applianceName
   */
  readonly applianceName?: string;

  /**
   * ARM ID of migration hub solution for SDS.
   *
   * @schema #/definitions/SiteProperties#discoverySolutionId
   */
  readonly discoverySolutionId?: string;

  /**
   * Class for site properties.
   *
   * @schema #/definitions/SiteProperties#servicePrincipalIdentityDetails
   */
  readonly servicePrincipalIdentityDetails?: SiteSpnProperties;

}

/**
 * @schema MicrosoftOffAzureHyperVSitesResources
 */
export class MicrosoftOffAzureHyperVSitesResources {
  public static fromHyperVSitesClustersChildResource(value: HyperVSitesClustersChildResource): MicrosoftOffAzureHyperVSitesResources {
    return new MicrosoftOffAzureHyperVSitesResources(value);
  }
  public static fromHyperVSitesHostsChildResource(value: HyperVSitesHostsChildResource): MicrosoftOffAzureHyperVSitesResources {
    return new MicrosoftOffAzureHyperVSitesResources(value);
  }
  private constructor(value: any) {
    Object.defineProperty(this, 'resolve', { value: () => value });
  }
}

/**
 * @schema MicrosoftOffAzureHyperVSitesTags
 */
export interface MicrosoftOffAzureHyperVSitesTags {
}

export enum MicrosoftOffAzureHyperVSitesType {
  "MicrosoftOffAzureHyperVSitesType_MICROSOFT_OFF_AZURE_HYPER_V_SITES" = 'Microsoft.OffAzure/HyperVSites',
}

export enum MicrosoftOffAzureHyperVSitesClustersApiVersion {
  "MicrosoftOffAzureHyperVSitesClustersApiVersion_2020_07_07" = '2020-07-07',
}

/**
 * Class for cluster properties.
 *
 * @schema #/definitions/HyperVClusterProperties
 */
export interface HyperVClusterProperties {
  /**
   * FQDN/IPAddress of the Hyper-V cluster.
   *
   * @schema #/definitions/HyperVClusterProperties#fqdn
   */
  readonly fqdn?: string;

  /**
   * List of hosts (FQDN) currently being tracked by the cluster.
   *
   * @schema #/definitions/HyperVClusterProperties#hostFqdnList
   */
  readonly hostFqdnList?: string[];

  /**
   * Run as account ID of the Hyper-V cluster.
   *
   * @schema #/definitions/HyperVClusterProperties#runAsAccountId
   */
  readonly runAsAccountId?: string;

}

export enum MicrosoftOffAzureHyperVSitesClustersType {
  "MicrosoftOffAzureHyperVSitesClustersType_MICROSOFT_OFF_AZURE_HYPER_V_SITES_CLUSTERS" = 'Microsoft.OffAzure/HyperVSites/clusters',
}

export enum MicrosoftOffAzureHyperVSitesHostsApiVersion {
  "MicrosoftOffAzureHyperVSitesHostsApiVersion_2020_07_07" = '2020-07-07',
}

/**
 * Class for host properties.
 *
 * @schema #/definitions/HyperVHostProperties
 */
export interface HyperVHostProperties {
  /**
   * FQDN/IPAddress of the Hyper-V host.
   *
   * @schema #/definitions/HyperVHostProperties#fqdn
   */
  readonly fqdn?: string;

  /**
   * Run as account ID of the Hyper-V host.
   *
   * @schema #/definitions/HyperVHostProperties#runAsAccountId
   */
  readonly runAsAccountId?: string;

}

export enum MicrosoftOffAzureHyperVSitesHostsType {
  "MicrosoftOffAzureHyperVSitesHostsType_MICROSOFT_OFF_AZURE_HYPER_V_SITES_HOSTS" = 'Microsoft.OffAzure/HyperVSites/hosts',
}

export enum MicrosoftOffAzureMasterSitesApiVersion {
  "MicrosoftOffAzureMasterSitesApiVersion_2020_07_07" = '2020-07-07',
}

/**
 * Class for site properties.
 *
 * @schema #/definitions/MasterSiteProperties
 */
export interface MasterSiteProperties {
  /**
   * Value indicating whether multiple sites per site type are allowed.
   *
   * @schema #/definitions/MasterSiteProperties#allowMultipleSites
   */
  readonly allowMultipleSites?: boolean;

  /**
   * State of public network access.
   *
   * @schema #/definitions/MasterSiteProperties#publicNetworkAccess
   */
  readonly publicNetworkAccess?: string;

  /**
   * List of sites that are a part of Master Site.
   *
   * @schema #/definitions/MasterSiteProperties#sites
   */
  readonly sites?: string[];

}

export enum MicrosoftOffAzureMasterSitesType {
  "MicrosoftOffAzureMasterSitesType_MICROSOFT_OFF_AZURE_MASTER_SITES" = 'Microsoft.OffAzure/MasterSites',
}

export enum MicrosoftOffAzureVMwareSitesApiVersion {
  "MicrosoftOffAzureVMwareSitesApiVersion_2020_07_07" = '2020-07-07',
}

/**
 * Microsoft.OffAzure/VMwareSites/vCenters
 *
 * @schema #/definitions/VMwareSites_vCenters_childResource
 */
export interface VMwareSitesVCentersChildResource {
  /**
   * @schema #/definitions/VMwareSites_vCenters_childResource#apiVersion
   */
  readonly apiVersion: VMwareSitesVCentersChildResourceApiVersion;

  /**
   * VCenter ARM name.
   *
   * @schema #/definitions/VMwareSites_vCenters_childResource#name
   */
  readonly name: string;

  /**
   * Class for vCenter properties.
   *
   * @schema #/definitions/VMwareSites_vCenters_childResource#properties
   */
  readonly properties: VCenterProperties;

  /**
   * @schema #/definitions/VMwareSites_vCenters_childResource#type
   */
  readonly type: VMwareSitesVCentersChildResourceType;

}

/**
 * @schema MicrosoftOffAzureVMwareSitesTags
 */
export interface MicrosoftOffAzureVMwareSitesTags {
}

export enum MicrosoftOffAzureVMwareSitesType {
  "MicrosoftOffAzureVMwareSitesType_MICROSOFT_OFF_AZURE_V_MWARE_SITES" = 'Microsoft.OffAzure/VMwareSites',
}

export enum MicrosoftOffAzureVMwareSitesVCentersApiVersion {
  "MicrosoftOffAzureVMwareSitesVCentersApiVersion_2020_07_07" = '2020-07-07',
}

/**
 * Class for vCenter properties.
 *
 * @schema #/definitions/VCenterProperties
 */
export interface VCenterProperties {
  /**
   * FQDN/IPAddress of the vCenter.
   *
   * @schema #/definitions/VCenterProperties#fqdn
   */
  readonly fqdn?: string;

  /**
   * Port of the vCenter.
   *
   * @schema #/definitions/VCenterProperties#port
   */
  readonly port?: string;

  /**
   * Run as account ID of the vCenter.
   *
   * @schema #/definitions/VCenterProperties#runAsAccountId
   */
  readonly runAsAccountId?: string;

}

export enum MicrosoftOffAzureVMwareSitesVCentersType {
  "MicrosoftOffAzureVMwareSitesVCentersType_MICROSOFT_OFF_AZURE_V_MWARE_SITES_V_CENTERS" = 'Microsoft.OffAzure/VMwareSites/vCenters',
}

/**
 * Class for site agent properties.
 *
 * @schema #/definitions/SiteAgentProperties
 */
export interface SiteAgentProperties {
  /**
   * Key vault ARM Id.
   *
   * @schema #/definitions/SiteAgentProperties#keyVaultId
   */
  readonly keyVaultId?: string;

  /**
   * Key vault URI.
   *
   * @schema #/definitions/SiteAgentProperties#keyVaultUri
   */
  readonly keyVaultUri?: string;

}

/**
 * Class for site properties.
 *
 * @schema #/definitions/SiteSpnProperties
 */
export interface SiteSpnProperties {
  /**
   * AAD Authority URL which was used to request the token for the service principal.
   *
   * @schema #/definitions/SiteSpnProperties#aadAuthority
   */
  readonly aadAuthority?: string;

  /**
   * Application/client Id for the service principal with which the on-premise management/data plane components would communicate with our Azure services.
   *
   * @schema #/definitions/SiteSpnProperties#applicationId
   */
  readonly applicationId?: string;

  /**
   * Intended audience for the service principal.
   *
   * @schema #/definitions/SiteSpnProperties#audience
   */
  readonly audience?: string;

  /**
   * Object Id of the service principal with which the on-premise management/data plane components would communicate with our Azure services.
   *
   * @schema #/definitions/SiteSpnProperties#objectId
   */
  readonly objectId?: string;

  /**
   * Raw certificate data for building certificate expiry flows.
   *
   * @schema #/definitions/SiteSpnProperties#rawCertData
   */
  readonly rawCertData?: string;

  /**
   * Tenant Id for the service principal with which the on-premise management/data plane components would communicate with our Azure services.
   *
   * @schema #/definitions/SiteSpnProperties#tenantId
   */
  readonly tenantId?: string;

}

/**
 * Microsoft.OffAzure/HyperVSites/clusters
 *
 * @schema #/definitions/HyperVSites_clusters_childResource
 */
export interface HyperVSitesClustersChildResource {
  /**
   * @schema #/definitions/HyperVSites_clusters_childResource#apiVersion
   */
  readonly apiVersion: HyperVSitesClustersChildResourceApiVersion;

  /**
   * Cluster ARM name.
   *
   * @schema #/definitions/HyperVSites_clusters_childResource#name
   */
  readonly name: string;

  /**
   * Class for cluster properties.
   *
   * @schema #/definitions/HyperVSites_clusters_childResource#properties
   */
  readonly properties: HyperVClusterProperties;

  /**
   * @schema #/definitions/HyperVSites_clusters_childResource#type
   */
  readonly type: HyperVSitesClustersChildResourceType;

}

/**
 * Microsoft.OffAzure/HyperVSites/hosts
 *
 * @schema #/definitions/HyperVSites_hosts_childResource
 */
export interface HyperVSitesHostsChildResource {
  /**
   * @schema #/definitions/HyperVSites_hosts_childResource#apiVersion
   */
  readonly apiVersion: HyperVSitesHostsChildResourceApiVersion;

  /**
   * Host ARM name.
   *
   * @schema #/definitions/HyperVSites_hosts_childResource#name
   */
  readonly name: string;

  /**
   * Class for host properties.
   *
   * @schema #/definitions/HyperVSites_hosts_childResource#properties
   */
  readonly properties: HyperVHostProperties;

  /**
   * @schema #/definitions/HyperVSites_hosts_childResource#type
   */
  readonly type: HyperVSitesHostsChildResourceType;

}

export enum VMwareSitesVCentersChildResourceApiVersion {
  "VMwareSitesVCentersChildResourceApiVersion_2020_07_07" = '2020-07-07',
}

export enum VMwareSitesVCentersChildResourceType {
  V_CENTERS = 'vCenters',
}

export enum HyperVSitesClustersChildResourceApiVersion {
  "HyperVSitesClustersChildResourceApiVersion_2020_07_07" = '2020-07-07',
}

export enum HyperVSitesClustersChildResourceType {
  CLUSTERS = 'clusters',
}

export enum HyperVSitesHostsChildResourceApiVersion {
  "HyperVSitesHostsChildResourceApiVersion_2020_07_07" = '2020-07-07',
}

export enum HyperVSitesHostsChildResourceType {
  HOSTS = 'hosts',
}


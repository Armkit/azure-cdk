// generated by armkit
import { ArmResource } from '@armkit/core';
import { Construct } from 'constructs';

/**
 * Microsoft.AAD/domainServices
 *
 * @schema Microsoft.AAD.domainServices
 */
export class DomainServices extends ArmResource {
  /**
   * Defines a "Microsoft.AAD.domainServices" Arm Template object
   * @param scope the scope in which to define this object
   * @param name a scope-local name for the object
   * @param options configuration options
   */
  public constructor(scope: Construct, name: string, options: DomainServicesOptions) {
    super(scope, name, {
      ...options,
      armResourceType: 'domainServices',
    });
  }
}

/**
 * Microsoft.Aad/domainServices/ouContainer
 *
 * @schema Microsoft.AAD.domainServices_ouContainer
 */
export class DomainServicesOuContainer extends ArmResource {
  /**
   * Defines a "Microsoft.AAD.domainServices_ouContainer" Arm Template object
   * @param scope the scope in which to define this object
   * @param name a scope-local name for the object
   * @param options configuration options
   */
  public constructor(scope: Construct, name: string, options: DomainServicesOuContainerOptions) {
    super(scope, name, {
      ...options,
      armResourceType: 'domainServices_ouContainer',
    });
  }
}

/**
 * Microsoft.AAD/domainServices
 *
 * @schema Microsoft.AAD.domainServices
 */
export interface DomainServicesOptions {
  /**
   * @schema Microsoft.AAD.domainServices#apiVersion
   */
  readonly apiVersion?: MicrosoftAadDomainServicesApiVersion;

  /**
   * Resource etag
   *
   * @schema Microsoft.AAD.domainServices#etag
   */
  readonly etag?: string;

  /**
   * Resource location
   *
   * @schema Microsoft.AAD.domainServices#location
   */
  readonly location?: string;

  /**
   * The name of the domain service.
   *
   * @schema Microsoft.AAD.domainServices#name
   */
  readonly name: string;

  /**
   * Properties of the Domain Service.
   *
   * @schema Microsoft.AAD.domainServices#properties
   */
  readonly properties: DomainServiceProperties;

  /**
   * @schema Microsoft.AAD.domainServices#resources
   */
  readonly resources?: DomainServicesOuContainerChildResource[];

  /**
   * Resource tags
   *
   * @schema Microsoft.AAD.domainServices#tags
   */
  readonly tags?: MicrosoftAadDomainServicesTags;

  /**
   * @schema Microsoft.AAD.domainServices#type
   */
  readonly type: MicrosoftAadDomainServicesType;

}

/**
 * Microsoft.Aad/domainServices/ouContainer
 *
 * @schema Microsoft.AAD.domainServices_ouContainer
 */
export interface DomainServicesOuContainerOptions {
  /**
   * The account name
   *
   * @schema Microsoft.AAD.domainServices_ouContainer#accountName
   */
  readonly accountName?: string;

  /**
   * @schema Microsoft.AAD.domainServices_ouContainer#apiVersion
   */
  readonly apiVersion?: MicrosoftAadDomainServicesOuContainerApiVersion;

  /**
   * The name of the OuContainer.
   *
   * @schema Microsoft.AAD.domainServices_ouContainer#name
   */
  readonly name: string;

  /**
   * The account password
   *
   * @schema Microsoft.AAD.domainServices_ouContainer#password
   */
  readonly password?: string;

  /**
   * The account spn
   *
   * @schema Microsoft.AAD.domainServices_ouContainer#spn
   */
  readonly spn?: string;

  /**
   * @schema Microsoft.AAD.domainServices_ouContainer#type
   */
  readonly type: MicrosoftAadDomainServicesOuContainerType;

}

export enum MicrosoftAadDomainServicesApiVersion {
  "MicrosoftAadDomainServicesApiVersion_2021_03_01" = '2021-03-01',
}

/**
 * Properties of the Domain Service.
 *
 * @schema #/definitions/DomainServiceProperties
 */
export interface DomainServiceProperties {
  /**
   * Domain Configuration Type
   *
   * @schema #/definitions/DomainServiceProperties#domainConfigurationType
   */
  readonly domainConfigurationType?: string;

  /**
   * The name of the Azure domain that the user would like to deploy Domain Services to.
   *
   * @schema #/definitions/DomainServiceProperties#domainName
   */
  readonly domainName?: string;

  /**
   * Domain Security Settings
   *
   * @schema #/definitions/DomainServiceProperties#domainSecuritySettings
   */
  readonly domainSecuritySettings?: DomainSecuritySettings;

  /**
   * Enabled or Disabled flag to turn on Group-based filtered sync.
   *
   * @schema #/definitions/DomainServiceProperties#filteredSync
   */
  readonly filteredSync?: DomainServicePropertiesFilteredSync;

  /**
   * Secure LDAP Settings
   *
   * @schema #/definitions/DomainServiceProperties#ldapsSettings
   */
  readonly ldapsSettings?: LdapsSettings;

  /**
   * Settings for notification
   *
   * @schema #/definitions/DomainServiceProperties#notificationSettings
   */
  readonly notificationSettings?: NotificationSettings;

  /**
   * List of ReplicaSets
   *
   * @schema #/definitions/DomainServiceProperties#replicaSets
   */
  readonly replicaSets?: ReplicaSet[];

  /**
   * Settings for Resource Forest
   *
   * @schema #/definitions/DomainServiceProperties#resourceForestSettings
   */
  readonly resourceForestSettings?: ResourceForestSettings;

  /**
   * Sku Type
   *
   * @schema #/definitions/DomainServiceProperties#sku
   */
  readonly sku?: string;

}

/**
 * Microsoft.Aad/domainServices/ouContainer
 *
 * @schema #/definitions/domainServices_ouContainer_childResource
 */
export interface DomainServicesOuContainerChildResource {
  /**
   * The account name
   *
   * @schema #/definitions/domainServices_ouContainer_childResource#accountName
   */
  readonly accountName?: string;

  /**
   * @schema #/definitions/domainServices_ouContainer_childResource#apiVersion
   */
  readonly apiVersion: DomainServicesOuContainerChildResourceApiVersion;

  /**
   * The name of the OuContainer.
   *
   * @schema #/definitions/domainServices_ouContainer_childResource#name
   */
  readonly name: string;

  /**
   * The account password
   *
   * @schema #/definitions/domainServices_ouContainer_childResource#password
   */
  readonly password?: string;

  /**
   * The account spn
   *
   * @schema #/definitions/domainServices_ouContainer_childResource#spn
   */
  readonly spn?: string;

  /**
   * @schema #/definitions/domainServices_ouContainer_childResource#type
   */
  readonly type: DomainServicesOuContainerChildResourceType;

}

/**
 * @schema MicrosoftAadDomainServicesTags
 */
export interface MicrosoftAadDomainServicesTags {
}

export enum MicrosoftAadDomainServicesType {
  "MicrosoftAadDomainServicesType_MICROSOFT_AAD_DOMAIN_SERVICES" = 'Microsoft.AAD/domainServices',
}

export enum MicrosoftAadDomainServicesOuContainerApiVersion {
  "MicrosoftAadDomainServicesOuContainerApiVersion_2021_03_01" = '2021-03-01',
}

export enum MicrosoftAadDomainServicesOuContainerType {
  "MicrosoftAadDomainServicesOuContainerType_MICROSOFT_AAD_DOMAIN_SERVICES_OU_CONTAINER" = 'Microsoft.Aad/domainServices/ouContainer',
}

/**
 * Domain Security Settings
 *
 * @schema #/definitions/DomainSecuritySettings
 */
export interface DomainSecuritySettings {
  /**
   * A flag to determine whether or not KerberosArmoring is enabled or disabled.
   *
   * @schema #/definitions/DomainSecuritySettings#kerberosArmoring
   */
  readonly kerberosArmoring?: DomainSecuritySettingsKerberosArmoring;

  /**
   * A flag to determine whether or not KerberosRc4Encryption is enabled or disabled.
   *
   * @schema #/definitions/DomainSecuritySettings#kerberosRc4Encryption
   */
  readonly kerberosRc4Encryption?: DomainSecuritySettingsKerberosRc4Encryption;

  /**
   * A flag to determine whether or not NtlmV1 is enabled or disabled.
   *
   * @schema #/definitions/DomainSecuritySettings#ntlmV1
   */
  readonly ntlmV1?: DomainSecuritySettingsNtlmV1;

  /**
   * A flag to determine whether or not SyncKerberosPasswords is enabled or disabled.
   *
   * @schema #/definitions/DomainSecuritySettings#syncKerberosPasswords
   */
  readonly syncKerberosPasswords?: DomainSecuritySettingsSyncKerberosPasswords;

  /**
   * A flag to determine whether or not SyncNtlmPasswords is enabled or disabled.
   *
   * @schema #/definitions/DomainSecuritySettings#syncNtlmPasswords
   */
  readonly syncNtlmPasswords?: DomainSecuritySettingsSyncNtlmPasswords;

  /**
   * A flag to determine whether or not SyncOnPremPasswords is enabled or disabled.
   *
   * @schema #/definitions/DomainSecuritySettings#syncOnPremPasswords
   */
  readonly syncOnPremPasswords?: DomainSecuritySettingsSyncOnPremPasswords;

  /**
   * A flag to determine whether or not TlsV1 is enabled or disabled.
   *
   * @schema #/definitions/DomainSecuritySettings#tlsV1
   */
  readonly tlsV1?: DomainSecuritySettingsTlsV1;

}

export enum DomainServicePropertiesFilteredSync {
  ENABLED = 'Enabled',
  DISABLED = 'Disabled',
}

/**
 * Secure LDAP Settings
 *
 * @schema #/definitions/LdapsSettings
 */
export interface LdapsSettings {
  /**
   * A flag to determine whether or not Secure LDAP access over the internet is enabled or disabled.
   *
   * @schema #/definitions/LdapsSettings#externalAccess
   */
  readonly externalAccess?: LdapsSettingsExternalAccess;

  /**
   * A flag to determine whether or not Secure LDAP is enabled or disabled.
   *
   * @schema #/definitions/LdapsSettings#ldaps
   */
  readonly ldaps?: LdapsSettingsLdaps;

  /**
   * The certificate required to configure Secure LDAP. The parameter passed here should be a base64encoded representation of the certificate pfx file.
   *
   * @schema #/definitions/LdapsSettings#pfxCertificate
   */
  readonly pfxCertificate?: string;

  /**
   * The password to decrypt the provided Secure LDAP certificate pfx file.
   *
   * @schema #/definitions/LdapsSettings#pfxCertificatePassword
   */
  readonly pfxCertificatePassword?: string;

}

/**
 * Settings for notification
 *
 * @schema #/definitions/NotificationSettings
 */
export interface NotificationSettings {
  /**
   * The list of additional recipients
   *
   * @schema #/definitions/NotificationSettings#additionalRecipients
   */
  readonly additionalRecipients?: string[];

  /**
   * Should domain controller admins be notified.
   *
   * @schema #/definitions/NotificationSettings#notifyDcAdmins
   */
  readonly notifyDcAdmins?: NotificationSettingsNotifyDcAdmins;

  /**
   * Should global admins be notified.
   *
   * @schema #/definitions/NotificationSettings#notifyGlobalAdmins
   */
  readonly notifyGlobalAdmins?: NotificationSettingsNotifyGlobalAdmins;

}

/**
 * Replica Set Definition
 *
 * @schema #/definitions/ReplicaSet
 */
export interface ReplicaSet {
  /**
   * Virtual network location
   *
   * @schema #/definitions/ReplicaSet#location
   */
  readonly location?: string;

  /**
   * The name of the virtual network that Domain Services will be deployed on. The id of the subnet that Domain Services will be deployed on. /virtualNetwork/vnetName/subnets/subnetName.
   *
   * @schema #/definitions/ReplicaSet#subnetId
   */
  readonly subnetId?: string;

}

/**
 * Settings for Resource Forest
 *
 * @schema #/definitions/ResourceForestSettings
 */
export interface ResourceForestSettings {
  /**
   * Resource Forest
   *
   * @schema #/definitions/ResourceForestSettings#resourceForest
   */
  readonly resourceForest?: string;

  /**
   * List of settings for Resource Forest
   *
   * @schema #/definitions/ResourceForestSettings#settings
   */
  readonly settings?: ForestTrust[];

}

export enum DomainServicesOuContainerChildResourceApiVersion {
  "DomainServicesOuContainerChildResourceApiVersion_2021_03_01" = '2021-03-01',
}

export enum DomainServicesOuContainerChildResourceType {
  OU_CONTAINER = 'ouContainer',
}

export enum DomainSecuritySettingsKerberosArmoring {
  ENABLED = 'Enabled',
  DISABLED = 'Disabled',
}

export enum DomainSecuritySettingsKerberosRc4Encryption {
  ENABLED = 'Enabled',
  DISABLED = 'Disabled',
}

export enum DomainSecuritySettingsNtlmV1 {
  ENABLED = 'Enabled',
  DISABLED = 'Disabled',
}

export enum DomainSecuritySettingsSyncKerberosPasswords {
  ENABLED = 'Enabled',
  DISABLED = 'Disabled',
}

export enum DomainSecuritySettingsSyncNtlmPasswords {
  ENABLED = 'Enabled',
  DISABLED = 'Disabled',
}

export enum DomainSecuritySettingsSyncOnPremPasswords {
  ENABLED = 'Enabled',
  DISABLED = 'Disabled',
}

export enum DomainSecuritySettingsTlsV1 {
  ENABLED = 'Enabled',
  DISABLED = 'Disabled',
}

export enum LdapsSettingsExternalAccess {
  ENABLED = 'Enabled',
  DISABLED = 'Disabled',
}

export enum LdapsSettingsLdaps {
  ENABLED = 'Enabled',
  DISABLED = 'Disabled',
}

export enum NotificationSettingsNotifyDcAdmins {
  ENABLED = 'Enabled',
  DISABLED = 'Disabled',
}

export enum NotificationSettingsNotifyGlobalAdmins {
  ENABLED = 'Enabled',
  DISABLED = 'Disabled',
}

/**
 * Forest Trust Setting
 *
 * @schema #/definitions/ForestTrust
 */
export interface ForestTrust {
  /**
   * Friendly Name
   *
   * @schema #/definitions/ForestTrust#friendlyName
   */
  readonly friendlyName?: string;

  /**
   * Remote Dns ips
   *
   * @schema #/definitions/ForestTrust#remoteDnsIps
   */
  readonly remoteDnsIps?: string;

  /**
   * Trust Direction
   *
   * @schema #/definitions/ForestTrust#trustDirection
   */
  readonly trustDirection?: string;

  /**
   * Trusted Domain FQDN
   *
   * @schema #/definitions/ForestTrust#trustedDomainFqdn
   */
  readonly trustedDomainFqdn?: string;

  /**
   * Trust Password
   *
   * @schema #/definitions/ForestTrust#trustPassword
   */
  readonly trustPassword?: string;

}


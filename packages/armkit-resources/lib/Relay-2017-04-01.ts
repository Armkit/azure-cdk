// generated by armkit
import { ArmResource } from '@yetics/armkit-core';
import { Construct } from 'constructs';

/**
 * Microsoft.Relay/namespaces
 *
 * @schema Microsoft.Relay.namespaces
 */
export class Namespaces extends ArmResource {
  /**
   * Defines a "Microsoft.Relay.namespaces" Arm Template object
   * @param scope the scope in which to define this object
   * @param name a scope-local name for the object
   * @param options configuration options
   */
  public constructor(scope: Construct, name: string, options: NamespacesOptions) {
    super(scope, name, {
      ...options,
      armResourceType: 'namespaces',
    });
  }
}

/**
 * Microsoft.Relay/namespaces/authorizationRules
 *
 * @schema Microsoft.Relay.namespaces_authorizationRules
 */
export class NamespacesAuthorizationRules extends ArmResource {
  /**
   * Defines a "Microsoft.Relay.namespaces_authorizationRules" Arm Template object
   * @param scope the scope in which to define this object
   * @param name a scope-local name for the object
   * @param options configuration options
   */
  public constructor(scope: Construct, name: string, options: NamespacesAuthorizationRulesOptions) {
    super(scope, name, {
      ...options,
      armResourceType: 'namespaces_authorizationRules',
    });
  }
}

/**
 * Microsoft.Relay/namespaces/hybridConnections
 *
 * @schema Microsoft.Relay.namespaces_hybridConnections
 */
export class NamespacesHybridConnections extends ArmResource {
  /**
   * Defines a "Microsoft.Relay.namespaces_hybridConnections" Arm Template object
   * @param scope the scope in which to define this object
   * @param name a scope-local name for the object
   * @param options configuration options
   */
  public constructor(scope: Construct, name: string, options: NamespacesHybridConnectionsOptions) {
    super(scope, name, {
      ...options,
      armResourceType: 'namespaces_hybridConnections',
    });
  }
}

/**
 * Microsoft.Relay/namespaces/hybridConnections/authorizationRules
 *
 * @schema Microsoft.Relay.namespaces_hybridConnections_authorizationRules
 */
export class NamespacesHybridConnectionsAuthorizationRules extends ArmResource {
  /**
   * Defines a "Microsoft.Relay.namespaces_hybridConnections_authorizationRules" Arm Template object
   * @param scope the scope in which to define this object
   * @param name a scope-local name for the object
   * @param options configuration options
   */
  public constructor(scope: Construct, name: string, options: NamespacesHybridConnectionsAuthorizationRulesOptions) {
    super(scope, name, {
      ...options,
      armResourceType: 'namespaces_hybridConnections_authorizationRules',
    });
  }
}

/**
 * Microsoft.Relay/namespaces/wcfRelays
 *
 * @schema Microsoft.Relay.namespaces_wcfRelays
 */
export class NamespacesWcfRelays extends ArmResource {
  /**
   * Defines a "Microsoft.Relay.namespaces_wcfRelays" Arm Template object
   * @param scope the scope in which to define this object
   * @param name a scope-local name for the object
   * @param options configuration options
   */
  public constructor(scope: Construct, name: string, options: NamespacesWcfRelaysOptions) {
    super(scope, name, {
      ...options,
      armResourceType: 'namespaces_wcfRelays',
    });
  }
}

/**
 * Microsoft.Relay/namespaces/wcfRelays/authorizationRules
 *
 * @schema Microsoft.Relay.namespaces_wcfRelays_authorizationRules
 */
export class NamespacesWcfRelaysAuthorizationRules extends ArmResource {
  /**
   * Defines a "Microsoft.Relay.namespaces_wcfRelays_authorizationRules" Arm Template object
   * @param scope the scope in which to define this object
   * @param name a scope-local name for the object
   * @param options configuration options
   */
  public constructor(scope: Construct, name: string, options: NamespacesWcfRelaysAuthorizationRulesOptions) {
    super(scope, name, {
      ...options,
      armResourceType: 'namespaces_wcfRelays_authorizationRules',
    });
  }
}

/**
 * Microsoft.Relay/namespaces
 *
 * @schema Microsoft.Relay.namespaces
 */
export interface NamespacesOptions {
  /**
   * @schema Microsoft.Relay.namespaces#apiVersion
   */
  readonly apiVersion?: MicrosoftRelayNamespacesApiVersion;

  /**
   * Resource location.
   *
   * @schema Microsoft.Relay.namespaces#location
   */
  readonly location: string;

  /**
   * The namespace name
   *
   * @schema Microsoft.Relay.namespaces#name
   */
  readonly name: string;

  /**
   * Properties of the namespace.
   *
   * @schema Microsoft.Relay.namespaces#properties
   */
  readonly properties: RelayNamespaceProperties;

  /**
   * @schema Microsoft.Relay.namespaces#resources
   */
  readonly resources?: MicrosoftRelayNamespacesResources[];

  /**
   * SKU of the namespace.
   *
   * @schema Microsoft.Relay.namespaces#sku
   */
  readonly sku?: Sku;

  /**
   * Resource tags.
   *
   * @schema Microsoft.Relay.namespaces#tags
   */
  readonly tags?: MicrosoftRelayNamespacesTags;

  /**
   * @schema Microsoft.Relay.namespaces#type
   */
  readonly type: MicrosoftRelayNamespacesType;

}

/**
 * Microsoft.Relay/namespaces/authorizationRules
 *
 * @schema Microsoft.Relay.namespaces_authorizationRules
 */
export interface NamespacesAuthorizationRulesOptions {
  /**
   * @schema Microsoft.Relay.namespaces_authorizationRules#apiVersion
   */
  readonly apiVersion?: MicrosoftRelayNamespacesAuthorizationRulesApiVersion;

  /**
   * The authorization rule name.
   *
   * @schema Microsoft.Relay.namespaces_authorizationRules#name
   */
  readonly name: string;

  /**
   * Authorization rule properties.
   *
   * @schema Microsoft.Relay.namespaces_authorizationRules#properties
   */
  readonly properties: AuthorizationRuleProperties;

  /**
   * @schema Microsoft.Relay.namespaces_authorizationRules#type
   */
  readonly type: MicrosoftRelayNamespacesAuthorizationRulesType;

}

/**
 * Microsoft.Relay/namespaces/hybridConnections
 *
 * @schema Microsoft.Relay.namespaces_hybridConnections
 */
export interface NamespacesHybridConnectionsOptions {
  /**
   * @schema Microsoft.Relay.namespaces_hybridConnections#apiVersion
   */
  readonly apiVersion?: MicrosoftRelayNamespacesHybridConnectionsApiVersion;

  /**
   * The hybrid connection name.
   *
   * @schema Microsoft.Relay.namespaces_hybridConnections#name
   */
  readonly name: string;

  /**
   * Properties of the HybridConnection.
   *
   * @schema Microsoft.Relay.namespaces_hybridConnections#properties
   */
  readonly properties: HybridConnectionProperties;

  /**
   * @schema Microsoft.Relay.namespaces_hybridConnections#resources
   */
  readonly resources?: NamespacesHybridConnectionsAuthorizationRulesChildResource[];

  /**
   * @schema Microsoft.Relay.namespaces_hybridConnections#type
   */
  readonly type: MicrosoftRelayNamespacesHybridConnectionsType;

}

/**
 * Microsoft.Relay/namespaces/hybridConnections/authorizationRules
 *
 * @schema Microsoft.Relay.namespaces_hybridConnections_authorizationRules
 */
export interface NamespacesHybridConnectionsAuthorizationRulesOptions {
  /**
   * @schema Microsoft.Relay.namespaces_hybridConnections_authorizationRules#apiVersion
   */
  readonly apiVersion?: MicrosoftRelayNamespacesHybridConnectionsAuthorizationRulesApiVersion;

  /**
   * The authorization rule name.
   *
   * @schema Microsoft.Relay.namespaces_hybridConnections_authorizationRules#name
   */
  readonly name: string;

  /**
   * Authorization rule properties.
   *
   * @schema Microsoft.Relay.namespaces_hybridConnections_authorizationRules#properties
   */
  readonly properties: AuthorizationRuleProperties;

  /**
   * @schema Microsoft.Relay.namespaces_hybridConnections_authorizationRules#type
   */
  readonly type: MicrosoftRelayNamespacesHybridConnectionsAuthorizationRulesType;

}

/**
 * Microsoft.Relay/namespaces/wcfRelays
 *
 * @schema Microsoft.Relay.namespaces_wcfRelays
 */
export interface NamespacesWcfRelaysOptions {
  /**
   * @schema Microsoft.Relay.namespaces_wcfRelays#apiVersion
   */
  readonly apiVersion?: MicrosoftRelayNamespacesWcfRelaysApiVersion;

  /**
   * The relay name.
   *
   * @schema Microsoft.Relay.namespaces_wcfRelays#name
   */
  readonly name: string;

  /**
   * Properties of the WCF relay.
   *
   * @schema Microsoft.Relay.namespaces_wcfRelays#properties
   */
  readonly properties: WcfRelayProperties;

  /**
   * @schema Microsoft.Relay.namespaces_wcfRelays#resources
   */
  readonly resources?: NamespacesWcfRelaysAuthorizationRulesChildResource[];

  /**
   * @schema Microsoft.Relay.namespaces_wcfRelays#type
   */
  readonly type: MicrosoftRelayNamespacesWcfRelaysType;

}

/**
 * Microsoft.Relay/namespaces/wcfRelays/authorizationRules
 *
 * @schema Microsoft.Relay.namespaces_wcfRelays_authorizationRules
 */
export interface NamespacesWcfRelaysAuthorizationRulesOptions {
  /**
   * @schema Microsoft.Relay.namespaces_wcfRelays_authorizationRules#apiVersion
   */
  readonly apiVersion?: MicrosoftRelayNamespacesWcfRelaysAuthorizationRulesApiVersion;

  /**
   * The authorization rule name.
   *
   * @schema Microsoft.Relay.namespaces_wcfRelays_authorizationRules#name
   */
  readonly name: string;

  /**
   * Authorization rule properties.
   *
   * @schema Microsoft.Relay.namespaces_wcfRelays_authorizationRules#properties
   */
  readonly properties: AuthorizationRuleProperties;

  /**
   * @schema Microsoft.Relay.namespaces_wcfRelays_authorizationRules#type
   */
  readonly type: MicrosoftRelayNamespacesWcfRelaysAuthorizationRulesType;

}

export enum MicrosoftRelayNamespacesApiVersion {
  "MicrosoftRelayNamespacesApiVersion_2017_04_01" = '2017-04-01',
}

/**
 * Properties of the namespace.
 *
 * @schema #/definitions/RelayNamespaceProperties
 */
export interface RelayNamespaceProperties {
}

/**
 * @schema MicrosoftRelayNamespacesResources
 */
export class MicrosoftRelayNamespacesResources {
  public static fromNamespacesAuthorizationRulesChildResource(value: NamespacesAuthorizationRulesChildResource): MicrosoftRelayNamespacesResources {
    return new MicrosoftRelayNamespacesResources(value);
  }
  public static fromNamespacesHybridConnectionsChildResource(value: NamespacesHybridConnectionsChildResource): MicrosoftRelayNamespacesResources {
    return new MicrosoftRelayNamespacesResources(value);
  }
  public static fromNamespacesWcfRelaysChildResource(value: NamespacesWcfRelaysChildResource): MicrosoftRelayNamespacesResources {
    return new MicrosoftRelayNamespacesResources(value);
  }
  private constructor(value: any) {
    Object.defineProperty(this, 'resolve', { value: () => value });
  }
}

/**
 * SKU of the namespace.
 *
 * @schema #/definitions/Sku
 */
export interface Sku {
  /**
   * Name of this SKU.
   *
   * @schema #/definitions/Sku#name
   */
  readonly name: SkuName;

  /**
   * The tier of this SKU.
   *
   * @schema #/definitions/Sku#tier
   */
  readonly tier?: SkuTier;

}

/**
 * @schema MicrosoftRelayNamespacesTags
 */
export interface MicrosoftRelayNamespacesTags {
}

export enum MicrosoftRelayNamespacesType {
  "MicrosoftRelayNamespacesType_MICROSOFT_RELAY_NAMESPACES" = 'Microsoft.Relay/namespaces',
}

export enum MicrosoftRelayNamespacesAuthorizationRulesApiVersion {
  "MicrosoftRelayNamespacesAuthorizationRulesApiVersion_2017_04_01" = '2017-04-01',
}

/**
 * Authorization rule properties.
 *
 * @schema #/definitions/AuthorizationRuleProperties
 */
export interface AuthorizationRuleProperties {
  /**
   * The rights associated with the rule.
   *
   * @schema #/definitions/AuthorizationRuleProperties#rights
   */
  readonly rights: AuthorizationRulePropertiesRights[];

}

export enum MicrosoftRelayNamespacesAuthorizationRulesType {
  "MicrosoftRelayNamespacesAuthorizationRulesType_MICROSOFT_RELAY_NAMESPACES_AUTHORIZATION_RULES" = 'Microsoft.Relay/namespaces/authorizationRules',
}

export enum MicrosoftRelayNamespacesHybridConnectionsApiVersion {
  "MicrosoftRelayNamespacesHybridConnectionsApiVersion_2017_04_01" = '2017-04-01',
}

/**
 * Properties of the HybridConnection.
 *
 * @schema #/definitions/HybridConnectionProperties
 */
export interface HybridConnectionProperties {
  /**
   * Returns true if client authorization is needed for this hybrid connection; otherwise, false.
   *
   * @schema #/definitions/HybridConnectionProperties#requiresClientAuthorization
   */
  readonly requiresClientAuthorization?: boolean;

  /**
   * The usermetadata is a placeholder to store user-defined string data for the hybrid connection endpoint. For example, it can be used to store descriptive data, such as a list of teams and their contact information. Also, user-defined configuration settings can be stored.
   *
   * @schema #/definitions/HybridConnectionProperties#userMetadata
   */
  readonly userMetadata?: string;

}

/**
 * Microsoft.Relay/namespaces/hybridConnections/authorizationRules
 *
 * @schema #/definitions/namespaces_hybridConnections_authorizationRules_childResource
 */
export interface NamespacesHybridConnectionsAuthorizationRulesChildResource {
  /**
   * @schema #/definitions/namespaces_hybridConnections_authorizationRules_childResource#apiVersion
   */
  readonly apiVersion: NamespacesHybridConnectionsAuthorizationRulesChildResourceApiVersion;

  /**
   * The authorization rule name.
   *
   * @schema #/definitions/namespaces_hybridConnections_authorizationRules_childResource#name
   */
  readonly name: string;

  /**
   * Authorization rule properties.
   *
   * @schema #/definitions/namespaces_hybridConnections_authorizationRules_childResource#properties
   */
  readonly properties: AuthorizationRuleProperties;

  /**
   * @schema #/definitions/namespaces_hybridConnections_authorizationRules_childResource#type
   */
  readonly type: NamespacesHybridConnectionsAuthorizationRulesChildResourceType;

}

export enum MicrosoftRelayNamespacesHybridConnectionsType {
  "MicrosoftRelayNamespacesHybridConnectionsType_MICROSOFT_RELAY_NAMESPACES_HYBRID_CONNECTIONS" = 'Microsoft.Relay/namespaces/hybridConnections',
}

export enum MicrosoftRelayNamespacesHybridConnectionsAuthorizationRulesApiVersion {
  "MicrosoftRelayNamespacesHybridConnectionsAuthorizationRulesApiVersion_2017_04_01" = '2017-04-01',
}

export enum MicrosoftRelayNamespacesHybridConnectionsAuthorizationRulesType {
  "MicrosoftRelayNamespacesHybridConnectionsAuthorizationRulesType_MICROSOFT_RELAY_NAMESPACES_HYBRID_CONNECTIONS_AUTHORIZATION_RULES" = 'Microsoft.Relay/namespaces/hybridConnections/authorizationRules',
}

export enum MicrosoftRelayNamespacesWcfRelaysApiVersion {
  "MicrosoftRelayNamespacesWcfRelaysApiVersion_2017_04_01" = '2017-04-01',
}

/**
 * Properties of the WCF relay.
 *
 * @schema #/definitions/WcfRelayProperties
 */
export interface WcfRelayProperties {
  /**
   * WCF relay type.
   *
   * @schema #/definitions/WcfRelayProperties#relayType
   */
  readonly relayType?: WcfRelayPropertiesRelayType;

  /**
   * Returns true if client authorization is needed for this relay; otherwise, false.
   *
   * @schema #/definitions/WcfRelayProperties#requiresClientAuthorization
   */
  readonly requiresClientAuthorization?: boolean;

  /**
   * Returns true if transport security is needed for this relay; otherwise, false.
   *
   * @schema #/definitions/WcfRelayProperties#requiresTransportSecurity
   */
  readonly requiresTransportSecurity?: boolean;

  /**
   * The usermetadata is a placeholder to store user-defined string data for the WCF Relay endpoint. For example, it can be used to store descriptive data, such as list of teams and their contact information. Also, user-defined configuration settings can be stored.
   *
   * @schema #/definitions/WcfRelayProperties#userMetadata
   */
  readonly userMetadata?: string;

}

/**
 * Microsoft.Relay/namespaces/wcfRelays/authorizationRules
 *
 * @schema #/definitions/namespaces_wcfRelays_authorizationRules_childResource
 */
export interface NamespacesWcfRelaysAuthorizationRulesChildResource {
  /**
   * @schema #/definitions/namespaces_wcfRelays_authorizationRules_childResource#apiVersion
   */
  readonly apiVersion: NamespacesWcfRelaysAuthorizationRulesChildResourceApiVersion;

  /**
   * The authorization rule name.
   *
   * @schema #/definitions/namespaces_wcfRelays_authorizationRules_childResource#name
   */
  readonly name: string;

  /**
   * Authorization rule properties.
   *
   * @schema #/definitions/namespaces_wcfRelays_authorizationRules_childResource#properties
   */
  readonly properties: AuthorizationRuleProperties;

  /**
   * @schema #/definitions/namespaces_wcfRelays_authorizationRules_childResource#type
   */
  readonly type: NamespacesWcfRelaysAuthorizationRulesChildResourceType;

}

export enum MicrosoftRelayNamespacesWcfRelaysType {
  "MicrosoftRelayNamespacesWcfRelaysType_MICROSOFT_RELAY_NAMESPACES_WCF_RELAYS" = 'Microsoft.Relay/namespaces/wcfRelays',
}

export enum MicrosoftRelayNamespacesWcfRelaysAuthorizationRulesApiVersion {
  "MicrosoftRelayNamespacesWcfRelaysAuthorizationRulesApiVersion_2017_04_01" = '2017-04-01',
}

export enum MicrosoftRelayNamespacesWcfRelaysAuthorizationRulesType {
  "MicrosoftRelayNamespacesWcfRelaysAuthorizationRulesType_MICROSOFT_RELAY_NAMESPACES_WCF_RELAYS_AUTHORIZATION_RULES" = 'Microsoft.Relay/namespaces/wcfRelays/authorizationRules',
}

/**
 * Microsoft.Relay/namespaces/authorizationRules
 *
 * @schema #/definitions/namespaces_authorizationRules_childResource
 */
export interface NamespacesAuthorizationRulesChildResource {
  /**
   * @schema #/definitions/namespaces_authorizationRules_childResource#apiVersion
   */
  readonly apiVersion: NamespacesAuthorizationRulesChildResourceApiVersion;

  /**
   * The authorization rule name.
   *
   * @schema #/definitions/namespaces_authorizationRules_childResource#name
   */
  readonly name: string;

  /**
   * Authorization rule properties.
   *
   * @schema #/definitions/namespaces_authorizationRules_childResource#properties
   */
  readonly properties: AuthorizationRuleProperties;

  /**
   * @schema #/definitions/namespaces_authorizationRules_childResource#type
   */
  readonly type: NamespacesAuthorizationRulesChildResourceType;

}

/**
 * Microsoft.Relay/namespaces/hybridConnections
 *
 * @schema #/definitions/namespaces_hybridConnections_childResource
 */
export interface NamespacesHybridConnectionsChildResource {
  /**
   * @schema #/definitions/namespaces_hybridConnections_childResource#apiVersion
   */
  readonly apiVersion: NamespacesHybridConnectionsChildResourceApiVersion;

  /**
   * The hybrid connection name.
   *
   * @schema #/definitions/namespaces_hybridConnections_childResource#name
   */
  readonly name: string;

  /**
   * Properties of the HybridConnection.
   *
   * @schema #/definitions/namespaces_hybridConnections_childResource#properties
   */
  readonly properties: HybridConnectionProperties;

  /**
   * @schema #/definitions/namespaces_hybridConnections_childResource#type
   */
  readonly type: NamespacesHybridConnectionsChildResourceType;

}

/**
 * Microsoft.Relay/namespaces/wcfRelays
 *
 * @schema #/definitions/namespaces_wcfRelays_childResource
 */
export interface NamespacesWcfRelaysChildResource {
  /**
   * @schema #/definitions/namespaces_wcfRelays_childResource#apiVersion
   */
  readonly apiVersion: NamespacesWcfRelaysChildResourceApiVersion;

  /**
   * The relay name.
   *
   * @schema #/definitions/namespaces_wcfRelays_childResource#name
   */
  readonly name: string;

  /**
   * Properties of the WCF relay.
   *
   * @schema #/definitions/namespaces_wcfRelays_childResource#properties
   */
  readonly properties: WcfRelayProperties;

  /**
   * @schema #/definitions/namespaces_wcfRelays_childResource#type
   */
  readonly type: NamespacesWcfRelaysChildResourceType;

}

export enum SkuName {
  STANDARD = 'Standard',
}

export enum SkuTier {
  STANDARD = 'Standard',
}

export enum AuthorizationRulePropertiesRights {
  MANAGE = 'Manage',
  SEND = 'Send',
  LISTEN = 'Listen',
}

export enum NamespacesHybridConnectionsAuthorizationRulesChildResourceApiVersion {
  "NamespacesHybridConnectionsAuthorizationRulesChildResourceApiVersion_2017_04_01" = '2017-04-01',
}

export enum NamespacesHybridConnectionsAuthorizationRulesChildResourceType {
  AUTHORIZATION_RULES = 'authorizationRules',
}

export enum WcfRelayPropertiesRelayType {
  NET_TCP = 'NetTcp',
  HTTP = 'Http',
}

export enum NamespacesWcfRelaysAuthorizationRulesChildResourceApiVersion {
  "NamespacesWcfRelaysAuthorizationRulesChildResourceApiVersion_2017_04_01" = '2017-04-01',
}

export enum NamespacesWcfRelaysAuthorizationRulesChildResourceType {
  AUTHORIZATION_RULES = 'authorizationRules',
}

export enum NamespacesAuthorizationRulesChildResourceApiVersion {
  "NamespacesAuthorizationRulesChildResourceApiVersion_2017_04_01" = '2017-04-01',
}

export enum NamespacesAuthorizationRulesChildResourceType {
  AUTHORIZATION_RULES = 'authorizationRules',
}

export enum NamespacesHybridConnectionsChildResourceApiVersion {
  "NamespacesHybridConnectionsChildResourceApiVersion_2017_04_01" = '2017-04-01',
}

export enum NamespacesHybridConnectionsChildResourceType {
  HYBRID_CONNECTIONS = 'hybridConnections',
}

export enum NamespacesWcfRelaysChildResourceApiVersion {
  "NamespacesWcfRelaysChildResourceApiVersion_2017_04_01" = '2017-04-01',
}

export enum NamespacesWcfRelaysChildResourceType {
  WCF_RELAYS = 'wcfRelays',
}


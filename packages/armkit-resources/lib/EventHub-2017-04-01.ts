      // generated by armkit
      import { ArmResource } from '@yetics/armkit-core';
      import { Construct } from 'constructs';

      /**
       * Microsoft.EventHub/namespaces
       *
       * @schema Microsoft.EventHub.namespaces
       */
      export class Namespaces extends ArmResource {
        /**
         * Defines a "Microsoft.EventHub.namespaces" Arm Template object
         * @param scope the scope in which to define this object
         * @param name a scope-local name for the object
         * @param options configuration options
         */
        public constructor(scope: Construct, name: string, options: NamespacesOptions) {
          super(scope, name, {
            ...options,
            armResourceType: 'namespaces',
          });
        }
      }

      /**
       * Microsoft.EventHub/namespaces/authorizationRules
       *
       * @schema Microsoft.EventHub.namespaces_authorizationRules
       */
      export class NamespacesAuthorizationRules extends ArmResource {
        /**
         * Defines a "Microsoft.EventHub.namespaces_authorizationRules" Arm Template object
         * @param scope the scope in which to define this object
         * @param name a scope-local name for the object
         * @param options configuration options
         */
        public constructor(scope: Construct, name: string, options: NamespacesAuthorizationRulesOptions) {
          super(scope, name, {
            ...options,
            armResourceType: 'namespaces_authorizationRules',
          });
        }
      }

      /**
       * Microsoft.EventHub/namespaces/disasterRecoveryConfigs
       *
       * @schema Microsoft.EventHub.namespaces_disasterRecoveryConfigs
       */
      export class NamespacesDisasterRecoveryConfigs extends ArmResource {
        /**
         * Defines a "Microsoft.EventHub.namespaces_disasterRecoveryConfigs" Arm Template object
         * @param scope the scope in which to define this object
         * @param name a scope-local name for the object
         * @param options configuration options
         */
        public constructor(scope: Construct, name: string, options: NamespacesDisasterRecoveryConfigsOptions) {
          super(scope, name, {
            ...options,
            armResourceType: 'namespaces_disasterRecoveryConfigs',
          });
        }
      }

      /**
       * Microsoft.EventHub/namespaces/eventhubs
       *
       * @schema Microsoft.EventHub.namespaces_eventhubs
       */
      export class NamespacesEventhubs extends ArmResource {
        /**
         * Defines a "Microsoft.EventHub.namespaces_eventhubs" Arm Template object
         * @param scope the scope in which to define this object
         * @param name a scope-local name for the object
         * @param options configuration options
         */
        public constructor(scope: Construct, name: string, options: NamespacesEventhubsOptions) {
          super(scope, name, {
            ...options,
            armResourceType: 'namespaces_eventhubs',
          });
        }
      }

      /**
       * Microsoft.EventHub/namespaces/eventhubs/authorizationRules
       *
       * @schema Microsoft.EventHub.namespaces_eventhubs_authorizationRules
       */
      export class NamespacesEventhubsAuthorizationRules extends ArmResource {
        /**
         * Defines a "Microsoft.EventHub.namespaces_eventhubs_authorizationRules" Arm Template object
         * @param scope the scope in which to define this object
         * @param name a scope-local name for the object
         * @param options configuration options
         */
        public constructor(scope: Construct, name: string, options: NamespacesEventhubsAuthorizationRulesOptions) {
          super(scope, name, {
            ...options,
            armResourceType: 'namespaces_eventhubs_authorizationRules',
          });
        }
      }

      /**
       * Microsoft.EventHub/namespaces/eventhubs/consumergroups
       *
       * @schema Microsoft.EventHub.namespaces_eventhubs_consumergroups
       */
      export class NamespacesEventhubsConsumergroups extends ArmResource {
        /**
         * Defines a "Microsoft.EventHub.namespaces_eventhubs_consumergroups" Arm Template object
         * @param scope the scope in which to define this object
         * @param name a scope-local name for the object
         * @param options configuration options
         */
        public constructor(scope: Construct, name: string, options: NamespacesEventhubsConsumergroupsOptions) {
          super(scope, name, {
            ...options,
            armResourceType: 'namespaces_eventhubs_consumergroups',
          });
        }
      }

      /**
       * Microsoft.EventHub/namespaces/networkRuleSets
       *
       * @schema Microsoft.EventHub.namespaces_networkRuleSets
       */
      export class NamespacesNetworkRuleSets extends ArmResource {
        /**
         * Defines a "Microsoft.EventHub.namespaces_networkRuleSets" Arm Template object
         * @param scope the scope in which to define this object
         * @param name a scope-local name for the object
         * @param options configuration options
         */
        public constructor(scope: Construct, name: string, options: NamespacesNetworkRuleSetsOptions) {
          super(scope, name, {
            ...options,
            armResourceType: 'namespaces_networkRuleSets',
          });
        }
      }

      /**
       * Microsoft.EventHub/namespaces
       *
       * @schema Microsoft.EventHub.namespaces
       */
      export interface NamespacesOptions {
        /**
         * @schema Microsoft.EventHub.namespaces#apiVersion
         */
        readonly apiVersion?: MicrosoftEventHubNamespacesApiVersion;

        /**
         * Resource location.
         *
         * @schema Microsoft.EventHub.namespaces#location
         */
        readonly location?: string;

        /**
         * The Namespace name
         *
         * @schema Microsoft.EventHub.namespaces#name
         */
        readonly name: string;

        /**
         * Namespace properties supplied for create namespace operation.
         *
         * @schema Microsoft.EventHub.namespaces#properties
         */
        readonly properties: EhNamespaceProperties;

        /**
         * @schema Microsoft.EventHub.namespaces#resources
         */
        readonly resources?: MicrosoftEventHubNamespacesResources[];

        /**
         * SKU parameters supplied to the create namespace operation
         *
         * @schema Microsoft.EventHub.namespaces#sku
         */
        readonly sku?: Sku;

        /**
         * Resource tags.
         *
         * @schema Microsoft.EventHub.namespaces#tags
         */
        readonly tags?: MicrosoftEventHubNamespacesTags;

        /**
         * @schema Microsoft.EventHub.namespaces#type
         */
        readonly type: MicrosoftEventHubNamespacesType;

      }

      /**
       * Microsoft.EventHub/namespaces/authorizationRules
       *
       * @schema Microsoft.EventHub.namespaces_authorizationRules
       */
      export interface NamespacesAuthorizationRulesOptions {
        /**
         * @schema Microsoft.EventHub.namespaces_authorizationRules#apiVersion
         */
        readonly apiVersion?: MicrosoftEventHubNamespacesAuthorizationRulesApiVersion;

        /**
         * The authorization rule name.
         *
         * @schema Microsoft.EventHub.namespaces_authorizationRules#name
         */
        readonly name: string;

        /**
         * Properties supplied to create or update AuthorizationRule
         *
         * @schema Microsoft.EventHub.namespaces_authorizationRules#properties
         */
        readonly properties: AuthorizationRuleProperties;

        /**
         * @schema Microsoft.EventHub.namespaces_authorizationRules#type
         */
        readonly type: MicrosoftEventHubNamespacesAuthorizationRulesType;

      }

      /**
       * Microsoft.EventHub/namespaces/disasterRecoveryConfigs
       *
       * @schema Microsoft.EventHub.namespaces_disasterRecoveryConfigs
       */
      export interface NamespacesDisasterRecoveryConfigsOptions {
        /**
         * @schema Microsoft.EventHub.namespaces_disasterRecoveryConfigs#apiVersion
         */
        readonly apiVersion?: MicrosoftEventHubNamespacesDisasterRecoveryConfigsApiVersion;

        /**
         * The Disaster Recovery configuration name
         *
         * @schema Microsoft.EventHub.namespaces_disasterRecoveryConfigs#name
         */
        readonly name: string;

        /**
         * Properties required to the Create Or Update Alias(Disaster Recovery configurations)
         *
         * @schema Microsoft.EventHub.namespaces_disasterRecoveryConfigs#properties
         */
        readonly properties: ArmDisasterRecoveryProperties;

        /**
         * @schema Microsoft.EventHub.namespaces_disasterRecoveryConfigs#type
         */
        readonly type: MicrosoftEventHubNamespacesDisasterRecoveryConfigsType;

      }

      /**
       * Microsoft.EventHub/namespaces/eventhubs
       *
       * @schema Microsoft.EventHub.namespaces_eventhubs
       */
      export interface NamespacesEventhubsOptions {
        /**
         * @schema Microsoft.EventHub.namespaces_eventhubs#apiVersion
         */
        readonly apiVersion?: MicrosoftEventHubNamespacesEventhubsApiVersion;

        /**
         * The Event Hub name
         *
         * @schema Microsoft.EventHub.namespaces_eventhubs#name
         */
        readonly name: string;

        /**
         * Properties supplied to the Create Or Update Event Hub operation.
         *
         * @schema Microsoft.EventHub.namespaces_eventhubs#properties
         */
        readonly properties: EventhubProperties;

        /**
         * @schema Microsoft.EventHub.namespaces_eventhubs#resources
         */
        readonly resources?: MicrosoftEventHubNamespacesEventhubsResources[];

        /**
         * @schema Microsoft.EventHub.namespaces_eventhubs#type
         */
        readonly type: MicrosoftEventHubNamespacesEventhubsType;

      }

      /**
       * Microsoft.EventHub/namespaces/eventhubs/authorizationRules
       *
       * @schema Microsoft.EventHub.namespaces_eventhubs_authorizationRules
       */
      export interface NamespacesEventhubsAuthorizationRulesOptions {
        /**
         * @schema Microsoft.EventHub.namespaces_eventhubs_authorizationRules#apiVersion
         */
        readonly apiVersion?: MicrosoftEventHubNamespacesEventhubsAuthorizationRulesApiVersion;

        /**
         * The authorization rule name.
         *
         * @schema Microsoft.EventHub.namespaces_eventhubs_authorizationRules#name
         */
        readonly name: string;

        /**
         * Properties supplied to create or update AuthorizationRule
         *
         * @schema Microsoft.EventHub.namespaces_eventhubs_authorizationRules#properties
         */
        readonly properties: AuthorizationRuleProperties;

        /**
         * @schema Microsoft.EventHub.namespaces_eventhubs_authorizationRules#type
         */
        readonly type: MicrosoftEventHubNamespacesEventhubsAuthorizationRulesType;

      }

      /**
       * Microsoft.EventHub/namespaces/eventhubs/consumergroups
       *
       * @schema Microsoft.EventHub.namespaces_eventhubs_consumergroups
       */
      export interface NamespacesEventhubsConsumergroupsOptions {
        /**
         * @schema Microsoft.EventHub.namespaces_eventhubs_consumergroups#apiVersion
         */
        readonly apiVersion?: MicrosoftEventHubNamespacesEventhubsConsumergroupsApiVersion;

        /**
         * The consumer group name
         *
         * @schema Microsoft.EventHub.namespaces_eventhubs_consumergroups#name
         */
        readonly name: string;

        /**
         * Single item in List or Get Consumer group operation
         *
         * @schema Microsoft.EventHub.namespaces_eventhubs_consumergroups#properties
         */
        readonly properties: ConsumerGroupProperties;

        /**
         * @schema Microsoft.EventHub.namespaces_eventhubs_consumergroups#type
         */
        readonly type: MicrosoftEventHubNamespacesEventhubsConsumergroupsType;

      }

      /**
       * Microsoft.EventHub/namespaces/networkRuleSets
       *
       * @schema Microsoft.EventHub.namespaces_networkRuleSets
       */
      export interface NamespacesNetworkRuleSetsOptions {
        /**
         * @schema Microsoft.EventHub.namespaces_networkRuleSets#apiVersion
         */
        readonly apiVersion?: MicrosoftEventHubNamespacesNetworkRuleSetsApiVersion;

        /**
         * @schema Microsoft.EventHub.namespaces_networkRuleSets#name
         */
        readonly name: MicrosoftEventHubNamespacesNetworkRuleSetsNamePattern;

        /**
         * NetworkRuleSet properties
         *
         * @schema Microsoft.EventHub.namespaces_networkRuleSets#properties
         */
        readonly properties: NetworkRuleSetProperties;

        /**
         * @schema Microsoft.EventHub.namespaces_networkRuleSets#type
         */
        readonly type: MicrosoftEventHubNamespacesNetworkRuleSetsType;

      }

      export enum MicrosoftEventHubNamespacesApiVersion {
        "MicrosoftEventHubNamespacesApiVersion_2017_04_01" = '2017-04-01',
      }

      /**
       * Namespace properties supplied for create namespace operation.
       *
       * @schema #/definitions/EHNamespaceProperties
       */
      export interface EhNamespaceProperties {
        /**
         * Value that indicates whether AutoInflate is enabled for eventhub namespace.
         *
         * @schema #/definitions/EHNamespaceProperties#isAutoInflateEnabled
         */
        readonly isAutoInflateEnabled?: boolean;

        /**
         * Value that indicates whether Kafka is enabled for eventhub namespace.
         *
         * @schema #/definitions/EHNamespaceProperties#kafkaEnabled
         */
        readonly kafkaEnabled?: boolean;

        /**
         * Upper limit of throughput units when AutoInflate is enabled, value should be within 0 to 20 throughput units. ( '0' if AutoInflateEnabled = true)
         *
         * @schema #/definitions/EHNamespaceProperties#maximumThroughputUnits
         */
        readonly maximumThroughputUnits?: number;

      }

      /**
       * @schema MicrosoftEventHubNamespacesResources
       */
      export class MicrosoftEventHubNamespacesResources {
        public static fromNamespacesAuthorizationRulesChildResource(value: NamespacesAuthorizationRulesChildResource): MicrosoftEventHubNamespacesResources {
          return new MicrosoftEventHubNamespacesResources(value);
        }
        public static fromNamespacesNetworkRuleSetsChildResource(value: NamespacesNetworkRuleSetsChildResource): MicrosoftEventHubNamespacesResources {
          return new MicrosoftEventHubNamespacesResources(value);
        }
        public static fromNamespacesDisasterRecoveryConfigsChildResource(value: NamespacesDisasterRecoveryConfigsChildResource): MicrosoftEventHubNamespacesResources {
          return new MicrosoftEventHubNamespacesResources(value);
        }
        public static fromNamespacesEventhubsChildResource(value: NamespacesEventhubsChildResource): MicrosoftEventHubNamespacesResources {
          return new MicrosoftEventHubNamespacesResources(value);
        }
        private constructor(value: any) {
          Object.defineProperty(this, 'resolve', { value: () => value });
        }
      }

      /**
       * SKU parameters supplied to the create namespace operation
       *
       * @schema #/definitions/Sku
       */
      export interface Sku {
        /**
         * The Event Hubs throughput units, value should be 0 to 20 throughput units.
         *
         * @schema #/definitions/Sku#capacity
         */
        readonly capacity?: number;

        /**
         * Name of this SKU.
         *
         * @schema #/definitions/Sku#name
         */
        readonly name: SkuName;

        /**
         * The billing tier of this particular SKU.
         *
         * @schema #/definitions/Sku#tier
         */
        readonly tier?: SkuTier;

      }

      /**
       * @schema MicrosoftEventHubNamespacesTags
       */
      export interface MicrosoftEventHubNamespacesTags {
      }

      export enum MicrosoftEventHubNamespacesType {
        "MicrosoftEventHubNamespacesType_MICROSOFT_EVENT_HUB_NAMESPACES" = 'Microsoft.EventHub/namespaces',
      }

      export enum MicrosoftEventHubNamespacesAuthorizationRulesApiVersion {
        "MicrosoftEventHubNamespacesAuthorizationRulesApiVersion_2017_04_01" = '2017-04-01',
      }

      /**
       * Properties supplied to create or update AuthorizationRule
       *
       * @schema #/definitions/AuthorizationRuleProperties
       */
      export interface AuthorizationRuleProperties {
        /**
         * The rights associated with the rule.
         *
         * @schema #/definitions/AuthorizationRuleProperties#rights
         */
        readonly rights: AuthorizationRulePropertiesRights[];

      }

      export enum MicrosoftEventHubNamespacesAuthorizationRulesType {
        "MicrosoftEventHubNamespacesAuthorizationRulesType_MICROSOFT_EVENT_HUB_NAMESPACES_AUTHORIZATION_RULES" = 'Microsoft.EventHub/namespaces/authorizationRules',
      }

      export enum MicrosoftEventHubNamespacesDisasterRecoveryConfigsApiVersion {
        "MicrosoftEventHubNamespacesDisasterRecoveryConfigsApiVersion_2017_04_01" = '2017-04-01',
      }

      /**
       * Properties required to the Create Or Update Alias(Disaster Recovery configurations)
       *
       * @schema #/definitions/ArmDisasterRecoveryProperties
       */
      export interface ArmDisasterRecoveryProperties {
        /**
         * Alternate name specified when alias and namespace names are same.
         *
         * @schema #/definitions/ArmDisasterRecoveryProperties#alternateName
         */
        readonly alternateName?: string;

        /**
         * ARM Id of the Primary/Secondary eventhub namespace name, which is part of GEO DR pairing
         *
         * @schema #/definitions/ArmDisasterRecoveryProperties#partnerNamespace
         */
        readonly partnerNamespace?: string;

      }

      export enum MicrosoftEventHubNamespacesDisasterRecoveryConfigsType {
        "MicrosoftEventHubNamespacesDisasterRecoveryConfigsType_MICROSOFT_EVENT_HUB_NAMESPACES_DISASTER_RECOVERY_CONFIGS" = 'Microsoft.EventHub/namespaces/disasterRecoveryConfigs',
      }

      export enum MicrosoftEventHubNamespacesEventhubsApiVersion {
        "MicrosoftEventHubNamespacesEventhubsApiVersion_2017_04_01" = '2017-04-01',
      }

      /**
       * Properties supplied to the Create Or Update Event Hub operation.
       *
       * @schema #/definitions/EventhubProperties
       */
      export interface EventhubProperties {
        /**
         * Properties to configure capture description for eventhub
         *
         * @schema #/definitions/EventhubProperties#captureDescription
         */
        readonly captureDescription?: CaptureDescription;

        /**
         * Number of days to retain the events for this Event Hub, value should be 1 to 7 days
         *
         * @schema #/definitions/EventhubProperties#messageRetentionInDays
         */
        readonly messageRetentionInDays?: number;

        /**
         * Number of partitions created for the Event Hub, allowed values are from 1 to 32 partitions.
         *
         * @schema #/definitions/EventhubProperties#partitionCount
         */
        readonly partitionCount?: number;

        /**
         * Enumerates the possible values for the status of the Event Hub.
         *
         * @schema #/definitions/EventhubProperties#status
         */
        readonly status?: EventhubPropertiesStatus;

      }

      /**
       * @schema MicrosoftEventHubNamespacesEventhubsResources
       */
      export class MicrosoftEventHubNamespacesEventhubsResources {
        public static fromNamespacesEventhubsAuthorizationRulesChildResource(value: NamespacesEventhubsAuthorizationRulesChildResource): MicrosoftEventHubNamespacesEventhubsResources {
          return new MicrosoftEventHubNamespacesEventhubsResources(value);
        }
        public static fromNamespacesEventhubsConsumergroupsChildResource(value: NamespacesEventhubsConsumergroupsChildResource): MicrosoftEventHubNamespacesEventhubsResources {
          return new MicrosoftEventHubNamespacesEventhubsResources(value);
        }
        private constructor(value: any) {
          Object.defineProperty(this, 'resolve', { value: () => value });
        }
      }

      export enum MicrosoftEventHubNamespacesEventhubsType {
        "MicrosoftEventHubNamespacesEventhubsType_MICROSOFT_EVENT_HUB_NAMESPACES_EVENTHUBS" = 'Microsoft.EventHub/namespaces/eventhubs',
      }

      export enum MicrosoftEventHubNamespacesEventhubsAuthorizationRulesApiVersion {
        "MicrosoftEventHubNamespacesEventhubsAuthorizationRulesApiVersion_2017_04_01" = '2017-04-01',
      }

      export enum MicrosoftEventHubNamespacesEventhubsAuthorizationRulesType {
        "MicrosoftEventHubNamespacesEventhubsAuthorizationRulesType_MICROSOFT_EVENT_HUB_NAMESPACES_EVENTHUBS_AUTHORIZATION_RULES" = 'Microsoft.EventHub/namespaces/eventhubs/authorizationRules',
      }

      export enum MicrosoftEventHubNamespacesEventhubsConsumergroupsApiVersion {
        "MicrosoftEventHubNamespacesEventhubsConsumergroupsApiVersion_2017_04_01" = '2017-04-01',
      }

      /**
       * Single item in List or Get Consumer group operation
       *
       * @schema #/definitions/ConsumerGroupProperties
       */
      export interface ConsumerGroupProperties {
        /**
         * User Metadata is a placeholder to store user-defined string data with maximum length 1024. e.g. it can be used to store descriptive data, such as list of teams and their contact information also user-defined configuration settings can be stored.
         *
         * @schema #/definitions/ConsumerGroupProperties#userMetadata
         */
        readonly userMetadata?: string;

      }

      export enum MicrosoftEventHubNamespacesEventhubsConsumergroupsType {
        "MicrosoftEventHubNamespacesEventhubsConsumergroupsType_MICROSOFT_EVENT_HUB_NAMESPACES_EVENTHUBS_CONSUMERGROUPS" = 'Microsoft.EventHub/namespaces/eventhubs/consumergroups',
      }

      export enum MicrosoftEventHubNamespacesNetworkRuleSetsApiVersion {
        "MicrosoftEventHubNamespacesNetworkRuleSetsApiVersion_2017_04_01" = '2017-04-01',
      }

      /**
       * @schema MicrosoftEventHubNamespacesNetworkRuleSetsName
       */
      export class MicrosoftEventHubNamespacesNetworkRuleSetsNamePattern {
        public static pattern(value: string): string {
          return value;
        }
      }

      /**
       * NetworkRuleSet properties
       *
       * @schema #/definitions/NetworkRuleSetProperties
       */
      export interface NetworkRuleSetProperties {
        /**
         * Default Action for Network Rule Set.
         *
         * @schema #/definitions/NetworkRuleSetProperties#defaultAction
         */
        readonly defaultAction?: NetworkRuleSetPropertiesDefaultAction;

        /**
         * List of IpRules
         *
         * @schema #/definitions/NetworkRuleSetProperties#ipRules
         */
        readonly ipRules?: NwRuleSetIpRules[];

        /**
         * List VirtualNetwork Rules
         *
         * @schema #/definitions/NetworkRuleSetProperties#virtualNetworkRules
         */
        readonly virtualNetworkRules?: NwRuleSetVirtualNetworkRules[];

      }

      export enum MicrosoftEventHubNamespacesNetworkRuleSetsType {
        "MicrosoftEventHubNamespacesNetworkRuleSetsType_MICROSOFT_EVENT_HUB_NAMESPACES_NETWORK_RULE_SETS" = 'Microsoft.EventHub/namespaces/networkRuleSets',
      }

      /**
       * Microsoft.EventHub/namespaces/authorizationRules
       *
       * @schema #/definitions/namespaces_authorizationRules_childResource
       */
      export interface NamespacesAuthorizationRulesChildResource {
        /**
         * @schema #/definitions/namespaces_authorizationRules_childResource#apiVersion
         */
        readonly apiVersion: NamespacesAuthorizationRulesChildResourceApiVersion;

        /**
         * The authorization rule name.
         *
         * @schema #/definitions/namespaces_authorizationRules_childResource#name
         */
        readonly name: string;

        /**
         * Properties supplied to create or update AuthorizationRule
         *
         * @schema #/definitions/namespaces_authorizationRules_childResource#properties
         */
        readonly properties: AuthorizationRuleProperties;

        /**
         * @schema #/definitions/namespaces_authorizationRules_childResource#type
         */
        readonly type: NamespacesAuthorizationRulesChildResourceType;

      }

      /**
       * Microsoft.EventHub/namespaces/networkRuleSets
       *
       * @schema #/definitions/namespaces_networkRuleSets_childResource
       */
      export interface NamespacesNetworkRuleSetsChildResource {
        /**
         * @schema #/definitions/namespaces_networkRuleSets_childResource#apiVersion
         */
        readonly apiVersion: NamespacesNetworkRuleSetsChildResourceApiVersion;

        /**
         * @schema #/definitions/namespaces_networkRuleSets_childResource#name
         */
        readonly name: NamespacesNetworkRuleSetsChildResourceName;

        /**
         * NetworkRuleSet properties
         *
         * @schema #/definitions/namespaces_networkRuleSets_childResource#properties
         */
        readonly properties: NetworkRuleSetProperties;

        /**
         * @schema #/definitions/namespaces_networkRuleSets_childResource#type
         */
        readonly type: NamespacesNetworkRuleSetsChildResourceType;

      }

      /**
       * Microsoft.EventHub/namespaces/disasterRecoveryConfigs
       *
       * @schema #/definitions/namespaces_disasterRecoveryConfigs_childResource
       */
      export interface NamespacesDisasterRecoveryConfigsChildResource {
        /**
         * @schema #/definitions/namespaces_disasterRecoveryConfigs_childResource#apiVersion
         */
        readonly apiVersion: NamespacesDisasterRecoveryConfigsChildResourceApiVersion;

        /**
         * The Disaster Recovery configuration name
         *
         * @schema #/definitions/namespaces_disasterRecoveryConfigs_childResource#name
         */
        readonly name: string;

        /**
         * Properties required to the Create Or Update Alias(Disaster Recovery configurations)
         *
         * @schema #/definitions/namespaces_disasterRecoveryConfigs_childResource#properties
         */
        readonly properties: ArmDisasterRecoveryProperties;

        /**
         * @schema #/definitions/namespaces_disasterRecoveryConfigs_childResource#type
         */
        readonly type: NamespacesDisasterRecoveryConfigsChildResourceType;

      }

      /**
       * Microsoft.EventHub/namespaces/eventhubs
       *
       * @schema #/definitions/namespaces_eventhubs_childResource
       */
      export interface NamespacesEventhubsChildResource {
        /**
         * @schema #/definitions/namespaces_eventhubs_childResource#apiVersion
         */
        readonly apiVersion: NamespacesEventhubsChildResourceApiVersion;

        /**
         * The Event Hub name
         *
         * @schema #/definitions/namespaces_eventhubs_childResource#name
         */
        readonly name: string;

        /**
         * Properties supplied to the Create Or Update Event Hub operation.
         *
         * @schema #/definitions/namespaces_eventhubs_childResource#properties
         */
        readonly properties: EventhubProperties;

        /**
         * @schema #/definitions/namespaces_eventhubs_childResource#type
         */
        readonly type: NamespacesEventhubsChildResourceType;

      }

      export enum SkuName {
        BASIC = 'Basic',
        STANDARD = 'Standard',
      }

      export enum SkuTier {
        BASIC = 'Basic',
        STANDARD = 'Standard',
      }

      export enum AuthorizationRulePropertiesRights {
        MANAGE = 'Manage',
        SEND = 'Send',
        LISTEN = 'Listen',
      }

      /**
       * Properties to configure capture description for eventhub
       *
       * @schema #/definitions/CaptureDescription
       */
      export interface CaptureDescription {
        /**
         * Capture storage details for capture description
         *
         * @schema #/definitions/CaptureDescription#destination
         */
        readonly destination?: Destination;

        /**
         * A value that indicates whether capture description is enabled. 
         *
         * @schema #/definitions/CaptureDescription#enabled
         */
        readonly enabled?: boolean;

        /**
         * Enumerates the possible values for the encoding format of capture description. Note: 'AvroDeflate' will be deprecated in New API Version.
         *
         * @schema #/definitions/CaptureDescription#encoding
         */
        readonly encoding?: CaptureDescriptionEncoding;

        /**
         * The time window allows you to set the frequency with which the capture to Azure Blobs will happen, value should between 60 to 900 seconds
         *
         * @schema #/definitions/CaptureDescription#intervalInSeconds
         */
        readonly intervalInSeconds?: number;

        /**
         * The size window defines the amount of data built up in your Event Hub before an capture operation, value should be between 10485760 to 524288000 bytes
         *
         * @schema #/definitions/CaptureDescription#sizeLimitInBytes
         */
        readonly sizeLimitInBytes?: number;

        /**
         * A value that indicates whether to Skip Empty Archives
         *
         * @schema #/definitions/CaptureDescription#skipEmptyArchives
         */
        readonly skipEmptyArchives?: boolean;

      }

      export enum EventhubPropertiesStatus {
        ACTIVE = 'Active',
        DISABLED = 'Disabled',
        RESTORING = 'Restoring',
        SEND_DISABLED = 'SendDisabled',
        RECEIVE_DISABLED = 'ReceiveDisabled',
        CREATING = 'Creating',
        DELETING = 'Deleting',
        RENAMING = 'Renaming',
        UNKNOWN = 'Unknown',
      }

      /**
       * Microsoft.EventHub/namespaces/eventhubs/authorizationRules
       *
       * @schema #/definitions/namespaces_eventhubs_authorizationRules_childResource
       */
      export interface NamespacesEventhubsAuthorizationRulesChildResource {
        /**
         * @schema #/definitions/namespaces_eventhubs_authorizationRules_childResource#apiVersion
         */
        readonly apiVersion: NamespacesEventhubsAuthorizationRulesChildResourceApiVersion;

        /**
         * The authorization rule name.
         *
         * @schema #/definitions/namespaces_eventhubs_authorizationRules_childResource#name
         */
        readonly name: string;

        /**
         * Properties supplied to create or update AuthorizationRule
         *
         * @schema #/definitions/namespaces_eventhubs_authorizationRules_childResource#properties
         */
        readonly properties: AuthorizationRuleProperties;

        /**
         * @schema #/definitions/namespaces_eventhubs_authorizationRules_childResource#type
         */
        readonly type: NamespacesEventhubsAuthorizationRulesChildResourceType;

      }

      /**
       * Microsoft.EventHub/namespaces/eventhubs/consumergroups
       *
       * @schema #/definitions/namespaces_eventhubs_consumergroups_childResource
       */
      export interface NamespacesEventhubsConsumergroupsChildResource {
        /**
         * @schema #/definitions/namespaces_eventhubs_consumergroups_childResource#apiVersion
         */
        readonly apiVersion: NamespacesEventhubsConsumergroupsChildResourceApiVersion;

        /**
         * The consumer group name
         *
         * @schema #/definitions/namespaces_eventhubs_consumergroups_childResource#name
         */
        readonly name: string;

        /**
         * Single item in List or Get Consumer group operation
         *
         * @schema #/definitions/namespaces_eventhubs_consumergroups_childResource#properties
         */
        readonly properties: ConsumerGroupProperties;

        /**
         * @schema #/definitions/namespaces_eventhubs_consumergroups_childResource#type
         */
        readonly type: NamespacesEventhubsConsumergroupsChildResourceType;

      }

      export enum NetworkRuleSetPropertiesDefaultAction {
        ALLOW = 'Allow',
        DENY = 'Deny',
      }

      /**
       * Description of NetWorkRuleSet - IpRules resource.
       *
       * @schema #/definitions/NWRuleSetIpRules
       */
      export interface NwRuleSetIpRules {
        /**
         * The IP Filter Action.
         *
         * @schema #/definitions/NWRuleSetIpRules#action
         */
        readonly action?: NwRuleSetIpRulesAction;

        /**
         * IP Mask
         *
         * @schema #/definitions/NWRuleSetIpRules#ipMask
         */
        readonly ipMask?: string;

      }

      /**
       * Description of VirtualNetworkRules - NetworkRules resource.
       *
       * @schema #/definitions/NWRuleSetVirtualNetworkRules
       */
      export interface NwRuleSetVirtualNetworkRules {
        /**
         * Value that indicates whether to ignore missing VNet Service Endpoint
         *
         * @schema #/definitions/NWRuleSetVirtualNetworkRules#ignoreMissingVnetServiceEndpoint
         */
        readonly ignoreMissingVnetServiceEndpoint?: boolean;

        /**
         * Properties supplied for Subnet
         *
         * @schema #/definitions/NWRuleSetVirtualNetworkRules#subnet
         */
        readonly subnet?: Subnet;

      }

      export enum NamespacesAuthorizationRulesChildResourceApiVersion {
        "NamespacesAuthorizationRulesChildResourceApiVersion_2017_04_01" = '2017-04-01',
      }

      export enum NamespacesAuthorizationRulesChildResourceType {
        AUTHORIZATION_RULES = 'authorizationRules',
      }

      export enum NamespacesNetworkRuleSetsChildResourceApiVersion {
        "NamespacesNetworkRuleSetsChildResourceApiVersion_2017_04_01" = '2017-04-01',
      }

      export enum NamespacesNetworkRuleSetsChildResourceName {
        DEFAULT = 'default',
      }

      export enum NamespacesNetworkRuleSetsChildResourceType {
        NETWORK_RULE_SETS = 'networkRuleSets',
      }

      export enum NamespacesDisasterRecoveryConfigsChildResourceApiVersion {
        "NamespacesDisasterRecoveryConfigsChildResourceApiVersion_2017_04_01" = '2017-04-01',
      }

      export enum NamespacesDisasterRecoveryConfigsChildResourceType {
        DISASTER_RECOVERY_CONFIGS = 'disasterRecoveryConfigs',
      }

      export enum NamespacesEventhubsChildResourceApiVersion {
        "NamespacesEventhubsChildResourceApiVersion_2017_04_01" = '2017-04-01',
      }

      export enum NamespacesEventhubsChildResourceType {
        EVENTHUBS = 'eventhubs',
      }

      /**
       * Capture storage details for capture description
       *
       * @schema #/definitions/Destination
       */
      export interface Destination {
        /**
         * Name for capture destination
         *
         * @schema #/definitions/Destination#name
         */
        readonly name?: string;

        /**
         * Properties describing the storage account, blob container and archive name format for capture destination
         *
         * @schema #/definitions/Destination#properties
         */
        readonly properties?: DestinationProperties;

      }

      export enum CaptureDescriptionEncoding {
        AVRO = 'Avro',
        AVRO_DEFLATE = 'AvroDeflate',
      }

      export enum NamespacesEventhubsAuthorizationRulesChildResourceApiVersion {
        "NamespacesEventhubsAuthorizationRulesChildResourceApiVersion_2017_04_01" = '2017-04-01',
      }

      export enum NamespacesEventhubsAuthorizationRulesChildResourceType {
        AUTHORIZATION_RULES = 'authorizationRules',
      }

      export enum NamespacesEventhubsConsumergroupsChildResourceApiVersion {
        "NamespacesEventhubsConsumergroupsChildResourceApiVersion_2017_04_01" = '2017-04-01',
      }

      export enum NamespacesEventhubsConsumergroupsChildResourceType {
        CONSUMERGROUPS = 'consumergroups',
      }

      export enum NwRuleSetIpRulesAction {
        ALLOW = 'Allow',
      }

      /**
       * Properties supplied for Subnet
       *
       * @schema #/definitions/Subnet
       */
      export interface Subnet {
        /**
         * Resource ID of Virtual Network Subnet
         *
         * @schema #/definitions/Subnet#id
         */
        readonly id: string;

      }

      /**
       * Properties describing the storage account, blob container and archive name format for capture destination
       *
       * @schema #/definitions/DestinationProperties
       */
      export interface DestinationProperties {
        /**
         * Blob naming convention for archive, e.g. {Namespace}/{EventHub}/{PartitionId}/{Year}/{Month}/{Day}/{Hour}/{Minute}/{Second}. Here all the parameters (Namespace,EventHub .. etc) are mandatory irrespective of order
         *
         * @schema #/definitions/DestinationProperties#archiveNameFormat
         */
        readonly archiveNameFormat?: string;

        /**
         * Blob container Name
         *
         * @schema #/definitions/DestinationProperties#blobContainer
         */
        readonly blobContainer?: string;

        /**
         * Resource id of the storage account to be used to create the blobs
         *
         * @schema #/definitions/DestinationProperties#storageAccountResourceId
         */
        readonly storageAccountResourceId?: string;

      }


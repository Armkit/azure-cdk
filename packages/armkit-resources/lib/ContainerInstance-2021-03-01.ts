// generated by armkit
import { ArmResource } from '@armkit/core';
import { Construct } from 'constructs';

/**
 * Microsoft.ContainerInstance/containerGroups
 *
 * @schema Microsoft.ContainerInstance.containerGroups
 */
export class ContainerGroups extends ArmResource {
  /**
   * Defines a "Microsoft.ContainerInstance.containerGroups" Arm Template object
   * @param scope the scope in which to define this object
   * @param name a scope-local name for the object
   * @param options configuration options
   */
  public constructor(scope: Construct, name: string, options: ContainerGroupsOptions) {
    super(scope, name, {
      ...options,
      armResourceType: 'containerGroups',
    });
  }
}

/**
 * Microsoft.ContainerInstance/containerGroups
 *
 * @schema Microsoft.ContainerInstance.containerGroups
 */
export interface ContainerGroupsOptions {
  /**
   * @schema Microsoft.ContainerInstance.containerGroups#apiVersion
   */
  readonly apiVersion?: MicrosoftContainerInstanceContainerGroupsApiVersion;

  /**
   * Identity for the container group.
   *
   * @schema Microsoft.ContainerInstance.containerGroups#identity
   */
  readonly identity?: ContainerGroupIdentity;

  /**
   * The resource location.
   *
   * @schema Microsoft.ContainerInstance.containerGroups#location
   */
  readonly location?: string;

  /**
   * The name of the container group.
   *
   * @schema Microsoft.ContainerInstance.containerGroups#name
   */
  readonly name: string;

  /**
   * The container group properties
   *
   * @schema Microsoft.ContainerInstance.containerGroups#properties
   */
  readonly properties: ContainerGroupProperties;

  /**
   * The resource tags.
   *
   * @schema Microsoft.ContainerInstance.containerGroups#tags
   */
  readonly tags?: MicrosoftContainerInstanceContainerGroupsTags;

  /**
   * @schema Microsoft.ContainerInstance.containerGroups#type
   */
  readonly type: MicrosoftContainerInstanceContainerGroupsType;

}

export enum MicrosoftContainerInstanceContainerGroupsApiVersion {
  "MicrosoftContainerInstanceContainerGroupsApiVersion_2021_03_01" = '2021-03-01',
}

/**
 * Identity for the container group.
 *
 * @schema #/definitions/ContainerGroupIdentity
 */
export interface ContainerGroupIdentity {
  /**
   * The type of identity used for the container group. The type 'SystemAssigned, UserAssigned' includes both an implicitly created identity and a set of user assigned identities. The type 'None' will remove any identities from the container group.
   *
   * @schema #/definitions/ContainerGroupIdentity#type
   */
  readonly type?: ContainerGroupIdentityType;

  /**
   * The list of user identities associated with the container group. The user identity dictionary key references will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'.
   *
   * @schema #/definitions/ContainerGroupIdentity#userAssignedIdentities
   */
  readonly userAssignedIdentities?: ContainerGroupIdentityUserAssignedIdentities;

}

/**
 * The container group properties
 *
 * @schema #/definitions/ContainerGroupProperties
 */
export interface ContainerGroupProperties {
  /**
   * The containers within the container group.
   *
   * @schema #/definitions/ContainerGroupProperties#containers
   */
  readonly containers: Container[];

  /**
   * Container group diagnostic information.
   *
   * @schema #/definitions/ContainerGroupProperties#diagnostics
   */
  readonly diagnostics?: ContainerGroupDiagnostics;

  /**
   * DNS configuration for the container group.
   *
   * @schema #/definitions/ContainerGroupProperties#dnsConfig
   */
  readonly dnsConfig?: DnsConfiguration;

  /**
   * The container group encryption properties.
   *
   * @schema #/definitions/ContainerGroupProperties#encryptionProperties
   */
  readonly encryptionProperties?: EncryptionProperties;

  /**
   * The image registry credentials by which the container group is created from.
   *
   * @schema #/definitions/ContainerGroupProperties#imageRegistryCredentials
   */
  readonly imageRegistryCredentials?: ImageRegistryCredential[];

  /**
   * The init containers for a container group.
   *
   * @schema #/definitions/ContainerGroupProperties#initContainers
   */
  readonly initContainers?: InitContainerDefinition[];

  /**
   * IP address for the container group.
   *
   * @schema #/definitions/ContainerGroupProperties#ipAddress
   */
  readonly ipAddress?: IpAddress;

  /**
   * Container group network profile information.
   *
   * @schema #/definitions/ContainerGroupProperties#networkProfile
   */
  readonly networkProfile?: ContainerGroupNetworkProfile;

  /**
   * The operating system type required by the containers in the container group.
   *
   * @schema #/definitions/ContainerGroupProperties#osType
   */
  readonly osType: ContainerGroupPropertiesOsType;

  /**
   * Restart policy for all containers within the container group. 
- `Always` Always restart
- `OnFailure` Restart on failure
- `Never` Never restart
.
   *
   * @schema #/definitions/ContainerGroupProperties#restartPolicy
   */
  readonly restartPolicy?: ContainerGroupPropertiesRestartPolicy;

  /**
   * The SKU for a container group.
   *
   * @schema #/definitions/ContainerGroupProperties#sku
   */
  readonly sku?: ContainerGroupPropertiesSku;

  /**
   * The list of volumes that can be mounted by containers in this container group.
   *
   * @schema #/definitions/ContainerGroupProperties#volumes
   */
  readonly volumes?: Volume[];

}

/**
 * @schema MicrosoftContainerInstanceContainerGroupsTags
 */
export interface MicrosoftContainerInstanceContainerGroupsTags {
}

export enum MicrosoftContainerInstanceContainerGroupsType {
  "MicrosoftContainerInstanceContainerGroupsType_MICROSOFT_CONTAINER_INSTANCE_CONTAINER_GROUPS" = 'Microsoft.ContainerInstance/containerGroups',
}

export enum ContainerGroupIdentityType {
  SYSTEM_ASSIGNED = 'SystemAssigned',
  USER_ASSIGNED = 'UserAssigned',
  "ContainerGroupIdentityType_SYSTEM_ASSIGNED_USER_ASSIGNED" = 'SystemAssigned, UserAssigned',
  NONE = 'None',
}

/**
 * @schema #/definitions/containerGroupIdentityUserAssignedIdentities
 */
export interface ContainerGroupIdentityUserAssignedIdentities {
}

/**
 * A container instance.
 *
 * @schema #/definitions/Container
 */
export interface Container {
  /**
   * The user-provided name of the container instance.
   *
   * @schema #/definitions/Container#name
   */
  readonly name: string;

  /**
   * The container instance properties.
   *
   * @schema #/definitions/Container#properties
   */
  readonly properties: ContainerProperties;

}

/**
 * Container group diagnostic information.
 *
 * @schema #/definitions/ContainerGroupDiagnostics
 */
export interface ContainerGroupDiagnostics {
  /**
   * Container group log analytics information.
   *
   * @schema #/definitions/ContainerGroupDiagnostics#logAnalytics
   */
  readonly logAnalytics?: LogAnalytics;

}

/**
 * DNS configuration for the container group.
 *
 * @schema #/definitions/DnsConfiguration
 */
export interface DnsConfiguration {
  /**
   * The DNS servers for the container group.
   *
   * @schema #/definitions/DnsConfiguration#nameServers
   */
  readonly nameServers: string[];

  /**
   * The DNS options for the container group.
   *
   * @schema #/definitions/DnsConfiguration#options
   */
  readonly options?: string;

  /**
   * The DNS search domains for hostname lookup in the container group.
   *
   * @schema #/definitions/DnsConfiguration#searchDomains
   */
  readonly searchDomains?: string;

}

/**
 * The container group encryption properties.
 *
 * @schema #/definitions/EncryptionProperties
 */
export interface EncryptionProperties {
  /**
   * The encryption key name.
   *
   * @schema #/definitions/EncryptionProperties#keyName
   */
  readonly keyName: string;

  /**
   * The encryption key version.
   *
   * @schema #/definitions/EncryptionProperties#keyVersion
   */
  readonly keyVersion: string;

  /**
   * The keyvault base url.
   *
   * @schema #/definitions/EncryptionProperties#vaultBaseUrl
   */
  readonly vaultBaseUrl: string;

}

/**
 * Image registry credential.
 *
 * @schema #/definitions/ImageRegistryCredential
 */
export interface ImageRegistryCredential {
  /**
   * The password for the private registry.
   *
   * @schema #/definitions/ImageRegistryCredential#password
   */
  readonly password?: string;

  /**
   * The Docker image registry server without a protocol such as "http" and "https".
   *
   * @schema #/definitions/ImageRegistryCredential#server
   */
  readonly server: string;

  /**
   * The username for the private registry.
   *
   * @schema #/definitions/ImageRegistryCredential#username
   */
  readonly username: string;

}

/**
 * The init container definition.
 *
 * @schema #/definitions/InitContainerDefinition
 */
export interface InitContainerDefinition {
  /**
   * The name for the init container.
   *
   * @schema #/definitions/InitContainerDefinition#name
   */
  readonly name: string;

  /**
   * The init container definition properties.
   *
   * @schema #/definitions/InitContainerDefinition#properties
   */
  readonly properties: InitContainerPropertiesDefinition;

}

/**
 * IP address for the container group.
 *
 * @schema #/definitions/IpAddress
 */
export interface IpAddress {
  /**
   * The Dns name label for the IP.
   *
   * @schema #/definitions/IpAddress#dnsNameLabel
   */
  readonly dnsNameLabel?: string;

  /**
   * The IP exposed to the public internet.
   *
   * @schema #/definitions/IpAddress#ip
   */
  readonly ip?: string;

  /**
   * The list of ports exposed on the container group.
   *
   * @schema #/definitions/IpAddress#ports
   */
  readonly ports: Port[];

  /**
   * Specifies if the IP is exposed to the public internet or private VNET.
   *
   * @schema #/definitions/IpAddress#type
   */
  readonly type: IpAddressType;

}

/**
 * Container group network profile information.
 *
 * @schema #/definitions/ContainerGroupNetworkProfile
 */
export interface ContainerGroupNetworkProfile {
  /**
   * The identifier for a network profile.
   *
   * @schema #/definitions/ContainerGroupNetworkProfile#id
   */
  readonly id: string;

}

export enum ContainerGroupPropertiesOsType {
  WINDOWS = 'Windows',
  LINUX = 'Linux',
}

export enum ContainerGroupPropertiesRestartPolicy {
  ALWAYS = 'Always',
  ON_FAILURE = 'OnFailure',
  NEVER = 'Never',
}

export enum ContainerGroupPropertiesSku {
  STANDARD = 'Standard',
  DEDICATED = 'Dedicated',
}

/**
 * The properties of the volume.
 *
 * @schema #/definitions/Volume
 */
export interface Volume {
  /**
   * The properties of the Azure File volume. Azure File shares are mounted as volumes.
   *
   * @schema #/definitions/Volume#azureFile
   */
  readonly azureFile?: AzureFileVolume;

  /**
   * The empty directory volume.
   *
   * @schema #/definitions/Volume#emptyDir
   */
  readonly emptyDir?: VolumeEmptyDir;

  /**
   * Represents a volume that is populated with the contents of a git repository
   *
   * @schema #/definitions/Volume#gitRepo
   */
  readonly gitRepo?: GitRepoVolume;

  /**
   * The name of the volume.
   *
   * @schema #/definitions/Volume#name
   */
  readonly name: string;

  /**
   * The secret volume.
   *
   * @schema #/definitions/Volume#secret
   */
  readonly secret?: VolumeSecret;

}

/**
 * The container instance properties.
 *
 * @schema #/definitions/ContainerProperties
 */
export interface ContainerProperties {
  /**
   * The commands to execute within the container instance in exec form.
   *
   * @schema #/definitions/ContainerProperties#command
   */
  readonly command?: string[];

  /**
   * The environment variables to set in the container instance.
   *
   * @schema #/definitions/ContainerProperties#environmentVariables
   */
  readonly environmentVariables?: EnvironmentVariable[];

  /**
   * The name of the image used to create the container instance.
   *
   * @schema #/definitions/ContainerProperties#image
   */
  readonly image: string;

  /**
   * The container probe, for liveness or readiness
   *
   * @schema #/definitions/ContainerProperties#livenessProbe
   */
  readonly livenessProbe?: ContainerProbe;

  /**
   * The exposed ports on the container instance.
   *
   * @schema #/definitions/ContainerProperties#ports
   */
  readonly ports?: ContainerPort[];

  /**
   * The container probe, for liveness or readiness
   *
   * @schema #/definitions/ContainerProperties#readinessProbe
   */
  readonly readinessProbe?: ContainerProbe;

  /**
   * The resource requirements.
   *
   * @schema #/definitions/ContainerProperties#resources
   */
  readonly resources: ResourceRequirements;

  /**
   * The volume mounts available to the container instance.
   *
   * @schema #/definitions/ContainerProperties#volumeMounts
   */
  readonly volumeMounts?: VolumeMount[];

}

/**
 * Container group log analytics information.
 *
 * @schema #/definitions/LogAnalytics
 */
export interface LogAnalytics {
  /**
   * The log type to be used.
   *
   * @schema #/definitions/LogAnalytics#logType
   */
  readonly logType?: LogAnalyticsLogType;

  /**
   * Metadata for log analytics.
   *
   * @schema #/definitions/LogAnalytics#metadata
   */
  readonly metadata?: LogAnalyticsMetadata;

  /**
   * The workspace id for log analytics
   *
   * @schema #/definitions/LogAnalytics#workspaceId
   */
  readonly workspaceId: string;

  /**
   * The workspace key for log analytics
   *
   * @schema #/definitions/LogAnalytics#workspaceKey
   */
  readonly workspaceKey: string;

  /**
   * The workspace resource id for log analytics
   *
   * @schema #/definitions/LogAnalytics#workspaceResourceId
   */
  readonly workspaceResourceId?: LogAnalyticsWorkspaceResourceId;

}

/**
 * The init container definition properties.
 *
 * @schema #/definitions/InitContainerPropertiesDefinition
 */
export interface InitContainerPropertiesDefinition {
  /**
   * The command to execute within the init container in exec form.
   *
   * @schema #/definitions/InitContainerPropertiesDefinition#command
   */
  readonly command?: string[];

  /**
   * The environment variables to set in the init container.
   *
   * @schema #/definitions/InitContainerPropertiesDefinition#environmentVariables
   */
  readonly environmentVariables?: EnvironmentVariable[];

  /**
   * The image of the init container.
   *
   * @schema #/definitions/InitContainerPropertiesDefinition#image
   */
  readonly image?: string;

  /**
   * The volume mounts available to the init container.
   *
   * @schema #/definitions/InitContainerPropertiesDefinition#volumeMounts
   */
  readonly volumeMounts?: VolumeMount[];

}

/**
 * The port exposed on the container group.
 *
 * @schema #/definitions/Port
 */
export interface Port {
  /**
   * The port number.
   *
   * @schema #/definitions/Port#port
   */
  readonly port: number;

  /**
   * The protocol associated with the port.
   *
   * @schema #/definitions/Port#protocol
   */
  readonly protocol?: PortProtocol;

}

export enum IpAddressType {
  PUBLIC = 'Public',
  PRIVATE = 'Private',
}

/**
 * The properties of the Azure File volume. Azure File shares are mounted as volumes.
 *
 * @schema #/definitions/AzureFileVolume
 */
export interface AzureFileVolume {
  /**
   * The flag indicating whether the Azure File shared mounted as a volume is read-only.
   *
   * @schema #/definitions/AzureFileVolume#readOnly
   */
  readonly readOnly?: boolean;

  /**
   * The name of the Azure File share to be mounted as a volume.
   *
   * @schema #/definitions/AzureFileVolume#shareName
   */
  readonly shareName: string;

  /**
   * The storage account access key used to access the Azure File share.
   *
   * @schema #/definitions/AzureFileVolume#storageAccountKey
   */
  readonly storageAccountKey?: string;

  /**
   * The name of the storage account that contains the Azure File share.
   *
   * @schema #/definitions/AzureFileVolume#storageAccountName
   */
  readonly storageAccountName: string;

}

/**
 * The empty directory volume.
 *
 * @schema #/definitions/volumeEmptyDir
 */
export interface VolumeEmptyDir {
}

/**
 * Represents a volume that is populated with the contents of a git repository
 *
 * @schema #/definitions/GitRepoVolume
 */
export interface GitRepoVolume {
  /**
   * Target directory name. Must not contain or start with '..'.  If '.' is supplied, the volume directory will be the git repository.  Otherwise, if specified, the volume will contain the git repository in the subdirectory with the given name.
   *
   * @schema #/definitions/GitRepoVolume#directory
   */
  readonly directory?: string;

  /**
   * Repository URL
   *
   * @schema #/definitions/GitRepoVolume#repository
   */
  readonly repository: string;

  /**
   * Commit hash for the specified revision.
   *
   * @schema #/definitions/GitRepoVolume#revision
   */
  readonly revision?: string;

}

/**
 * @schema #/definitions/volumeSecret
 */
export interface VolumeSecret {
}

/**
 * The environment variable to set within the container instance.
 *
 * @schema #/definitions/EnvironmentVariable
 */
export interface EnvironmentVariable {
  /**
   * The name of the environment variable.
   *
   * @schema #/definitions/EnvironmentVariable#name
   */
  readonly name: string;

  /**
   * The value of the secure environment variable.
   *
   * @schema #/definitions/EnvironmentVariable#secureValue
   */
  readonly secureValue?: string;

  /**
   * The value of the environment variable.
   *
   * @schema #/definitions/EnvironmentVariable#value
   */
  readonly value?: string;

}

/**
 * The container probe, for liveness or readiness
 *
 * @schema #/definitions/ContainerProbe
 */
export interface ContainerProbe {
  /**
   * The container execution command, for liveness or readiness probe
   *
   * @schema #/definitions/ContainerProbe#exec
   */
  readonly exec?: ContainerExec;

  /**
   * The failure threshold.
   *
   * @schema #/definitions/ContainerProbe#failureThreshold
   */
  readonly failureThreshold?: number;

  /**
   * The container Http Get settings, for liveness or readiness probe
   *
   * @schema #/definitions/ContainerProbe#httpGet
   */
  readonly httpGet?: ContainerHttpGet;

  /**
   * The initial delay seconds.
   *
   * @schema #/definitions/ContainerProbe#initialDelaySeconds
   */
  readonly initialDelaySeconds?: number;

  /**
   * The period seconds.
   *
   * @schema #/definitions/ContainerProbe#periodSeconds
   */
  readonly periodSeconds?: number;

  /**
   * The success threshold.
   *
   * @schema #/definitions/ContainerProbe#successThreshold
   */
  readonly successThreshold?: number;

  /**
   * The timeout seconds.
   *
   * @schema #/definitions/ContainerProbe#timeoutSeconds
   */
  readonly timeoutSeconds?: number;

}

/**
 * The port exposed on the container instance.
 *
 * @schema #/definitions/ContainerPort
 */
export interface ContainerPort {
  /**
   * The port number exposed within the container group.
   *
   * @schema #/definitions/ContainerPort#port
   */
  readonly port: number;

  /**
   * The protocol associated with the port.
   *
   * @schema #/definitions/ContainerPort#protocol
   */
  readonly protocol?: ContainerPortProtocol;

}

/**
 * The resource requirements.
 *
 * @schema #/definitions/ResourceRequirements
 */
export interface ResourceRequirements {
  /**
   * The resource limits.
   *
   * @schema #/definitions/ResourceRequirements#limits
   */
  readonly limits?: ResourceLimits;

  /**
   * The resource requests.
   *
   * @schema #/definitions/ResourceRequirements#requests
   */
  readonly requests: ResourceRequests;

}

/**
 * The properties of the volume mount.
 *
 * @schema #/definitions/VolumeMount
 */
export interface VolumeMount {
  /**
   * The path within the container where the volume should be mounted. Must not contain colon (:).
   *
   * @schema #/definitions/VolumeMount#mountPath
   */
  readonly mountPath: string;

  /**
   * The name of the volume mount.
   *
   * @schema #/definitions/VolumeMount#name
   */
  readonly name: string;

  /**
   * The flag indicating whether the volume mount is read-only.
   *
   * @schema #/definitions/VolumeMount#readOnly
   */
  readonly readOnly?: boolean;

}

export enum LogAnalyticsLogType {
  CONTAINER_INSIGHTS = 'ContainerInsights',
  CONTAINER_INSTANCE_LOGS = 'ContainerInstanceLogs',
}

/**
 * @schema #/definitions/logAnalyticsMetadata
 */
export interface LogAnalyticsMetadata {
}

/**
 * @schema #/definitions/logAnalyticsWorkspaceResourceId
 */
export interface LogAnalyticsWorkspaceResourceId {
}

export enum PortProtocol {
  TCP = 'TCP',
  UDP = 'UDP',
}

/**
 * The container execution command, for liveness or readiness probe
 *
 * @schema #/definitions/ContainerExec
 */
export interface ContainerExec {
  /**
   * The commands to execute within the container.
   *
   * @schema #/definitions/ContainerExec#command
   */
  readonly command?: string[];

}

/**
 * The container Http Get settings, for liveness or readiness probe
 *
 * @schema #/definitions/ContainerHttpGet
 */
export interface ContainerHttpGet {
  /**
   * The HTTP headers.
   *
   * @schema #/definitions/ContainerHttpGet#httpHeaders
   */
  readonly httpHeaders?: HttpHeaders;

  /**
   * The path to probe.
   *
   * @schema #/definitions/ContainerHttpGet#path
   */
  readonly path?: string;

  /**
   * The port number to probe.
   *
   * @schema #/definitions/ContainerHttpGet#port
   */
  readonly port: number;

  /**
   * The scheme.
   *
   * @schema #/definitions/ContainerHttpGet#scheme
   */
  readonly scheme?: ContainerHttpGetScheme;

}

export enum ContainerPortProtocol {
  TCP = 'TCP',
  UDP = 'UDP',
}

/**
 * The resource limits.
 *
 * @schema #/definitions/ResourceLimits
 */
export interface ResourceLimits {
  /**
   * The CPU limit of this container instance.
   *
   * @schema #/definitions/ResourceLimits#cpu
   */
  readonly cpu?: number;

  /**
   * The GPU resource.
   *
   * @schema #/definitions/ResourceLimits#gpu
   */
  readonly gpu?: GpuResource;

  /**
   * The memory limit in GB of this container instance.
   *
   * @schema #/definitions/ResourceLimits#memoryInGB
   */
  readonly memoryInGB?: number;

}

/**
 * The resource requests.
 *
 * @schema #/definitions/ResourceRequests
 */
export interface ResourceRequests {
  /**
   * The CPU request of this container instance.
   *
   * @schema #/definitions/ResourceRequests#cpu
   */
  readonly cpu: number;

  /**
   * The GPU resource.
   *
   * @schema #/definitions/ResourceRequests#gpu
   */
  readonly gpu?: GpuResource;

  /**
   * The memory request in GB of this container instance.
   *
   * @schema #/definitions/ResourceRequests#memoryInGB
   */
  readonly memoryInGB: number;

}

/**
 * The HTTP headers.
 *
 * @schema #/definitions/HttpHeaders
 */
export interface HttpHeaders {
  /**
   * The header name.
   *
   * @schema #/definitions/HttpHeaders#name
   */
  readonly name?: string;

  /**
   * The header value.
   *
   * @schema #/definitions/HttpHeaders#value
   */
  readonly value?: string;

}

export enum ContainerHttpGetScheme {
  HTTP = 'http',
  HTTPS = 'https',
}

/**
 * The GPU resource.
 *
 * @schema #/definitions/GpuResource
 */
export interface GpuResource {
  /**
   * The count of the GPU resource.
   *
   * @schema #/definitions/GpuResource#count
   */
  readonly count: number;

  /**
   * The SKU of the GPU resource.
   *
   * @schema #/definitions/GpuResource#sku
   */
  readonly sku: GpuResourceSku;

}

export enum GpuResourceSku {
  "GpuResourceSku_K80" = 'K80',
  "GpuResourceSku_P100" = 'P100',
  "GpuResourceSku_V100" = 'V100',
}


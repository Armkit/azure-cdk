// generated by armkit
import { ArmResource } from '@yetics/armkit-core';
import { Construct } from 'constructs';

/**
 * Microsoft.Insights/activityLogAlerts
 *
 * @schema Microsoft.Insights.activityLogAlerts
 */
export class ActivityLogAlerts extends ArmResource {
  /**
   * Defines a "Microsoft.Insights.activityLogAlerts" Arm Template object
   * @param scope the scope in which to define this object
   * @param name a scope-local name for the object
   * @param options configuration options
   */
  public constructor(scope: Construct, name: string, options: ActivityLogAlertsOptions) {
    super(scope, name, {
      ...options,
      armResourceType: 'activityLogAlerts',
    });
  }
}

/**
 * Microsoft.Insights/activityLogAlerts
 *
 * @schema Microsoft.Insights.activityLogAlerts
 */
export interface ActivityLogAlertsOptions {
  /**
   * @schema Microsoft.Insights.activityLogAlerts#apiVersion
   */
  readonly apiVersion?: MicrosoftInsightsActivityLogAlertsApiVersion;

  /**
   * The location of the resource. Since Azure Activity Log Alerts is a global service, the location of the rules should always be 'global'.
   *
   * @schema Microsoft.Insights.activityLogAlerts#location
   */
  readonly location?: string;

  /**
   * The name of the Activity Log Alert rule.
   *
   * @schema Microsoft.Insights.activityLogAlerts#name
   */
  readonly name: string;

  /**
   * An Azure Activity Log Alert rule.
   *
   * @schema Microsoft.Insights.activityLogAlerts#properties
   */
  readonly properties: AlertRuleProperties;

  /**
   * The tags of the resource.
   *
   * @schema Microsoft.Insights.activityLogAlerts#tags
   */
  readonly tags?: MicrosoftInsightsActivityLogAlertsTags;

  /**
   * @schema Microsoft.Insights.activityLogAlerts#type
   */
  readonly type: MicrosoftInsightsActivityLogAlertsType;

}

export enum MicrosoftInsightsActivityLogAlertsApiVersion {
  "MicrosoftInsightsActivityLogAlertsApiVersion_2020_10_01" = '2020-10-01',
}

/**
 * An Azure Activity Log Alert rule.
 *
 * @schema #/definitions/AlertRuleProperties
 */
export interface AlertRuleProperties {
  /**
   * A list of Activity Log Alert rule actions.
   *
   * @schema #/definitions/AlertRuleProperties#actions
   */
  readonly actions: ActionList;

  /**
   * An Activity Log Alert rule condition that is met when all its member conditions are met.
   *
   * @schema #/definitions/AlertRuleProperties#condition
   */
  readonly condition: AlertRuleAllOfCondition;

  /**
   * A description of this Activity Log Alert rule.
   *
   * @schema #/definitions/AlertRuleProperties#description
   */
  readonly description?: string;

  /**
   * Indicates whether this Activity Log Alert rule is enabled. If an Activity Log Alert rule is not enabled, then none of its actions will be activated.
   *
   * @schema #/definitions/AlertRuleProperties#enabled
   */
  readonly enabled?: boolean;

  /**
   * A list of resource IDs that will be used as prefixes. The alert will only apply to Activity Log events with resource IDs that fall under one of these prefixes. This list must include at least one item.
   *
   * @schema #/definitions/AlertRuleProperties#scopes
   */
  readonly scopes: string[];

}

/**
 * @schema MicrosoftInsightsActivityLogAlertsTags
 */
export interface MicrosoftInsightsActivityLogAlertsTags {
}

export enum MicrosoftInsightsActivityLogAlertsType {
  "MicrosoftInsightsActivityLogAlertsType_MICROSOFT_INSIGHTS_ACTIVITY_LOG_ALERTS" = 'Microsoft.Insights/activityLogAlerts',
}

/**
 * A list of Activity Log Alert rule actions.
 *
 * @schema #/definitions/ActionList
 */
export interface ActionList {
  /**
   * The list of the Action Groups.
   *
   * @schema #/definitions/ActionList#actionGroups
   */
  readonly actionGroups?: ActionGroup[];

}

/**
 * An Activity Log Alert rule condition that is met when all its member conditions are met.
 *
 * @schema #/definitions/AlertRuleAllOfCondition
 */
export interface AlertRuleAllOfCondition {
  /**
   * The list of Activity Log Alert rule conditions.
   *
   * @schema #/definitions/AlertRuleAllOfCondition#allOf
   */
  readonly allOf: AlertRuleAnyOfOrLeafCondition[];

}

/**
 * A pointer to an Azure Action Group.
 *
 * @schema #/definitions/ActionGroup
 */
export interface ActionGroup {
  /**
   * The resource ID of the Action Group. This cannot be null or empty.
   *
   * @schema #/definitions/ActionGroup#actionGroupId
   */
  readonly actionGroupId: string;

  /**
   * the dictionary of custom properties to include with the post operation. These data are appended to the webhook payload.
   *
   * @schema #/definitions/ActionGroup#webhookProperties
   */
  readonly webhookProperties?: ActionGroupWebhookProperties;

}

/**
 * An Activity Log Alert rule condition that is met when all its member conditions are met.
Each condition can be of one of the following types:
__Important__: Each type has its unique subset of properties. Properties from different types CANNOT exist in one condition.
   * __Leaf Condition -__ must contain 'field' and either 'equals' or 'containsAny'.
  _Please note, 'anyOf' should __not__ be set in a Leaf Condition._
  * __AnyOf Condition -__ must contain __only__ 'anyOf' (which is an array of Leaf Conditions).
  _Please note, 'field', 'equals' and 'containsAny' should __not__ be set in an AnyOf Condition._

 *
 * @schema #/definitions/AlertRuleAnyOfOrLeafCondition
 */
export interface AlertRuleAnyOfOrLeafCondition {
  /**
   * An Activity Log Alert rule condition that is met when at least one of its member leaf conditions are met.
   *
   * @schema #/definitions/AlertRuleAnyOfOrLeafCondition#anyOf
   */
  readonly anyOf?: AlertRuleLeafCondition[];

  /**
   * The value of the event's field will be compared to the values in this array (case-insensitive) to determine if the condition is met.
   *
   * @schema #/definitions/AlertRuleAnyOfOrLeafCondition#containsAny
   */
  readonly containsAny?: string[];

  /**
   * The value of the event's field will be compared to this value (case-insensitive) to determine if the condition is met.
   *
   * @schema #/definitions/AlertRuleAnyOfOrLeafCondition#equals
   */
  readonly equals?: string;

  /**
   * The name of the Activity Log event's field that this condition will examine.
The possible values for this field are (case-insensitive): 'resourceId', 'category', 'caller', 'level', 'operationName', 'resourceGroup', 'resourceProvider', 'status', 'subStatus', 'resourceType', or anything beginning with 'properties'.
   *
   * @schema #/definitions/AlertRuleAnyOfOrLeafCondition#field
   */
  readonly field?: string;

}

/**
 * @schema #/definitions/actionGroupWebhookProperties
 */
export interface ActionGroupWebhookProperties {
}

/**
 * An Activity Log Alert rule condition that is met by comparing the field and value of an Activity Log event.
This condition must contain 'field' and either 'equals' or 'containsAny'.
 *
 * @schema #/definitions/AlertRuleLeafCondition
 */
export interface AlertRuleLeafCondition {
  /**
   * The value of the event's field will be compared to the values in this array (case-insensitive) to determine if the condition is met.
   *
   * @schema #/definitions/AlertRuleLeafCondition#containsAny
   */
  readonly containsAny?: string[];

  /**
   * The value of the event's field will be compared to this value (case-insensitive) to determine if the condition is met.
   *
   * @schema #/definitions/AlertRuleLeafCondition#equals
   */
  readonly equals?: string;

  /**
   * The name of the Activity Log event's field that this condition will examine.
The possible values for this field are (case-insensitive): 'resourceId', 'category', 'caller', 'level', 'operationName', 'resourceGroup', 'resourceProvider', 'status', 'subStatus', 'resourceType', or anything beginning with 'properties'.
   *
   * @schema #/definitions/AlertRuleLeafCondition#field
   */
  readonly field?: string;

}


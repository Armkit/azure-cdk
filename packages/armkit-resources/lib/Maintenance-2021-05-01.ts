// generated by armkit
import { ArmResource } from '@armkit/core';
import { Construct } from 'constructs';

/**
 * Microsoft.Maintenance/maintenanceConfigurations
 *
 * @schema Microsoft.Maintenance.maintenanceConfigurations
 */
export class MaintenanceConfigurations extends ArmResource {
  /**
   * Defines a "Microsoft.Maintenance.maintenanceConfigurations" Arm Template object
   * @param scope the scope in which to define this object
   * @param name a scope-local name for the object
   * @param options configuration options
   */
  public constructor(scope: Construct, name: string, options: MaintenanceConfigurationsOptions) {
    super(scope, name, {
      ...options,
      armResourceType: 'maintenanceConfigurations',
    });
  }
}

/**
 * Microsoft.Maintenance/maintenanceConfigurations
 *
 * @schema Microsoft.Maintenance.maintenanceConfigurations
 */
export interface MaintenanceConfigurationsOptions {
  /**
   * @schema Microsoft.Maintenance.maintenanceConfigurations#apiVersion
   */
  readonly apiVersion?: MicrosoftMaintenanceMaintenanceConfigurationsApiVersion;

  /**
   * Gets or sets location of the resource
   *
   * @schema Microsoft.Maintenance.maintenanceConfigurations#location
   */
  readonly location?: string;

  /**
   * Maintenance Configuration Name
   *
   * @schema Microsoft.Maintenance.maintenanceConfigurations#name
   */
  readonly name: string;

  /**
   * Properties for maintenance configuration
   *
   * @schema Microsoft.Maintenance.maintenanceConfigurations#properties
   */
  readonly properties: MaintenanceConfigurationProperties;

  /**
   * Gets or sets tags of the resource
   *
   * @schema Microsoft.Maintenance.maintenanceConfigurations#tags
   */
  readonly tags?: MicrosoftMaintenanceMaintenanceConfigurationsTags;

  /**
   * @schema Microsoft.Maintenance.maintenanceConfigurations#type
   */
  readonly type: MicrosoftMaintenanceMaintenanceConfigurationsType;

}

export enum MicrosoftMaintenanceMaintenanceConfigurationsApiVersion {
  "MicrosoftMaintenanceMaintenanceConfigurationsApiVersion_2021_05_01" = '2021-05-01',
}

/**
 * Properties for maintenance configuration
 *
 * @schema #/definitions/MaintenanceConfigurationProperties
 */
export interface MaintenanceConfigurationProperties {
  /**
   * Gets or sets extensionProperties of the maintenanceConfiguration
   *
   * @schema #/definitions/MaintenanceConfigurationProperties#extensionProperties
   */
  readonly extensionProperties?: MaintenanceConfigurationPropertiesExtensionProperties;

  /**
   * Gets or sets maintenanceScope of the configuration.
   *
   * @schema #/definitions/MaintenanceConfigurationProperties#maintenanceScope
   */
  readonly maintenanceScope?: MaintenanceConfigurationPropertiesMaintenanceScope;

  /**
   * Definition of a MaintenanceWindow
   *
   * @schema #/definitions/MaintenanceConfigurationProperties#maintenanceWindow
   */
  readonly maintenanceWindow?: MaintenanceWindow;

  /**
   * Gets or sets namespace of the resource
   *
   * @schema #/definitions/MaintenanceConfigurationProperties#namespace
   */
  readonly namespace?: string;

  /**
   * Gets or sets the visibility of the configuration. The default value is 'Custom'.
   *
   * @schema #/definitions/MaintenanceConfigurationProperties#visibility
   */
  readonly visibility?: MaintenanceConfigurationPropertiesVisibility;

}

/**
 * @schema MicrosoftMaintenanceMaintenanceConfigurationsTags
 */
export interface MicrosoftMaintenanceMaintenanceConfigurationsTags {
}

export enum MicrosoftMaintenanceMaintenanceConfigurationsType {
  "MicrosoftMaintenanceMaintenanceConfigurationsType_MICROSOFT_MAINTENANCE_MAINTENANCE_CONFIGURATIONS" = 'Microsoft.Maintenance/maintenanceConfigurations',
}

/**
 * @schema #/definitions/maintenanceConfigurationPropertiesExtensionProperties
 */
export interface MaintenanceConfigurationPropertiesExtensionProperties {
}

export enum MaintenanceConfigurationPropertiesMaintenanceScope {
  HOST = 'Host',
  OS_IMAGE = 'OSImage',
  EXTENSION = 'Extension',
  IN_GUEST_PATCH = 'InGuestPatch',
  SQLDB = 'SQLDB',
  SQL_MANAGED_INSTANCE = 'SQLManagedInstance',
}

/**
 * Definition of a MaintenanceWindow
 *
 * @schema #/definitions/MaintenanceWindow
 */
export interface MaintenanceWindow {
  /**
   * Duration of the maintenance window in HH:mm format. If not provided, default value will be used based on maintenance scope provided. Example: 05:00.
   *
   * @schema #/definitions/MaintenanceWindow#duration
   */
  readonly duration?: string;

  /**
   * Effective expiration date of the maintenance window in YYYY-MM-DD hh:mm format. The window will be created in the time zone provided and adjusted to daylight savings according to that time zone. Expiration date must be set to a future date. If not provided, it will be set to the maximum datetime 9999-12-31 23:59:59.
   *
   * @schema #/definitions/MaintenanceWindow#expirationDateTime
   */
  readonly expirationDateTime?: string;

  /**
   * Rate at which a Maintenance window is expected to recur. The rate can be expressed as daily, weekly, or monthly schedules. Daily schedule are formatted as recurEvery: [Frequency as integer]['Day(s)']. If no frequency is provided, the default frequency is 1. Daily schedule examples are recurEvery: Day, recurEvery: 3Days.  Weekly schedule are formatted as recurEvery: [Frequency as integer]['Week(s)'] [Optional comma separated list of weekdays Monday-Sunday]. Weekly schedule examples are recurEvery: 3Weeks, recurEvery: Week Saturday,Sunday. Monthly schedules are formatted as [Frequency as integer]['Month(s)'] [Comma separated list of month days] or [Frequency as integer]['Month(s)'] [Week of Month (First, Second, Third, Fourth, Last)] [Weekday Monday-Sunday]. Monthly schedule examples are recurEvery: Month, recurEvery: 2Months, recurEvery: Month day23,day24, recurEvery: Month Last Sunday, recurEvery: Month Fourth Monday.
   *
   * @schema #/definitions/MaintenanceWindow#recurEvery
   */
  readonly recurEvery?: string;

  /**
   * Effective start date of the maintenance window in YYYY-MM-DD hh:mm format. The start date can be set to either the current date or future date. The window will be created in the time zone provided and adjusted to daylight savings according to that time zone.
   *
   * @schema #/definitions/MaintenanceWindow#startDateTime
   */
  readonly startDateTime?: string;

  /**
   * Name of the timezone. List of timezones can be obtained by executing [System.TimeZoneInfo]::GetSystemTimeZones() in PowerShell. Example: Pacific Standard Time, UTC, W. Europe Standard Time, Korea Standard Time, Cen. Australia Standard Time.
   *
   * @schema #/definitions/MaintenanceWindow#timeZone
   */
  readonly timeZone?: string;

}

export enum MaintenanceConfigurationPropertiesVisibility {
  CUSTOM = 'Custom',
  PUBLIC = 'Public',
}


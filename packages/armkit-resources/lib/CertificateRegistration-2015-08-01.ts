// generated by armkit
import { ArmResource } from '@yetics/armkit-core';
import { Construct } from 'constructs';

/**
 * Microsoft.CertificateRegistration/certificateOrders
 *
 * @schema Microsoft.CertificateRegistration.certificateOrders
 */
export class CertificateOrders extends ArmResource {
  /**
   * Defines a "Microsoft.CertificateRegistration.certificateOrders" Arm Template object
   * @param scope the scope in which to define this object
   * @param name a scope-local name for the object
   * @param options configuration options
   */
  public constructor(scope: Construct, name: string, options: CertificateOrdersOptions) {
    super(scope, name, {
      ...options,
      armResourceType: 'certificateOrders',
    });
  }
}

/**
 * Microsoft.CertificateRegistration/certificateOrders/certificates
 *
 * @schema Microsoft.CertificateRegistration.certificateOrders_certificates
 */
export class CertificateOrdersCertificates extends ArmResource {
  /**
   * Defines a "Microsoft.CertificateRegistration.certificateOrders_certificates" Arm Template object
   * @param scope the scope in which to define this object
   * @param name a scope-local name for the object
   * @param options configuration options
   */
  public constructor(scope: Construct, name: string, options: CertificateOrdersCertificatesOptions) {
    super(scope, name, {
      ...options,
      armResourceType: 'certificateOrders_certificates',
    });
  }
}

/**
 * Microsoft.CertificateRegistration/certificateOrders
 *
 * @schema Microsoft.CertificateRegistration.certificateOrders
 */
export interface CertificateOrdersOptions {
  /**
   * @schema Microsoft.CertificateRegistration.certificateOrders#type
   */
  readonly type: MicrosoftCertificateRegistrationCertificateOrdersType;

  /**
   * @schema Microsoft.CertificateRegistration.certificateOrders#apiVersion
   */
  readonly apiVersion?: MicrosoftCertificateRegistrationCertificateOrdersApiVersion;

  /**
   * @schema Microsoft.CertificateRegistration.certificateOrders#properties
   */
  readonly properties: CertificateOrderProperties;

  /**
   * @schema Microsoft.CertificateRegistration.certificateOrders#resources
   */
  readonly resources?: CertificateOrdersCertificatesChildResource[];

}

/**
 * Microsoft.CertificateRegistration/certificateOrders/certificates
 *
 * @schema Microsoft.CertificateRegistration.certificateOrders_certificates
 */
export interface CertificateOrdersCertificatesOptions {
  /**
   * @schema Microsoft.CertificateRegistration.certificateOrders_certificates#type
   */
  readonly type: MicrosoftCertificateRegistrationCertificateOrdersCertificatesType;

  /**
   * @schema Microsoft.CertificateRegistration.certificateOrders_certificates#apiVersion
   */
  readonly apiVersion?: MicrosoftCertificateRegistrationCertificateOrdersCertificatesApiVersion;

  /**
   * @schema Microsoft.CertificateRegistration.certificateOrders_certificates#properties
   */
  readonly properties: CertificateOrderCertificateProperties;

}

export enum MicrosoftCertificateRegistrationCertificateOrdersType {
  "MicrosoftCertificateRegistrationCertificateOrdersType_MICROSOFT_CERTIFICATE_REGISTRATION_CERTIFICATE_ORDERS" = 'Microsoft.CertificateRegistration/certificateOrders',
}

export enum MicrosoftCertificateRegistrationCertificateOrdersApiVersion {
  "MicrosoftCertificateRegistrationCertificateOrdersApiVersion_2015_08_01" = '2015-08-01',
}

/**
 * @schema #/definitions/CertificateOrder_properties
 */
export interface CertificateOrderProperties {
  /**
   * State of the Key Vault secret
   *
   * @schema #/definitions/CertificateOrder_properties#certificates
   */
  readonly certificates?: { [key: string]: CertificateOrderCertificate };

  /**
   * Certificate distinguished name
   *
   * @schema #/definitions/CertificateOrder_properties#distinguishedName
   */
  readonly distinguishedName?: string;

  /**
   * Domain Verification Token
   *
   * @schema #/definitions/CertificateOrder_properties#domainVerificationToken
   */
  readonly domainVerificationToken?: string;

  /**
   * Duration in years (must be between 1 and 3)
   *
   * @schema #/definitions/CertificateOrder_properties#validityInYears
   */
  readonly validityInYears?: number;

  /**
   * Certificate Key Size
   *
   * @schema #/definitions/CertificateOrder_properties#keySize
   */
  readonly keySize?: number;

  /**
   * Certificate product type.
   *
   * @schema #/definitions/CertificateOrder_properties#productType
   */
  readonly productType?: CertificateOrderPropertiesProductType;

  /**
   * Auto renew
   *
   * @schema #/definitions/CertificateOrder_properties#autoRenew
   */
  readonly autoRenew?: boolean;

  /**
   * Status of certificate order.
   *
   * @schema #/definitions/CertificateOrder_properties#provisioningState
   */
  readonly provisioningState?: CertificateOrderPropertiesProvisioningState;

  /**
   * Current order status.
   *
   * @schema #/definitions/CertificateOrder_properties#status
   */
  readonly status?: CertificateOrderPropertiesStatus;

  /**
   * Signed certificate
   *
   * @schema #/definitions/CertificateOrder_properties#signedCertificate
   */
  readonly signedCertificate?: CertificateDetails;

  /**
   * Last CSR that was created for this order
   *
   * @schema #/definitions/CertificateOrder_properties#csr
   */
  readonly csr?: string;

  /**
   * Intermediate certificate
   *
   * @schema #/definitions/CertificateOrder_properties#intermediate
   */
  readonly intermediate?: CertificateDetails;

  /**
   * Root certificate
   *
   * @schema #/definitions/CertificateOrder_properties#root
   */
  readonly root?: CertificateDetails;

  /**
   * Current serial number of the certificate
   *
   * @schema #/definitions/CertificateOrder_properties#serialNumber
   */
  readonly serialNumber?: string;

  /**
   * Certificate last issuance time
   *
   * @schema #/definitions/CertificateOrder_properties#lastCertificateIssuanceTime
   */
  readonly lastCertificateIssuanceTime?: Date;

  /**
   * Certificate expiration time
   *
   * @schema #/definitions/CertificateOrder_properties#expirationTime
   */
  readonly expirationTime?: Date;

}

/**
 * Microsoft.CertificateRegistration/certificateOrders/certificates
 *
 * @schema #/definitions/certificateOrders_certificates_childResource
 */
export interface CertificateOrdersCertificatesChildResource {
  /**
   * @schema #/definitions/certificateOrders_certificates_childResource#type
   */
  readonly type: CertificateOrdersCertificatesChildResourceType;

  /**
   * @schema #/definitions/certificateOrders_certificates_childResource#apiVersion
   */
  readonly apiVersion: CertificateOrdersCertificatesChildResourceApiVersion;

  /**
   * @schema #/definitions/certificateOrders_certificates_childResource#properties
   */
  readonly properties: CertificateOrderCertificateProperties;

}

export enum MicrosoftCertificateRegistrationCertificateOrdersCertificatesType {
  "MicrosoftCertificateRegistrationCertificateOrdersCertificatesType_MICROSOFT_CERTIFICATE_REGISTRATION_CERTIFICATE_ORDERS_CERTIFICATES" = 'Microsoft.CertificateRegistration/certificateOrders/certificates',
}

export enum MicrosoftCertificateRegistrationCertificateOrdersCertificatesApiVersion {
  "MicrosoftCertificateRegistrationCertificateOrdersCertificatesApiVersion_2015_08_01" = '2015-08-01',
}

/**
 * @schema #/definitions/CertificateOrderCertificate_properties
 */
export interface CertificateOrderCertificateProperties {
  /**
   * Key Vault Csm resource Id
   *
   * @schema #/definitions/CertificateOrderCertificate_properties#keyVaultId
   */
  readonly keyVaultId?: string;

  /**
   * Key Vault secret name
   *
   * @schema #/definitions/CertificateOrderCertificate_properties#keyVaultSecretName
   */
  readonly keyVaultSecretName?: string;

  /**
   * Status of the Key Vault secret.
   *
   * @schema #/definitions/CertificateOrderCertificate_properties#provisioningState
   */
  readonly provisioningState?: CertificateOrderCertificatePropertiesProvisioningState;

}

/**
 * Class representing the Key Vault container for certificate purchased through Azure
 *
 * @schema #/definitions/CertificateOrderCertificate
 */
export interface CertificateOrderCertificate {
  /**
   * Resource Id
   *
   * @schema #/definitions/CertificateOrderCertificate#id
   */
  readonly id?: string;

  /**
   * Resource Name
   *
   * @schema #/definitions/CertificateOrderCertificate#name
   */
  readonly name?: string;

  /**
   * Kind of resource
   *
   * @schema #/definitions/CertificateOrderCertificate#kind
   */
  readonly kind?: string;

  /**
   * Resource Location
   *
   * @schema #/definitions/CertificateOrderCertificate#location
   */
  readonly location: string;

  /**
   * Resource type
   *
   * @schema #/definitions/CertificateOrderCertificate#type
   */
  readonly type?: string;

  /**
   * Resource tags
   *
   * @schema #/definitions/CertificateOrderCertificate#tags
   */
  readonly tags?: { [key: string]: string };

  /**
   * @schema #/definitions/CertificateOrderCertificate#properties
   */
  readonly properties?: CertificateOrderCertificateProperties;

}

export enum CertificateOrderPropertiesProductType {
  STANDARD_DOMAIN_VALIDATED_SSL = 'StandardDomainValidatedSsl',
  STANDARD_DOMAIN_VALIDATED_WILD_CARD_SSL = 'StandardDomainValidatedWildCardSsl',
}

export enum CertificateOrderPropertiesProvisioningState {
  SUCCEEDED = 'Succeeded',
  FAILED = 'Failed',
  CANCELED = 'Canceled',
  IN_PROGRESS = 'InProgress',
  DELETING = 'Deleting',
}

export enum CertificateOrderPropertiesStatus {
  PENDINGISSUANCE = 'Pendingissuance',
  ISSUED = 'Issued',
  REVOKED = 'Revoked',
  CANCELED = 'Canceled',
  DENIED = 'Denied',
  PENDINGREVOCATION = 'Pendingrevocation',
  PENDING_REKEY = 'PendingRekey',
  UNUSED = 'Unused',
  EXPIRED = 'Expired',
  NOT_SUBMITTED = 'NotSubmitted',
}

/**
 * Certificate Details
 *
 * @schema #/definitions/CertificateDetails
 */
export interface CertificateDetails {
  /**
   * Resource Id
   *
   * @schema #/definitions/CertificateDetails#id
   */
  readonly id?: string;

  /**
   * Resource Name
   *
   * @schema #/definitions/CertificateDetails#name
   */
  readonly name?: string;

  /**
   * Kind of resource
   *
   * @schema #/definitions/CertificateDetails#kind
   */
  readonly kind?: string;

  /**
   * Resource Location
   *
   * @schema #/definitions/CertificateDetails#location
   */
  readonly location: string;

  /**
   * Resource type
   *
   * @schema #/definitions/CertificateDetails#type
   */
  readonly type?: string;

  /**
   * Resource tags
   *
   * @schema #/definitions/CertificateDetails#tags
   */
  readonly tags?: { [key: string]: string };

  /**
   * @schema #/definitions/CertificateDetails#properties
   */
  readonly properties?: CertificateDetailsProperties;

}

export enum CertificateOrdersCertificatesChildResourceType {
  CERTIFICATES = 'certificates',
}

export enum CertificateOrdersCertificatesChildResourceApiVersion {
  "CertificateOrdersCertificatesChildResourceApiVersion_2015_08_01" = '2015-08-01',
}

export enum CertificateOrderCertificatePropertiesProvisioningState {
  INITIALIZED = 'Initialized',
  WAITING_ON_CERTIFICATE_ORDER = 'WaitingOnCertificateOrder',
  SUCCEEDED = 'Succeeded',
  CERTIFICATE_ORDER_FAILED = 'CertificateOrderFailed',
  OPERATION_NOT_PERMITTED_ON_KEY_VAULT = 'OperationNotPermittedOnKeyVault',
  AZURE_SERVICE_UNAUTHORIZED_TO_ACCESS_KEY_VAULT = 'AzureServiceUnauthorizedToAccessKeyVault',
  KEY_VAULT_DOES_NOT_EXIST = 'KeyVaultDoesNotExist',
  KEY_VAULT_SECRET_DOES_NOT_EXIST = 'KeyVaultSecretDoesNotExist',
  UNKNOWN_ERROR = 'UnknownError',
  UNKNOWN = 'Unknown',
}

/**
 * @schema #/definitions/CertificateDetails_properties
 */
export interface CertificateDetailsProperties {
  /**
   * Version
   *
   * @schema #/definitions/CertificateDetails_properties#version
   */
  readonly version?: number;

  /**
   * Serial Number
   *
   * @schema #/definitions/CertificateDetails_properties#serialNumber
   */
  readonly serialNumber?: string;

  /**
   * Thumbprint
   *
   * @schema #/definitions/CertificateDetails_properties#thumbprint
   */
  readonly thumbprint?: string;

  /**
   * Subject
   *
   * @schema #/definitions/CertificateDetails_properties#subject
   */
  readonly subject?: string;

  /**
   * Valid from
   *
   * @schema #/definitions/CertificateDetails_properties#notBefore
   */
  readonly notBefore?: Date;

  /**
   * Valid to
   *
   * @schema #/definitions/CertificateDetails_properties#notAfter
   */
  readonly notAfter?: Date;

  /**
   * Signature Algorithm
   *
   * @schema #/definitions/CertificateDetails_properties#signatureAlgorithm
   */
  readonly signatureAlgorithm?: string;

  /**
   * Issuer
   *
   * @schema #/definitions/CertificateDetails_properties#issuer
   */
  readonly issuer?: string;

  /**
   * Raw certificate data
   *
   * @schema #/definitions/CertificateDetails_properties#rawData
   */
  readonly rawData?: string;

}


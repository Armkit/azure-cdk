// generated by armkit
import { ArmResource } from '@yetics/armkit-core';
import { Construct } from 'constructs';

/**
 * Microsoft.EventGrid/domains
 *
 * @schema Microsoft.EventGrid.domains
 */
export class Domains extends ArmResource {
  /**
   * Defines a "Microsoft.EventGrid.domains" Arm Template object
   * @param scope the scope in which to define this object
   * @param name a scope-local name for the object
   * @param options configuration options
   */
  public constructor(scope: Construct, name: string, options: DomainsOptions) {
    super(scope, name, {
      ...options,
      armResourceType: 'domains',
    });
  }
}

/**
 * Microsoft.EventGrid/domains/privateEndpointConnections
 *
 * @schema Microsoft.EventGrid.domains_privateEndpointConnections
 */
export class DomainsPrivateEndpointConnections extends ArmResource {
  /**
   * Defines a "Microsoft.EventGrid.domains_privateEndpointConnections" Arm Template object
   * @param scope the scope in which to define this object
   * @param name a scope-local name for the object
   * @param options configuration options
   */
  public constructor(scope: Construct, name: string, options: DomainsPrivateEndpointConnectionsOptions) {
    super(scope, name, {
      ...options,
      armResourceType: 'domains_privateEndpointConnections',
    });
  }
}

/**
 * Microsoft.EventGrid/domains/topics
 *
 * @schema Microsoft.EventGrid.domains_topics
 */
export class DomainsTopics extends ArmResource {
  /**
   * Defines a "Microsoft.EventGrid.domains_topics" Arm Template object
   * @param scope the scope in which to define this object
   * @param name a scope-local name for the object
   * @param options configuration options
   */
  public constructor(scope: Construct, name: string, options: DomainsTopicsOptions) {
    super(scope, name, {
      ...options,
      armResourceType: 'domains_topics',
    });
  }
}

/**
 * Microsoft.EventGrid/topics
 *
 * @schema Microsoft.EventGrid.topics
 */
export class Topics extends ArmResource {
  /**
   * Defines a "Microsoft.EventGrid.topics" Arm Template object
   * @param scope the scope in which to define this object
   * @param name a scope-local name for the object
   * @param options configuration options
   */
  public constructor(scope: Construct, name: string, options: TopicsOptions) {
    super(scope, name, {
      ...options,
      armResourceType: 'topics',
    });
  }
}

/**
 * Microsoft.EventGrid/topics/privateEndpointConnections
 *
 * @schema Microsoft.EventGrid.topics_privateEndpointConnections
 */
export class TopicsPrivateEndpointConnections extends ArmResource {
  /**
   * Defines a "Microsoft.EventGrid.topics_privateEndpointConnections" Arm Template object
   * @param scope the scope in which to define this object
   * @param name a scope-local name for the object
   * @param options configuration options
   */
  public constructor(scope: Construct, name: string, options: TopicsPrivateEndpointConnectionsOptions) {
    super(scope, name, {
      ...options,
      armResourceType: 'topics_privateEndpointConnections',
    });
  }
}

/**
 * Microsoft.EventGrid/domains
 *
 * @schema Microsoft.EventGrid.domains
 */
export interface DomainsOptions {
  /**
   * @schema Microsoft.EventGrid.domains#apiVersion
   */
  readonly apiVersion?: MicrosoftEventGridDomainsApiVersion;

  /**
   * Location of the resource.
   *
   * @schema Microsoft.EventGrid.domains#location
   */
  readonly location: string;

  /**
   * Name of the domain.
   *
   * @schema Microsoft.EventGrid.domains#name
   */
  readonly name: string;

  /**
   * Properties of the Domain.
   *
   * @schema Microsoft.EventGrid.domains#properties
   */
  readonly properties: DomainProperties;

  /**
   * @schema Microsoft.EventGrid.domains#resources
   */
  readonly resources?: MicrosoftEventGridDomainsResources[];

  /**
   * Tags of the resource.
   *
   * @schema Microsoft.EventGrid.domains#tags
   */
  readonly tags?: MicrosoftEventGridDomainsTags;

  /**
   * @schema Microsoft.EventGrid.domains#type
   */
  readonly type: MicrosoftEventGridDomainsType;

}

/**
 * Microsoft.EventGrid/domains/privateEndpointConnections
 *
 * @schema Microsoft.EventGrid.domains_privateEndpointConnections
 */
export interface DomainsPrivateEndpointConnectionsOptions {
  /**
   * @schema Microsoft.EventGrid.domains_privateEndpointConnections#apiVersion
   */
  readonly apiVersion?: MicrosoftEventGridDomainsPrivateEndpointConnectionsApiVersion;

  /**
   * The name of the private endpoint connection connection.
   *
   * @schema Microsoft.EventGrid.domains_privateEndpointConnections#name
   */
  readonly name: string;

  /**
   * Properties of the private endpoint connection resource.
   *
   * @schema Microsoft.EventGrid.domains_privateEndpointConnections#properties
   */
  readonly properties: PrivateEndpointConnectionProperties;

  /**
   * @schema Microsoft.EventGrid.domains_privateEndpointConnections#type
   */
  readonly type: MicrosoftEventGridDomainsPrivateEndpointConnectionsType;

}

/**
 * Microsoft.EventGrid/domains/topics
 *
 * @schema Microsoft.EventGrid.domains_topics
 */
export interface DomainsTopicsOptions {
  /**
   * @schema Microsoft.EventGrid.domains_topics#apiVersion
   */
  readonly apiVersion?: MicrosoftEventGridDomainsTopicsApiVersion;

  /**
   * Name of the domain topic.
   *
   * @schema Microsoft.EventGrid.domains_topics#name
   */
  readonly name: string;

  /**
   * @schema Microsoft.EventGrid.domains_topics#type
   */
  readonly type: MicrosoftEventGridDomainsTopicsType;

}

/**
 * Microsoft.EventGrid/topics
 *
 * @schema Microsoft.EventGrid.topics
 */
export interface TopicsOptions {
  /**
   * @schema Microsoft.EventGrid.topics#apiVersion
   */
  readonly apiVersion?: MicrosoftEventGridTopicsApiVersion;

  /**
   * Location of the resource.
   *
   * @schema Microsoft.EventGrid.topics#location
   */
  readonly location: string;

  /**
   * Name of the topic.
   *
   * @schema Microsoft.EventGrid.topics#name
   */
  readonly name: string;

  /**
   * Properties of the Topic
   *
   * @schema Microsoft.EventGrid.topics#properties
   */
  readonly properties: TopicProperties;

  /**
   * @schema Microsoft.EventGrid.topics#resources
   */
  readonly resources?: TopicsPrivateEndpointConnectionsChildResource[];

  /**
   * Tags of the resource.
   *
   * @schema Microsoft.EventGrid.topics#tags
   */
  readonly tags?: MicrosoftEventGridTopicsTags;

  /**
   * @schema Microsoft.EventGrid.topics#type
   */
  readonly type: MicrosoftEventGridTopicsType;

}

/**
 * Microsoft.EventGrid/topics/privateEndpointConnections
 *
 * @schema Microsoft.EventGrid.topics_privateEndpointConnections
 */
export interface TopicsPrivateEndpointConnectionsOptions {
  /**
   * @schema Microsoft.EventGrid.topics_privateEndpointConnections#apiVersion
   */
  readonly apiVersion?: MicrosoftEventGridTopicsPrivateEndpointConnectionsApiVersion;

  /**
   * The name of the private endpoint connection connection.
   *
   * @schema Microsoft.EventGrid.topics_privateEndpointConnections#name
   */
  readonly name: string;

  /**
   * Properties of the private endpoint connection resource.
   *
   * @schema Microsoft.EventGrid.topics_privateEndpointConnections#properties
   */
  readonly properties: PrivateEndpointConnectionProperties;

  /**
   * @schema Microsoft.EventGrid.topics_privateEndpointConnections#type
   */
  readonly type: MicrosoftEventGridTopicsPrivateEndpointConnectionsType;

}

export enum MicrosoftEventGridDomainsApiVersion {
  "MicrosoftEventGridDomainsApiVersion_2020_06_01" = '2020-06-01',
}

/**
 * Properties of the Domain.
 *
 * @schema #/definitions/DomainProperties
 */
export interface DomainProperties {
  /**
   * This can be used to restrict traffic from specific IPs instead of all IPs. Note: These are considered only if PublicNetworkAccess is enabled.
   *
   * @schema #/definitions/DomainProperties#inboundIpRules
   */
  readonly inboundIpRules?: InboundIpRule[];

  /**
   * This determines the format that Event Grid should expect for incoming events published to the domain.
   *
   * @schema #/definitions/DomainProperties#inputSchema
   */
  readonly inputSchema?: DomainPropertiesInputSchema;

  /**
   * By default, Event Grid expects events to be in the Event Grid event schema. Specifying an input schema mapping enables publishing to Event Grid using a custom input schema. Currently, the only supported type of InputSchemaMapping is 'JsonInputSchemaMapping'.
   *
   * @schema #/definitions/DomainProperties#inputSchemaMapping
   */
  readonly inputSchemaMapping?: JsonInputSchemaMapping;

  /**
   * This determines if traffic is allowed over public network. By default it is enabled. 
You can further restrict to specific IPs by configuring <seealso cref="P:Microsoft.Azure.Events.ResourceProvider.Common.Contracts.DomainProperties.InboundIpRules" />.
   *
   * @schema #/definitions/DomainProperties#publicNetworkAccess
   */
  readonly publicNetworkAccess?: DomainPropertiesPublicNetworkAccess;

}

/**
 * @schema MicrosoftEventGridDomainsResources
 */
export class MicrosoftEventGridDomainsResources {
  public static fromDomainsTopicsChildResource(value: DomainsTopicsChildResource): MicrosoftEventGridDomainsResources {
    return new MicrosoftEventGridDomainsResources(value);
  }
  public static fromDomainsPrivateEndpointConnectionsChildResource(value: DomainsPrivateEndpointConnectionsChildResource): MicrosoftEventGridDomainsResources {
    return new MicrosoftEventGridDomainsResources(value);
  }
  private constructor(value: any) {
    Object.defineProperty(this, 'resolve', { value: () => value });
  }
}

/**
 * @schema MicrosoftEventGridDomainsTags
 */
export interface MicrosoftEventGridDomainsTags {
}

export enum MicrosoftEventGridDomainsType {
  "MicrosoftEventGridDomainsType_MICROSOFT_EVENT_GRID_DOMAINS" = 'Microsoft.EventGrid/domains',
}

export enum MicrosoftEventGridDomainsPrivateEndpointConnectionsApiVersion {
  "MicrosoftEventGridDomainsPrivateEndpointConnectionsApiVersion_2020_06_01" = '2020-06-01',
}

/**
 * Properties of the private endpoint connection resource.
 *
 * @schema #/definitions/PrivateEndpointConnectionProperties
 */
export interface PrivateEndpointConnectionProperties {
  /**
   * GroupIds from the private link service resource.
   *
   * @schema #/definitions/PrivateEndpointConnectionProperties#groupIds
   */
  readonly groupIds?: string[];

  /**
   * PrivateEndpoint information.
   *
   * @schema #/definitions/PrivateEndpointConnectionProperties#privateEndpoint
   */
  readonly privateEndpoint?: PrivateEndpoint;

  /**
   * ConnectionState information.
   *
   * @schema #/definitions/PrivateEndpointConnectionProperties#privateLinkServiceConnectionState
   */
  readonly privateLinkServiceConnectionState?: ConnectionState;

  /**
   * Provisioning state of the Private Endpoint Connection.
   *
   * @schema #/definitions/PrivateEndpointConnectionProperties#provisioningState
   */
  readonly provisioningState?: PrivateEndpointConnectionPropertiesProvisioningState;

}

export enum MicrosoftEventGridDomainsPrivateEndpointConnectionsType {
  "MicrosoftEventGridDomainsPrivateEndpointConnectionsType_MICROSOFT_EVENT_GRID_DOMAINS_PRIVATE_ENDPOINT_CONNECTIONS" = 'Microsoft.EventGrid/domains/privateEndpointConnections',
}

export enum MicrosoftEventGridDomainsTopicsApiVersion {
  "MicrosoftEventGridDomainsTopicsApiVersion_2020_06_01" = '2020-06-01',
}

export enum MicrosoftEventGridDomainsTopicsType {
  "MicrosoftEventGridDomainsTopicsType_MICROSOFT_EVENT_GRID_DOMAINS_TOPICS" = 'Microsoft.EventGrid/domains/topics',
}

export enum MicrosoftEventGridTopicsApiVersion {
  "MicrosoftEventGridTopicsApiVersion_2020_06_01" = '2020-06-01',
}

/**
 * Properties of the Topic
 *
 * @schema #/definitions/TopicProperties
 */
export interface TopicProperties {
  /**
   * This can be used to restrict traffic from specific IPs instead of all IPs. Note: These are considered only if PublicNetworkAccess is enabled.
   *
   * @schema #/definitions/TopicProperties#inboundIpRules
   */
  readonly inboundIpRules?: InboundIpRule[];

  /**
   * This determines the format that Event Grid should expect for incoming events published to the topic.
   *
   * @schema #/definitions/TopicProperties#inputSchema
   */
  readonly inputSchema?: TopicPropertiesInputSchema;

  /**
   * By default, Event Grid expects events to be in the Event Grid event schema. Specifying an input schema mapping enables publishing to Event Grid using a custom input schema. Currently, the only supported type of InputSchemaMapping is 'JsonInputSchemaMapping'.
   *
   * @schema #/definitions/TopicProperties#inputSchemaMapping
   */
  readonly inputSchemaMapping?: JsonInputSchemaMapping;

  /**
   * This determines if traffic is allowed over public network. By default it is enabled. 
You can further restrict to specific IPs by configuring <seealso cref="P:Microsoft.Azure.Events.ResourceProvider.Common.Contracts.TopicProperties.InboundIpRules" />.
   *
   * @schema #/definitions/TopicProperties#publicNetworkAccess
   */
  readonly publicNetworkAccess?: TopicPropertiesPublicNetworkAccess;

}

/**
 * Microsoft.EventGrid/topics/privateEndpointConnections
 *
 * @schema #/definitions/topics_privateEndpointConnections_childResource
 */
export interface TopicsPrivateEndpointConnectionsChildResource {
  /**
   * @schema #/definitions/topics_privateEndpointConnections_childResource#apiVersion
   */
  readonly apiVersion: TopicsPrivateEndpointConnectionsChildResourceApiVersion;

  /**
   * The name of the private endpoint connection connection.
   *
   * @schema #/definitions/topics_privateEndpointConnections_childResource#name
   */
  readonly name: string;

  /**
   * Properties of the private endpoint connection resource.
   *
   * @schema #/definitions/topics_privateEndpointConnections_childResource#properties
   */
  readonly properties: PrivateEndpointConnectionProperties;

  /**
   * @schema #/definitions/topics_privateEndpointConnections_childResource#type
   */
  readonly type: TopicsPrivateEndpointConnectionsChildResourceType;

}

/**
 * @schema MicrosoftEventGridTopicsTags
 */
export interface MicrosoftEventGridTopicsTags {
}

export enum MicrosoftEventGridTopicsType {
  "MicrosoftEventGridTopicsType_MICROSOFT_EVENT_GRID_TOPICS" = 'Microsoft.EventGrid/topics',
}

export enum MicrosoftEventGridTopicsPrivateEndpointConnectionsApiVersion {
  "MicrosoftEventGridTopicsPrivateEndpointConnectionsApiVersion_2020_06_01" = '2020-06-01',
}

export enum MicrosoftEventGridTopicsPrivateEndpointConnectionsType {
  "MicrosoftEventGridTopicsPrivateEndpointConnectionsType_MICROSOFT_EVENT_GRID_TOPICS_PRIVATE_ENDPOINT_CONNECTIONS" = 'Microsoft.EventGrid/topics/privateEndpointConnections',
}

/**
 * @schema #/definitions/InboundIpRule
 */
export interface InboundIpRule {
  /**
   * Action to perform based on the match or no match of the IpMask.
   *
   * @schema #/definitions/InboundIpRule#action
   */
  readonly action?: InboundIpRuleAction;

  /**
   * IP Address in CIDR notation e.g., 10.0.0.0/8.
   *
   * @schema #/definitions/InboundIpRule#ipMask
   */
  readonly ipMask?: string;

}

export enum DomainPropertiesInputSchema {
  EVENT_GRID_SCHEMA = 'EventGridSchema',
  CUSTOM_EVENT_SCHEMA = 'CustomEventSchema',
  "DomainPropertiesInputSchema_CLOUD_EVENT_SCHEMA_V1_0" = 'CloudEventSchemaV1_0',
}

/**
 * This enables publishing to Event Grid using a custom input schema. This can be used to map properties from a custom input JSON schema to the Event Grid event schema.
 *
 * @schema #/definitions/JsonInputSchemaMapping
 */
export interface JsonInputSchemaMapping {
  /**
   * @schema #/definitions/JsonInputSchemaMapping#inputSchemaMappingType
   */
  readonly inputSchemaMappingType: JsonInputSchemaMappingInputSchemaMappingType;

  /**
   * This can be used to map properties of a source schema (or default values, for certain supported properties) to properties of the EventGridEvent schema.
   *
   * @schema #/definitions/JsonInputSchemaMapping#properties
   */
  readonly properties?: JsonInputSchemaMappingProperties;

}

export enum DomainPropertiesPublicNetworkAccess {
  ENABLED = 'Enabled',
  DISABLED = 'Disabled',
}

/**
 * Microsoft.EventGrid/domains/topics
 *
 * @schema #/definitions/domains_topics_childResource
 */
export interface DomainsTopicsChildResource {
  /**
   * @schema #/definitions/domains_topics_childResource#apiVersion
   */
  readonly apiVersion: DomainsTopicsChildResourceApiVersion;

  /**
   * Name of the domain topic.
   *
   * @schema #/definitions/domains_topics_childResource#name
   */
  readonly name: string;

  /**
   * @schema #/definitions/domains_topics_childResource#type
   */
  readonly type: DomainsTopicsChildResourceType;

}

/**
 * Microsoft.EventGrid/domains/privateEndpointConnections
 *
 * @schema #/definitions/domains_privateEndpointConnections_childResource
 */
export interface DomainsPrivateEndpointConnectionsChildResource {
  /**
   * @schema #/definitions/domains_privateEndpointConnections_childResource#apiVersion
   */
  readonly apiVersion: DomainsPrivateEndpointConnectionsChildResourceApiVersion;

  /**
   * The name of the private endpoint connection connection.
   *
   * @schema #/definitions/domains_privateEndpointConnections_childResource#name
   */
  readonly name: string;

  /**
   * Properties of the private endpoint connection resource.
   *
   * @schema #/definitions/domains_privateEndpointConnections_childResource#properties
   */
  readonly properties: PrivateEndpointConnectionProperties;

  /**
   * @schema #/definitions/domains_privateEndpointConnections_childResource#type
   */
  readonly type: DomainsPrivateEndpointConnectionsChildResourceType;

}

/**
 * PrivateEndpoint information.
 *
 * @schema #/definitions/PrivateEndpoint
 */
export interface PrivateEndpoint {
  /**
   * The ARM identifier for Private Endpoint.
   *
   * @schema #/definitions/PrivateEndpoint#id
   */
  readonly id?: string;

}

/**
 * ConnectionState information.
 *
 * @schema #/definitions/ConnectionState
 */
export interface ConnectionState {
  /**
   * Actions required (if any).
   *
   * @schema #/definitions/ConnectionState#actionsRequired
   */
  readonly actionsRequired?: string;

  /**
   * Description of the connection state.
   *
   * @schema #/definitions/ConnectionState#description
   */
  readonly description?: string;

  /**
   * Status of the connection.
   *
   * @schema #/definitions/ConnectionState#status
   */
  readonly status?: ConnectionStateStatus;

}

export enum PrivateEndpointConnectionPropertiesProvisioningState {
  CREATING = 'Creating',
  UPDATING = 'Updating',
  DELETING = 'Deleting',
  SUCCEEDED = 'Succeeded',
  CANCELED = 'Canceled',
  FAILED = 'Failed',
}

export enum TopicPropertiesInputSchema {
  EVENT_GRID_SCHEMA = 'EventGridSchema',
  CUSTOM_EVENT_SCHEMA = 'CustomEventSchema',
  "TopicPropertiesInputSchema_CLOUD_EVENT_SCHEMA_V1_0" = 'CloudEventSchemaV1_0',
}

export enum TopicPropertiesPublicNetworkAccess {
  ENABLED = 'Enabled',
  DISABLED = 'Disabled',
}

export enum TopicsPrivateEndpointConnectionsChildResourceApiVersion {
  "TopicsPrivateEndpointConnectionsChildResourceApiVersion_2020_06_01" = '2020-06-01',
}

export enum TopicsPrivateEndpointConnectionsChildResourceType {
  PRIVATE_ENDPOINT_CONNECTIONS = 'privateEndpointConnections',
}

export enum InboundIpRuleAction {
  ALLOW = 'Allow',
}

export enum JsonInputSchemaMappingInputSchemaMappingType {
  JSON = 'Json',
}

/**
 * This can be used to map properties of a source schema (or default values, for certain supported properties) to properties of the EventGridEvent schema.
 *
 * @schema #/definitions/JsonInputSchemaMappingProperties
 */
export interface JsonInputSchemaMappingProperties {
  /**
   * This is used to express the source of an input schema mapping for a single target field
in the Event Grid Event schema. This is currently used in the mappings for the 'subject',
'eventtype' and 'dataversion' properties. This represents a field in the input event schema
along with a default value to be used, and at least one of these two properties should be provided.
   *
   * @schema #/definitions/JsonInputSchemaMappingProperties#dataVersion
   */
  readonly dataVersion?: JsonFieldWithDefault;

  /**
   * This is used to express the source of an input schema mapping for a single target field in the Event Grid Event schema. This is currently used in the mappings for the 'id', 'topic' and 'eventtime' properties. This represents a field in the input event schema.
   *
   * @schema #/definitions/JsonInputSchemaMappingProperties#eventTime
   */
  readonly eventTime?: JsonField;

  /**
   * This is used to express the source of an input schema mapping for a single target field
in the Event Grid Event schema. This is currently used in the mappings for the 'subject',
'eventtype' and 'dataversion' properties. This represents a field in the input event schema
along with a default value to be used, and at least one of these two properties should be provided.
   *
   * @schema #/definitions/JsonInputSchemaMappingProperties#eventType
   */
  readonly eventType?: JsonFieldWithDefault;

  /**
   * This is used to express the source of an input schema mapping for a single target field in the Event Grid Event schema. This is currently used in the mappings for the 'id', 'topic' and 'eventtime' properties. This represents a field in the input event schema.
   *
   * @schema #/definitions/JsonInputSchemaMappingProperties#id
   */
  readonly id?: JsonField;

  /**
   * This is used to express the source of an input schema mapping for a single target field
in the Event Grid Event schema. This is currently used in the mappings for the 'subject',
'eventtype' and 'dataversion' properties. This represents a field in the input event schema
along with a default value to be used, and at least one of these two properties should be provided.
   *
   * @schema #/definitions/JsonInputSchemaMappingProperties#subject
   */
  readonly subject?: JsonFieldWithDefault;

  /**
   * This is used to express the source of an input schema mapping for a single target field in the Event Grid Event schema. This is currently used in the mappings for the 'id', 'topic' and 'eventtime' properties. This represents a field in the input event schema.
   *
   * @schema #/definitions/JsonInputSchemaMappingProperties#topic
   */
  readonly topic?: JsonField;

}

export enum DomainsTopicsChildResourceApiVersion {
  "DomainsTopicsChildResourceApiVersion_2020_06_01" = '2020-06-01',
}

export enum DomainsTopicsChildResourceType {
  TOPICS = 'topics',
}

export enum DomainsPrivateEndpointConnectionsChildResourceApiVersion {
  "DomainsPrivateEndpointConnectionsChildResourceApiVersion_2020_06_01" = '2020-06-01',
}

export enum DomainsPrivateEndpointConnectionsChildResourceType {
  PRIVATE_ENDPOINT_CONNECTIONS = 'privateEndpointConnections',
}

export enum ConnectionStateStatus {
  PENDING = 'Pending',
  APPROVED = 'Approved',
  REJECTED = 'Rejected',
  DISCONNECTED = 'Disconnected',
}

/**
 * This is used to express the source of an input schema mapping for a single target field
in the Event Grid Event schema. This is currently used in the mappings for the 'subject',
'eventtype' and 'dataversion' properties. This represents a field in the input event schema
along with a default value to be used, and at least one of these two properties should be provided.
 *
 * @schema #/definitions/JsonFieldWithDefault
 */
export interface JsonFieldWithDefault {
  /**
   * The default value to be used for mapping when a SourceField is not provided or if there's no property with the specified name in the published JSON event payload.
   *
   * @schema #/definitions/JsonFieldWithDefault#defaultValue
   */
  readonly defaultValue?: string;

  /**
   * Name of a field in the input event schema that's to be used as the source of a mapping.
   *
   * @schema #/definitions/JsonFieldWithDefault#sourceField
   */
  readonly sourceField?: string;

}

/**
 * This is used to express the source of an input schema mapping for a single target field in the Event Grid Event schema. This is currently used in the mappings for the 'id', 'topic' and 'eventtime' properties. This represents a field in the input event schema.
 *
 * @schema #/definitions/JsonField
 */
export interface JsonField {
  /**
   * Name of a field in the input event schema that's to be used as the source of a mapping.
   *
   * @schema #/definitions/JsonField#sourceField
   */
  readonly sourceField?: string;

}


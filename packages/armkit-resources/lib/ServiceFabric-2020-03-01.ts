// generated by armkit
import { ArmResource } from '@yetics/armkit-core';
import { Construct } from 'constructs';

/**
 * Microsoft.ServiceFabric/clusters
 *
 * @schema Microsoft.ServiceFabric.clusters
 */
export class Clusters extends ArmResource {
  /**
   * Defines a "Microsoft.ServiceFabric.clusters" Arm Template object
   * @param scope the scope in which to define this object
   * @param name a scope-local name for the object
   * @param options configuration options
   */
  public constructor(scope: Construct, name: string, options: ClustersOptions) {
    super(scope, name, {
      ...options,
      armResourceType: 'clusters',
    });
  }
}

/**
 * Microsoft.ServiceFabric/clusters/applications
 *
 * @schema Microsoft.ServiceFabric.clusters_applications
 */
export class ClustersApplications extends ArmResource {
  /**
   * Defines a "Microsoft.ServiceFabric.clusters_applications" Arm Template object
   * @param scope the scope in which to define this object
   * @param name a scope-local name for the object
   * @param options configuration options
   */
  public constructor(scope: Construct, name: string, options: ClustersApplicationsOptions) {
    super(scope, name, {
      ...options,
      armResourceType: 'clusters_applications',
    });
  }
}

/**
 * Microsoft.ServiceFabric/clusters/applications/services
 *
 * @schema Microsoft.ServiceFabric.clusters_applications_services
 */
export class ClustersApplicationsServices extends ArmResource {
  /**
   * Defines a "Microsoft.ServiceFabric.clusters_applications_services" Arm Template object
   * @param scope the scope in which to define this object
   * @param name a scope-local name for the object
   * @param options configuration options
   */
  public constructor(scope: Construct, name: string, options: ClustersApplicationsServicesOptions) {
    super(scope, name, {
      ...options,
      armResourceType: 'clusters_applications_services',
    });
  }
}

/**
 * Microsoft.ServiceFabric/clusters/applicationTypes
 *
 * @schema Microsoft.ServiceFabric.clusters_applicationTypes
 */
export class ClustersApplicationTypes extends ArmResource {
  /**
   * Defines a "Microsoft.ServiceFabric.clusters_applicationTypes" Arm Template object
   * @param scope the scope in which to define this object
   * @param name a scope-local name for the object
   * @param options configuration options
   */
  public constructor(scope: Construct, name: string, options: ClustersApplicationTypesOptions) {
    super(scope, name, {
      ...options,
      armResourceType: 'clusters_applicationTypes',
    });
  }
}

/**
 * Microsoft.ServiceFabric/clusters/applicationTypes/versions
 *
 * @schema Microsoft.ServiceFabric.clusters_applicationTypes_versions
 */
export class ClustersApplicationTypesVersions extends ArmResource {
  /**
   * Defines a "Microsoft.ServiceFabric.clusters_applicationTypes_versions" Arm Template object
   * @param scope the scope in which to define this object
   * @param name a scope-local name for the object
   * @param options configuration options
   */
  public constructor(scope: Construct, name: string, options: ClustersApplicationTypesVersionsOptions) {
    super(scope, name, {
      ...options,
      armResourceType: 'clusters_applicationTypes_versions',
    });
  }
}

/**
 * Microsoft.ServiceFabric/clusters
 *
 * @schema Microsoft.ServiceFabric.clusters
 */
export interface ClustersOptions {
  /**
   * @schema Microsoft.ServiceFabric.clusters#apiVersion
   */
  readonly apiVersion?: MicrosoftServiceFabricClustersApiVersion;

  /**
   * Azure resource location.
   *
   * @schema Microsoft.ServiceFabric.clusters#location
   */
  readonly location: string;

  /**
   * The name of the cluster resource.
   *
   * @schema Microsoft.ServiceFabric.clusters#name
   */
  readonly name: string;

  /**
   * Describes the cluster resource properties.
   *
   * @schema Microsoft.ServiceFabric.clusters#properties
   */
  readonly properties: ClusterProperties;

  /**
   * @schema Microsoft.ServiceFabric.clusters#resources
   */
  readonly resources?: MicrosoftServiceFabricClustersResources[];

  /**
   * Azure resource tags.
   *
   * @schema Microsoft.ServiceFabric.clusters#tags
   */
  readonly tags?: MicrosoftServiceFabricClustersTags;

  /**
   * @schema Microsoft.ServiceFabric.clusters#type
   */
  readonly type: MicrosoftServiceFabricClustersType;

}

/**
 * Microsoft.ServiceFabric/clusters/applications
 *
 * @schema Microsoft.ServiceFabric.clusters_applications
 */
export interface ClustersApplicationsOptions {
  /**
   * @schema Microsoft.ServiceFabric.clusters_applications#apiVersion
   */
  readonly apiVersion?: MicrosoftServiceFabricClustersApplicationsApiVersion;

  /**
   * Describes the managed identities for an Azure resource.
   *
   * @schema Microsoft.ServiceFabric.clusters_applications#identity
   */
  readonly identity?: ManagedIdentity;

  /**
   * It will be deprecated in New API, resource location depends on the parent resource.
   *
   * @schema Microsoft.ServiceFabric.clusters_applications#location
   */
  readonly location?: string;

  /**
   * The name of the application resource.
   *
   * @schema Microsoft.ServiceFabric.clusters_applications#name
   */
  readonly name: string;

  /**
   * The application resource properties.
   *
   * @schema Microsoft.ServiceFabric.clusters_applications#properties
   */
  readonly properties: ApplicationResourceProperties;

  /**
   * @schema Microsoft.ServiceFabric.clusters_applications#resources
   */
  readonly resources?: ClustersApplicationsServicesChildResource[];

  /**
   * Azure resource tags.
   *
   * @schema Microsoft.ServiceFabric.clusters_applications#tags
   */
  readonly tags?: MicrosoftServiceFabricClustersApplicationsTags;

  /**
   * @schema Microsoft.ServiceFabric.clusters_applications#type
   */
  readonly type: MicrosoftServiceFabricClustersApplicationsType;

}

/**
 * Microsoft.ServiceFabric/clusters/applications/services
 *
 * @schema Microsoft.ServiceFabric.clusters_applications_services
 */
export interface ClustersApplicationsServicesOptions {
  /**
   * @schema Microsoft.ServiceFabric.clusters_applications_services#apiVersion
   */
  readonly apiVersion?: MicrosoftServiceFabricClustersApplicationsServicesApiVersion;

  /**
   * It will be deprecated in New API, resource location depends on the parent resource.
   *
   * @schema Microsoft.ServiceFabric.clusters_applications_services#location
   */
  readonly location?: string;

  /**
   * The name of the service resource in the format of {applicationName}~{serviceName}.
   *
   * @schema Microsoft.ServiceFabric.clusters_applications_services#name
   */
  readonly name: string;

  /**
   * The service resource properties.
   *
   * @schema Microsoft.ServiceFabric.clusters_applications_services#properties
   */
  readonly properties: ServiceResourceProperties;

  /**
   * Azure resource tags.
   *
   * @schema Microsoft.ServiceFabric.clusters_applications_services#tags
   */
  readonly tags?: MicrosoftServiceFabricClustersApplicationsServicesTags;

  /**
   * @schema Microsoft.ServiceFabric.clusters_applications_services#type
   */
  readonly type: MicrosoftServiceFabricClustersApplicationsServicesType;

}

/**
 * Microsoft.ServiceFabric/clusters/applicationTypes
 *
 * @schema Microsoft.ServiceFabric.clusters_applicationTypes
 */
export interface ClustersApplicationTypesOptions {
  /**
   * @schema Microsoft.ServiceFabric.clusters_applicationTypes#apiVersion
   */
  readonly apiVersion?: MicrosoftServiceFabricClustersApplicationTypesApiVersion;

  /**
   * It will be deprecated in New API, resource location depends on the parent resource.
   *
   * @schema Microsoft.ServiceFabric.clusters_applicationTypes#location
   */
  readonly location?: string;

  /**
   * The name of the application type name resource.
   *
   * @schema Microsoft.ServiceFabric.clusters_applicationTypes#name
   */
  readonly name: string;

  /**
   * The application type name properties
   *
   * @schema Microsoft.ServiceFabric.clusters_applicationTypes#properties
   */
  readonly properties: ApplicationTypeResourceProperties;

  /**
   * @schema Microsoft.ServiceFabric.clusters_applicationTypes#resources
   */
  readonly resources?: ClustersApplicationTypesVersionsChildResource[];

  /**
   * Azure resource tags.
   *
   * @schema Microsoft.ServiceFabric.clusters_applicationTypes#tags
   */
  readonly tags?: MicrosoftServiceFabricClustersApplicationTypesTags;

  /**
   * @schema Microsoft.ServiceFabric.clusters_applicationTypes#type
   */
  readonly type: MicrosoftServiceFabricClustersApplicationTypesType;

}

/**
 * Microsoft.ServiceFabric/clusters/applicationTypes/versions
 *
 * @schema Microsoft.ServiceFabric.clusters_applicationTypes_versions
 */
export interface ClustersApplicationTypesVersionsOptions {
  /**
   * @schema Microsoft.ServiceFabric.clusters_applicationTypes_versions#apiVersion
   */
  readonly apiVersion?: MicrosoftServiceFabricClustersApplicationTypesVersionsApiVersion;

  /**
   * It will be deprecated in New API, resource location depends on the parent resource.
   *
   * @schema Microsoft.ServiceFabric.clusters_applicationTypes_versions#location
   */
  readonly location?: string;

  /**
   * The application type version.
   *
   * @schema Microsoft.ServiceFabric.clusters_applicationTypes_versions#name
   */
  readonly name: string;

  /**
   * The properties of the application type version resource.
   *
   * @schema Microsoft.ServiceFabric.clusters_applicationTypes_versions#properties
   */
  readonly properties: ApplicationTypeVersionResourceProperties;

  /**
   * Azure resource tags.
   *
   * @schema Microsoft.ServiceFabric.clusters_applicationTypes_versions#tags
   */
  readonly tags?: MicrosoftServiceFabricClustersApplicationTypesVersionsTags;

  /**
   * @schema Microsoft.ServiceFabric.clusters_applicationTypes_versions#type
   */
  readonly type: MicrosoftServiceFabricClustersApplicationTypesVersionsType;

}

export enum MicrosoftServiceFabricClustersApiVersion {
  "MicrosoftServiceFabricClustersApiVersion_2020_03_01" = '2020-03-01',
}

/**
 * Describes the cluster resource properties.
 *
 * @schema #/definitions/ClusterProperties
 */
export interface ClusterProperties {
  /**
   * The list of add-on features to enable in the cluster.
   *
   * @schema #/definitions/ClusterProperties#addOnFeatures
   */
  readonly addOnFeatures?: ClusterPropertiesAddOnFeatures[];

  /**
   * @schema #/definitions/ClusterProperties#applicationTypeVersionsCleanupPolicy
   */
  readonly applicationTypeVersionsCleanupPolicy?: ApplicationTypeVersionsCleanupPolicy;

  /**
   * The settings to enable AAD authentication on the cluster.
   *
   * @schema #/definitions/ClusterProperties#azureActiveDirectory
   */
  readonly azureActiveDirectory?: AzureActiveDirectory;

  /**
   * Describes the certificate details.
   *
   * @schema #/definitions/ClusterProperties#certificate
   */
  readonly certificate?: CertificateDescription;

  /**
   * Describes a list of server certificates referenced by common name that are used to secure the cluster.
   *
   * @schema #/definitions/ClusterProperties#certificateCommonNames
   */
  readonly certificateCommonNames?: ServerCertificateCommonNames;

  /**
   * The list of client certificates referenced by common name that are allowed to manage the cluster.
   *
   * @schema #/definitions/ClusterProperties#clientCertificateCommonNames
   */
  readonly clientCertificateCommonNames?: ClientCertificateCommonName[];

  /**
   * The list of client certificates referenced by thumbprint that are allowed to manage the cluster.
   *
   * @schema #/definitions/ClusterProperties#clientCertificateThumbprints
   */
  readonly clientCertificateThumbprints?: ClientCertificateThumbprint[];

  /**
   * The Service Fabric runtime version of the cluster. This property can only by set the user when **upgradeMode** is set to 'Manual'. To get list of available Service Fabric versions for new clusters use [ClusterVersion API](./ClusterVersion.md). To get the list of available version for existing clusters use **availableClusterVersions**.
   *
   * @schema #/definitions/ClusterProperties#clusterCodeVersion
   */
  readonly clusterCodeVersion?: string;

  /**
   * The storage account information for storing Service Fabric diagnostic logs.
   *
   * @schema #/definitions/ClusterProperties#diagnosticsStorageAccountConfig
   */
  readonly diagnosticsStorageAccountConfig?: DiagnosticsStorageAccountConfig;

  /**
   * Indicates if the event store service is enabled.
   *
   * @schema #/definitions/ClusterProperties#eventStoreServiceEnabled
   */
  readonly eventStoreServiceEnabled?: boolean;

  /**
   * The list of custom fabric settings to configure the cluster.
   *
   * @schema #/definitions/ClusterProperties#fabricSettings
   */
  readonly fabricSettings?: SettingsSectionDescription[];

  /**
   * The http management endpoint of the cluster.
   *
   * @schema #/definitions/ClusterProperties#managementEndpoint
   */
  readonly managementEndpoint: string;

  /**
   * The list of node types in the cluster.
   *
   * @schema #/definitions/ClusterProperties#nodeTypes
   */
  readonly nodeTypes: NodeTypeDescription[];

  /**
   * The reliability level sets the replica set size of system services. Learn about [ReliabilityLevel](https://docs.microsoft.com/azure/service-fabric/service-fabric-cluster-capacity).

  - None - Run the System services with a target replica set count of 1. This should only be used for test clusters.
  - Bronze - Run the System services with a target replica set count of 3. This should only be used for test clusters.
  - Silver - Run the System services with a target replica set count of 5.
  - Gold - Run the System services with a target replica set count of 7.
  - Platinum - Run the System services with a target replica set count of 9.
.
   *
   * @schema #/definitions/ClusterProperties#reliabilityLevel
   */
  readonly reliabilityLevel?: ClusterPropertiesReliabilityLevel;

  /**
   * Describes the certificate details.
   *
   * @schema #/definitions/ClusterProperties#reverseProxyCertificate
   */
  readonly reverseProxyCertificate?: CertificateDescription;

  /**
   * Describes a list of server certificates referenced by common name that are used to secure the cluster.
   *
   * @schema #/definitions/ClusterProperties#reverseProxyCertificateCommonNames
   */
  readonly reverseProxyCertificateCommonNames?: ServerCertificateCommonNames;

  /**
   * Describes the policy used when upgrading the cluster.
   *
   * @schema #/definitions/ClusterProperties#upgradeDescription
   */
  readonly upgradeDescription?: ClusterUpgradePolicy;

  /**
   * The upgrade mode of the cluster when new Service Fabric runtime version is available.

  - Automatic - The cluster will be automatically upgraded to the latest Service Fabric runtime version as soon as it is available.
  - Manual - The cluster will not be automatically upgraded to the latest Service Fabric runtime version. The cluster is upgraded by setting the **clusterCodeVersion** property in the cluster resource.
.
   *
   * @schema #/definitions/ClusterProperties#upgradeMode
   */
  readonly upgradeMode?: ClusterPropertiesUpgradeMode;

  /**
   * The VM image VMSS has been configured with. Generic names such as Windows or Linux can be used.
   *
   * @schema #/definitions/ClusterProperties#vmImage
   */
  readonly vmImage?: string;

}

/**
 * @schema MicrosoftServiceFabricClustersResources
 */
export class MicrosoftServiceFabricClustersResources {
  public static fromClustersApplicationTypesChildResource(value: ClustersApplicationTypesChildResource): MicrosoftServiceFabricClustersResources {
    return new MicrosoftServiceFabricClustersResources(value);
  }
  public static fromClustersApplicationsChildResource(value: ClustersApplicationsChildResource): MicrosoftServiceFabricClustersResources {
    return new MicrosoftServiceFabricClustersResources(value);
  }
  private constructor(value: any) {
    Object.defineProperty(this, 'resolve', { value: () => value });
  }
}

/**
 * @schema MicrosoftServiceFabricClustersTags
 */
export interface MicrosoftServiceFabricClustersTags {
}

export enum MicrosoftServiceFabricClustersType {
  "MicrosoftServiceFabricClustersType_MICROSOFT_SERVICE_FABRIC_CLUSTERS" = 'Microsoft.ServiceFabric/clusters',
}

export enum MicrosoftServiceFabricClustersApplicationsApiVersion {
  "MicrosoftServiceFabricClustersApplicationsApiVersion_2020_03_01" = '2020-03-01',
}

/**
 * Describes the managed identities for an Azure resource.
 *
 * @schema #/definitions/ManagedIdentity
 */
export interface ManagedIdentity {
  /**
   * The type of managed identity for the resource.
   *
   * @schema #/definitions/ManagedIdentity#type
   */
  readonly type?: ManagedIdentityType;

  /**
   * The list of user identities associated with the resource. The user identity dictionary key references will be ARM resource ids in the form:
'/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'.

   *
   * @schema #/definitions/ManagedIdentity#userAssignedIdentities
   */
  readonly userAssignedIdentities?: ManagedIdentityUserAssignedIdentities;

}

/**
 * The application resource properties.
 *
 * @schema #/definitions/ApplicationResourceProperties
 */
export interface ApplicationResourceProperties {
  /**
   * List of user assigned identities for the application, each mapped to a friendly name.
   *
   * @schema #/definitions/ApplicationResourceProperties#managedIdentities
   */
  readonly managedIdentities?: ApplicationUserAssignedIdentity[];

  /**
   * The maximum number of nodes where Service Fabric will reserve capacity for this application. Note that this does not mean that the services of this application will be placed on all of those nodes. By default, the value of this property is zero and it means that the services can be placed on any node.
   *
   * @schema #/definitions/ApplicationResourceProperties#maximumNodes
   */
  readonly maximumNodes?: number;

  /**
   * List of application capacity metric description.
   *
   * @schema #/definitions/ApplicationResourceProperties#metrics
   */
  readonly metrics?: ApplicationMetricDescription[];

  /**
   * The minimum number of nodes where Service Fabric will reserve capacity for this application. Note that this does not mean that the services of this application will be placed on all of those nodes. If this property is set to zero, no capacity will be reserved. The value of this property cannot be more than the value of the MaximumNodes property.
   *
   * @schema #/definitions/ApplicationResourceProperties#minimumNodes
   */
  readonly minimumNodes?: number;

  /**
   * List of application parameters with overridden values from their default values specified in the application manifest.
   *
   * @schema #/definitions/ApplicationResourceProperties#parameters
   */
  readonly parameters?: ApplicationResourcePropertiesParameters;

  /**
   * Remove the current application capacity settings.
   *
   * @schema #/definitions/ApplicationResourceProperties#removeApplicationCapacity
   */
  readonly removeApplicationCapacity?: boolean;

  /**
   * The application type name as defined in the application manifest.
   *
   * @schema #/definitions/ApplicationResourceProperties#typeName
   */
  readonly typeName?: string;

  /**
   * The version of the application type as defined in the application manifest.
   *
   * @schema #/definitions/ApplicationResourceProperties#typeVersion
   */
  readonly typeVersion?: string;

  /**
   * Describes the policy for a monitored application upgrade.
   *
   * @schema #/definitions/ApplicationResourceProperties#upgradePolicy
   */
  readonly upgradePolicy?: ApplicationUpgradePolicy;

}

/**
 * Microsoft.ServiceFabric/clusters/applications/services
 *
 * @schema #/definitions/clusters_applications_services_childResource
 */
export interface ClustersApplicationsServicesChildResource {
  /**
   * @schema #/definitions/clusters_applications_services_childResource#apiVersion
   */
  readonly apiVersion: ClustersApplicationsServicesChildResourceApiVersion;

  /**
   * It will be deprecated in New API, resource location depends on the parent resource.
   *
   * @schema #/definitions/clusters_applications_services_childResource#location
   */
  readonly location?: string;

  /**
   * The name of the service resource in the format of {applicationName}~{serviceName}.
   *
   * @schema #/definitions/clusters_applications_services_childResource#name
   */
  readonly name: string;

  /**
   * The service resource properties.
   *
   * @schema #/definitions/clusters_applications_services_childResource#properties
   */
  readonly properties: ServiceResourceProperties;

  /**
   * Azure resource tags.
   *
   * @schema #/definitions/clusters_applications_services_childResource#tags
   */
  readonly tags?: ClustersApplicationsServicesChildResourceTags;

  /**
   * @schema #/definitions/clusters_applications_services_childResource#type
   */
  readonly type: ClustersApplicationsServicesChildResourceType;

}

/**
 * @schema MicrosoftServiceFabricClustersApplicationsTags
 */
export interface MicrosoftServiceFabricClustersApplicationsTags {
}

export enum MicrosoftServiceFabricClustersApplicationsType {
  "MicrosoftServiceFabricClustersApplicationsType_MICROSOFT_SERVICE_FABRIC_CLUSTERS_APPLICATIONS" = 'Microsoft.ServiceFabric/clusters/applications',
}

export enum MicrosoftServiceFabricClustersApplicationsServicesApiVersion {
  "MicrosoftServiceFabricClustersApplicationsServicesApiVersion_2020_03_01" = '2020-03-01',
}

/**
 * The service resource properties.
 *
 * @schema #/definitions/ServiceResourceProperties
 */
export class ServiceResourceProperties {
  public static fromStatefulServiceProperties(value: StatefulServiceProperties): ServiceResourceProperties {
    return new ServiceResourceProperties(value);
  }
  public static fromStatelessServiceProperties(value: StatelessServiceProperties): ServiceResourceProperties {
    return new ServiceResourceProperties(value);
  }
  private constructor(value: any) {
    Object.defineProperty(this, 'resolve', { value: () => value });
  }
}

/**
 * @schema MicrosoftServiceFabricClustersApplicationsServicesTags
 */
export interface MicrosoftServiceFabricClustersApplicationsServicesTags {
}

export enum MicrosoftServiceFabricClustersApplicationsServicesType {
  "MicrosoftServiceFabricClustersApplicationsServicesType_MICROSOFT_SERVICE_FABRIC_CLUSTERS_APPLICATIONS_SERVICES" = 'Microsoft.ServiceFabric/clusters/applications/services',
}

export enum MicrosoftServiceFabricClustersApplicationTypesApiVersion {
  "MicrosoftServiceFabricClustersApplicationTypesApiVersion_2020_03_01" = '2020-03-01',
}

/**
 * The application type name properties
 *
 * @schema #/definitions/ApplicationTypeResourceProperties
 */
export interface ApplicationTypeResourceProperties {
}

/**
 * Microsoft.ServiceFabric/clusters/applicationTypes/versions
 *
 * @schema #/definitions/clusters_applicationTypes_versions_childResource
 */
export interface ClustersApplicationTypesVersionsChildResource {
  /**
   * @schema #/definitions/clusters_applicationTypes_versions_childResource#apiVersion
   */
  readonly apiVersion: ClustersApplicationTypesVersionsChildResourceApiVersion;

  /**
   * It will be deprecated in New API, resource location depends on the parent resource.
   *
   * @schema #/definitions/clusters_applicationTypes_versions_childResource#location
   */
  readonly location?: string;

  /**
   * The application type version.
   *
   * @schema #/definitions/clusters_applicationTypes_versions_childResource#name
   */
  readonly name: string;

  /**
   * The properties of the application type version resource.
   *
   * @schema #/definitions/clusters_applicationTypes_versions_childResource#properties
   */
  readonly properties: ApplicationTypeVersionResourceProperties;

  /**
   * Azure resource tags.
   *
   * @schema #/definitions/clusters_applicationTypes_versions_childResource#tags
   */
  readonly tags?: ClustersApplicationTypesVersionsChildResourceTags;

  /**
   * @schema #/definitions/clusters_applicationTypes_versions_childResource#type
   */
  readonly type: ClustersApplicationTypesVersionsChildResourceType;

}

/**
 * @schema MicrosoftServiceFabricClustersApplicationTypesTags
 */
export interface MicrosoftServiceFabricClustersApplicationTypesTags {
}

export enum MicrosoftServiceFabricClustersApplicationTypesType {
  "MicrosoftServiceFabricClustersApplicationTypesType_MICROSOFT_SERVICE_FABRIC_CLUSTERS_APPLICATION_TYPES" = 'Microsoft.ServiceFabric/clusters/applicationTypes',
}

export enum MicrosoftServiceFabricClustersApplicationTypesVersionsApiVersion {
  "MicrosoftServiceFabricClustersApplicationTypesVersionsApiVersion_2020_03_01" = '2020-03-01',
}

/**
 * The properties of the application type version resource.
 *
 * @schema #/definitions/ApplicationTypeVersionResourceProperties
 */
export interface ApplicationTypeVersionResourceProperties {
  /**
   * The URL to the application package
   *
   * @schema #/definitions/ApplicationTypeVersionResourceProperties#appPackageUrl
   */
  readonly appPackageUrl: string;

}

/**
 * @schema MicrosoftServiceFabricClustersApplicationTypesVersionsTags
 */
export interface MicrosoftServiceFabricClustersApplicationTypesVersionsTags {
}

export enum MicrosoftServiceFabricClustersApplicationTypesVersionsType {
  "MicrosoftServiceFabricClustersApplicationTypesVersionsType_MICROSOFT_SERVICE_FABRIC_CLUSTERS_APPLICATION_TYPES_VERSIONS" = 'Microsoft.ServiceFabric/clusters/applicationTypes/versions',
}

export enum ClusterPropertiesAddOnFeatures {
  REPAIR_MANAGER = 'RepairManager',
  DNS_SERVICE = 'DnsService',
  BACKUP_RESTORE_SERVICE = 'BackupRestoreService',
  RESOURCE_MONITOR_SERVICE = 'ResourceMonitorService',
}

/**
 * @schema #/definitions/ApplicationTypeVersionsCleanupPolicy
 */
export interface ApplicationTypeVersionsCleanupPolicy {
  /**
   * Number of unused versions per application type to keep.
   *
   * @schema #/definitions/ApplicationTypeVersionsCleanupPolicy#maxUnusedVersionsToKeep
   */
  readonly maxUnusedVersionsToKeep: number;

}

/**
 * The settings to enable AAD authentication on the cluster.
 *
 * @schema #/definitions/AzureActiveDirectory
 */
export interface AzureActiveDirectory {
  /**
   * Azure active directory client application id.
   *
   * @schema #/definitions/AzureActiveDirectory#clientApplication
   */
  readonly clientApplication?: string;

  /**
   * Azure active directory cluster application id.
   *
   * @schema #/definitions/AzureActiveDirectory#clusterApplication
   */
  readonly clusterApplication?: string;

  /**
   * Azure active directory tenant id.
   *
   * @schema #/definitions/AzureActiveDirectory#tenantId
   */
  readonly tenantId?: string;

}

/**
 * Describes the certificate details.
 *
 * @schema #/definitions/CertificateDescription
 */
export interface CertificateDescription {
  /**
   * Thumbprint of the primary certificate.
   *
   * @schema #/definitions/CertificateDescription#thumbprint
   */
  readonly thumbprint: string;

  /**
   * Thumbprint of the secondary certificate.
   *
   * @schema #/definitions/CertificateDescription#thumbprintSecondary
   */
  readonly thumbprintSecondary?: string;

  /**
   * The local certificate store location.
   *
   * @schema #/definitions/CertificateDescription#x509StoreName
   */
  readonly x509StoreName?: CertificateDescriptionX509StoreName;

}

/**
 * Describes a list of server certificates referenced by common name that are used to secure the cluster.
 *
 * @schema #/definitions/ServerCertificateCommonNames
 */
export interface ServerCertificateCommonNames {
  /**
   * The list of server certificates referenced by common name that are used to secure the cluster.
   *
   * @schema #/definitions/ServerCertificateCommonNames#commonNames
   */
  readonly commonNames?: ServerCertificateCommonName[];

  /**
   * The local certificate store location.
   *
   * @schema #/definitions/ServerCertificateCommonNames#x509StoreName
   */
  readonly x509StoreName?: ServerCertificateCommonNamesX509StoreName;

}

/**
 * Describes the client certificate details using common name.
 *
 * @schema #/definitions/ClientCertificateCommonName
 */
export interface ClientCertificateCommonName {
  /**
   * The common name of the client certificate.
   *
   * @schema #/definitions/ClientCertificateCommonName#certificateCommonName
   */
  readonly certificateCommonName: string;

  /**
   * The issuer thumbprint of the client certificate.
   *
   * @schema #/definitions/ClientCertificateCommonName#certificateIssuerThumbprint
   */
  readonly certificateIssuerThumbprint: string;

  /**
   * Indicates if the client certificate has admin access to the cluster. Non admin clients can perform only read only operations on the cluster.
   *
   * @schema #/definitions/ClientCertificateCommonName#isAdmin
   */
  readonly isAdmin: boolean;

}

/**
 * Describes the client certificate details using thumbprint.
 *
 * @schema #/definitions/ClientCertificateThumbprint
 */
export interface ClientCertificateThumbprint {
  /**
   * The thumbprint of the client certificate.
   *
   * @schema #/definitions/ClientCertificateThumbprint#certificateThumbprint
   */
  readonly certificateThumbprint: string;

  /**
   * Indicates if the client certificate has admin access to the cluster. Non admin clients can perform only read only operations on the cluster.
   *
   * @schema #/definitions/ClientCertificateThumbprint#isAdmin
   */
  readonly isAdmin: boolean;

}

/**
 * The storage account information for storing Service Fabric diagnostic logs.
 *
 * @schema #/definitions/DiagnosticsStorageAccountConfig
 */
export interface DiagnosticsStorageAccountConfig {
  /**
   * The blob endpoint of the azure storage account.
   *
   * @schema #/definitions/DiagnosticsStorageAccountConfig#blobEndpoint
   */
  readonly blobEndpoint: string;

  /**
   * The protected diagnostics storage key name.
   *
   * @schema #/definitions/DiagnosticsStorageAccountConfig#protectedAccountKeyName
   */
  readonly protectedAccountKeyName: string;

  /**
   * The protected diagnostics storage key name.
   *
   * @schema #/definitions/DiagnosticsStorageAccountConfig#protectedAccountKeyName2
   */
  readonly protectedAccountKeyName2?: string;

  /**
   * The queue endpoint of the azure storage account.
   *
   * @schema #/definitions/DiagnosticsStorageAccountConfig#queueEndpoint
   */
  readonly queueEndpoint: string;

  /**
   * The Azure storage account name.
   *
   * @schema #/definitions/DiagnosticsStorageAccountConfig#storageAccountName
   */
  readonly storageAccountName: string;

  /**
   * The table endpoint of the azure storage account.
   *
   * @schema #/definitions/DiagnosticsStorageAccountConfig#tableEndpoint
   */
  readonly tableEndpoint: string;

}

/**
 * Describes a section in the fabric settings of the cluster.
 *
 * @schema #/definitions/SettingsSectionDescription
 */
export interface SettingsSectionDescription {
  /**
   * The section name of the fabric settings.
   *
   * @schema #/definitions/SettingsSectionDescription#name
   */
  readonly name: string;

  /**
   * The collection of parameters in the section.
   *
   * @schema #/definitions/SettingsSectionDescription#parameters
   */
  readonly parameters: SettingsParameterDescription[];

}

/**
 * Describes a node type in the cluster, each node type represents sub set of nodes in the cluster.
 *
 * @schema #/definitions/NodeTypeDescription
 */
export interface NodeTypeDescription {
  /**
   * Port range details
   *
   * @schema #/definitions/NodeTypeDescription#applicationPorts
   */
  readonly applicationPorts?: EndpointRangeDescription;

  /**
   * The capacity tags applied to the nodes in the node type, the cluster resource manager uses these tags to understand how much resource a node has.
   *
   * @schema #/definitions/NodeTypeDescription#capacities
   */
  readonly capacities?: NodeTypeDescriptionCapacities;

  /**
   * The TCP cluster management endpoint port.
   *
   * @schema #/definitions/NodeTypeDescription#clientConnectionEndpointPort
   */
  readonly clientConnectionEndpointPort: number;

  /**
   * The durability level of the node type. Learn about [DurabilityLevel](https://docs.microsoft.com/azure/service-fabric/service-fabric-cluster-capacity).

  - Bronze - No privileges. This is the default.
  - Silver - The infrastructure jobs can be paused for a duration of 10 minutes per UD.
  - Gold - The infrastructure jobs can be paused for a duration of 2 hours per UD. Gold durability can be enabled only on full node VM skus like D15_V2, G5 etc.
.
   *
   * @schema #/definitions/NodeTypeDescription#durabilityLevel
   */
  readonly durabilityLevel?: NodeTypeDescriptionDurabilityLevel;

  /**
   * Port range details
   *
   * @schema #/definitions/NodeTypeDescription#ephemeralPorts
   */
  readonly ephemeralPorts?: EndpointRangeDescription;

  /**
   * The HTTP cluster management endpoint port.
   *
   * @schema #/definitions/NodeTypeDescription#httpGatewayEndpointPort
   */
  readonly httpGatewayEndpointPort: number;

  /**
   * The node type on which system services will run. Only one node type should be marked as primary. Primary node type cannot be deleted or changed for existing clusters.
   *
   * @schema #/definitions/NodeTypeDescription#isPrimary
   */
  readonly isPrimary: boolean;

  /**
   * The name of the node type.
   *
   * @schema #/definitions/NodeTypeDescription#name
   */
  readonly name: string;

  /**
   * The placement tags applied to nodes in the node type, which can be used to indicate where certain services (workload) should run.
   *
   * @schema #/definitions/NodeTypeDescription#placementProperties
   */
  readonly placementProperties?: NodeTypeDescriptionPlacementProperties;

  /**
   * The endpoint used by reverse proxy.
   *
   * @schema #/definitions/NodeTypeDescription#reverseProxyEndpointPort
   */
  readonly reverseProxyEndpointPort?: number;

  /**
   * The number of nodes in the node type. This count should match the capacity property in the corresponding VirtualMachineScaleSet resource.
   *
   * @schema #/definitions/NodeTypeDescription#vmInstanceCount
   */
  readonly vmInstanceCount: number;

}

export enum ClusterPropertiesReliabilityLevel {
  NONE = 'None',
  BRONZE = 'Bronze',
  SILVER = 'Silver',
  GOLD = 'Gold',
  PLATINUM = 'Platinum',
}

/**
 * Describes the policy used when upgrading the cluster.
 *
 * @schema #/definitions/ClusterUpgradePolicy
 */
export interface ClusterUpgradePolicy {
  /**
   * Describes the delta health policies for the cluster upgrade.
   *
   * @schema #/definitions/ClusterUpgradePolicy#deltaHealthPolicy
   */
  readonly deltaHealthPolicy?: ClusterUpgradeDeltaHealthPolicy;

  /**
   * If true, then processes are forcefully restarted during upgrade even when the code version has not changed (the upgrade only changes configuration or data).
   *
   * @schema #/definitions/ClusterUpgradePolicy#forceRestart
   */
  readonly forceRestart?: boolean;

  /**
   * The amount of time to retry health evaluation when the application or cluster is unhealthy before the upgrade rolls back. The timeout can be in either hh:mm:ss or in d.hh:mm:ss.ms format.
   *
   * @schema #/definitions/ClusterUpgradePolicy#healthCheckRetryTimeout
   */
  readonly healthCheckRetryTimeout: string;

  /**
   * The amount of time that the application or cluster must remain healthy before the upgrade proceeds to the next upgrade domain. The duration can be in either hh:mm:ss or in d.hh:mm:ss.ms format.
   *
   * @schema #/definitions/ClusterUpgradePolicy#healthCheckStableDuration
   */
  readonly healthCheckStableDuration: string;

  /**
   * The length of time to wait after completing an upgrade domain before performing health checks. The duration can be in either hh:mm:ss or in d.hh:mm:ss.ms format.
   *
   * @schema #/definitions/ClusterUpgradePolicy#healthCheckWaitDuration
   */
  readonly healthCheckWaitDuration: string;

  /**
   * Defines a health policy used to evaluate the health of the cluster or of a cluster node.

   *
   * @schema #/definitions/ClusterUpgradePolicy#healthPolicy
   */
  readonly healthPolicy: ClusterHealthPolicy;

  /**
   * The amount of time each upgrade domain has to complete before the upgrade rolls back. The timeout can be in either hh:mm:ss or in d.hh:mm:ss.ms format.
   *
   * @schema #/definitions/ClusterUpgradePolicy#upgradeDomainTimeout
   */
  readonly upgradeDomainTimeout: string;

  /**
   * The maximum amount of time to block processing of an upgrade domain and prevent loss of availability when there are unexpected issues. When this timeout expires, processing of the upgrade domain will proceed regardless of availability loss issues. The timeout is reset at the start of each upgrade domain. The timeout can be in either hh:mm:ss or in d.hh:mm:ss.ms format.
   *
   * @schema #/definitions/ClusterUpgradePolicy#upgradeReplicaSetCheckTimeout
   */
  readonly upgradeReplicaSetCheckTimeout: string;

  /**
   * The amount of time the overall upgrade has to complete before the upgrade rolls back. The timeout can be in either hh:mm:ss or in d.hh:mm:ss.ms format.
   *
   * @schema #/definitions/ClusterUpgradePolicy#upgradeTimeout
   */
  readonly upgradeTimeout: string;

}

export enum ClusterPropertiesUpgradeMode {
  AUTOMATIC = 'Automatic',
  MANUAL = 'Manual',
}

/**
 * Microsoft.ServiceFabric/clusters/applicationTypes
 *
 * @schema #/definitions/clusters_applicationTypes_childResource
 */
export interface ClustersApplicationTypesChildResource {
  /**
   * @schema #/definitions/clusters_applicationTypes_childResource#apiVersion
   */
  readonly apiVersion: ClustersApplicationTypesChildResourceApiVersion;

  /**
   * It will be deprecated in New API, resource location depends on the parent resource.
   *
   * @schema #/definitions/clusters_applicationTypes_childResource#location
   */
  readonly location?: string;

  /**
   * The name of the application type name resource.
   *
   * @schema #/definitions/clusters_applicationTypes_childResource#name
   */
  readonly name: string;

  /**
   * The application type name properties
   *
   * @schema #/definitions/clusters_applicationTypes_childResource#properties
   */
  readonly properties: ApplicationTypeResourceProperties;

  /**
   * Azure resource tags.
   *
   * @schema #/definitions/clusters_applicationTypes_childResource#tags
   */
  readonly tags?: ClustersApplicationTypesChildResourceTags;

  /**
   * @schema #/definitions/clusters_applicationTypes_childResource#type
   */
  readonly type: ClustersApplicationTypesChildResourceType;

}

/**
 * Microsoft.ServiceFabric/clusters/applications
 *
 * @schema #/definitions/clusters_applications_childResource
 */
export interface ClustersApplicationsChildResource {
  /**
   * @schema #/definitions/clusters_applications_childResource#apiVersion
   */
  readonly apiVersion: ClustersApplicationsChildResourceApiVersion;

  /**
   * Describes the managed identities for an Azure resource.
   *
   * @schema #/definitions/clusters_applications_childResource#identity
   */
  readonly identity?: ManagedIdentity;

  /**
   * It will be deprecated in New API, resource location depends on the parent resource.
   *
   * @schema #/definitions/clusters_applications_childResource#location
   */
  readonly location?: string;

  /**
   * The name of the application resource.
   *
   * @schema #/definitions/clusters_applications_childResource#name
   */
  readonly name: string;

  /**
   * The application resource properties.
   *
   * @schema #/definitions/clusters_applications_childResource#properties
   */
  readonly properties: ApplicationResourceProperties;

  /**
   * Azure resource tags.
   *
   * @schema #/definitions/clusters_applications_childResource#tags
   */
  readonly tags?: ClustersApplicationsChildResourceTags;

  /**
   * @schema #/definitions/clusters_applications_childResource#type
   */
  readonly type: ClustersApplicationsChildResourceType;

}

export enum ManagedIdentityType {
  SYSTEM_ASSIGNED = 'SystemAssigned',
  USER_ASSIGNED = 'UserAssigned',
  "ManagedIdentityType_SYSTEM_ASSIGNED_USER_ASSIGNED" = 'SystemAssigned, UserAssigned',
  NONE = 'None',
}

/**
 * @schema #/definitions/managedIdentityUserAssignedIdentities
 */
export interface ManagedIdentityUserAssignedIdentities {
}

/**
 * @schema #/definitions/ApplicationUserAssignedIdentity
 */
export interface ApplicationUserAssignedIdentity {
  /**
   * The friendly name of user assigned identity.
   *
   * @schema #/definitions/ApplicationUserAssignedIdentity#name
   */
  readonly name: string;

  /**
   * The principal id of user assigned identity.
   *
   * @schema #/definitions/ApplicationUserAssignedIdentity#principalId
   */
  readonly principalId: string;

}

/**
 * Describes capacity information for a custom resource balancing metric. This can be used to limit the total consumption of this metric by the services of this application.

 *
 * @schema #/definitions/ApplicationMetricDescription
 */
export interface ApplicationMetricDescription {
  /**
   * The maximum node capacity for Service Fabric application.
This is the maximum Load for an instance of this application on a single node. Even if the capacity of node is greater than this value, Service Fabric will limit the total load of services within the application on each node to this value.
If set to zero, capacity for this metric is unlimited on each node.
When creating a new application with application capacity defined, the product of MaximumNodes and this value must always be smaller than or equal to TotalApplicationCapacity.
When updating existing application with application capacity, the product of MaximumNodes and this value must always be smaller than or equal to TotalApplicationCapacity.

   *
   * @schema #/definitions/ApplicationMetricDescription#maximumCapacity
   */
  readonly maximumCapacity?: number;

  /**
   * The name of the metric.
   *
   * @schema #/definitions/ApplicationMetricDescription#name
   */
  readonly name?: string;

  /**
   * The node reservation capacity for Service Fabric application.
This is the amount of load which is reserved on nodes which have instances of this application.
If MinimumNodes is specified, then the product of these values will be the capacity reserved in the cluster for the application.
If set to zero, no capacity is reserved for this metric.
When setting application capacity or when updating application capacity; this value must be smaller than or equal to MaximumCapacity for each metric.

   *
   * @schema #/definitions/ApplicationMetricDescription#reservationCapacity
   */
  readonly reservationCapacity?: number;

  /**
   * The total metric capacity for Service Fabric application.
This is the total metric capacity for this application in the cluster. Service Fabric will try to limit the sum of loads of services within the application to this value.
When creating a new application with application capacity defined, the product of MaximumNodes and MaximumCapacity must always be smaller than or equal to this value.

   *
   * @schema #/definitions/ApplicationMetricDescription#totalApplicationCapacity
   */
  readonly totalApplicationCapacity?: number;

}

/**
 * @schema #/definitions/applicationResourcePropertiesParameters
 */
export interface ApplicationResourcePropertiesParameters {
}

/**
 * Describes the policy for a monitored application upgrade.
 *
 * @schema #/definitions/ApplicationUpgradePolicy
 */
export interface ApplicationUpgradePolicy {
  /**
   * Defines a health policy used to evaluate the health of an application or one of its children entities.

   *
   * @schema #/definitions/ApplicationUpgradePolicy#applicationHealthPolicy
   */
  readonly applicationHealthPolicy?: ArmApplicationHealthPolicy;

  /**
   * If true, then processes are forcefully restarted during upgrade even when the code version has not changed (the upgrade only changes configuration or data).
   *
   * @schema #/definitions/ApplicationUpgradePolicy#forceRestart
   */
  readonly forceRestart?: boolean;

  /**
   * The policy used for monitoring the application upgrade
   *
   * @schema #/definitions/ApplicationUpgradePolicy#rollingUpgradeMonitoringPolicy
   */
  readonly rollingUpgradeMonitoringPolicy?: ArmRollingUpgradeMonitoringPolicy;

  /**
   * The mode used to monitor health during a rolling upgrade. The values are UnmonitoredAuto, UnmonitoredManual, and Monitored.
   *
   * @schema #/definitions/ApplicationUpgradePolicy#upgradeMode
   */
  readonly upgradeMode?: ApplicationUpgradePolicyUpgradeMode;

  /**
   * The maximum amount of time to block processing of an upgrade domain and prevent loss of availability when there are unexpected issues. When this timeout expires, processing of the upgrade domain will proceed regardless of availability loss issues. The timeout is reset at the start of each upgrade domain. Valid values are between 0 and 42949672925 inclusive. (unsigned 32-bit integer).
   *
   * @schema #/definitions/ApplicationUpgradePolicy#upgradeReplicaSetCheckTimeout
   */
  readonly upgradeReplicaSetCheckTimeout?: string;

}

export enum ClustersApplicationsServicesChildResourceApiVersion {
  "ClustersApplicationsServicesChildResourceApiVersion_2020_03_01" = '2020-03-01',
}

/**
 * @schema #/definitions/clustersApplicationsServicesChildResourceTags
 */
export interface ClustersApplicationsServicesChildResourceTags {
}

export enum ClustersApplicationsServicesChildResourceType {
  SERVICES = 'services',
}

/**
 * The properties of a stateful service resource.
 *
 * @schema #/definitions/StatefulServiceProperties
 */
export interface StatefulServiceProperties {
  /**
   * A flag indicating whether this is a persistent service which stores states on the local disk. If it is then the value of this property is true, if not it is false.
   *
   * @schema #/definitions/StatefulServiceProperties#hasPersistedState
   */
  readonly hasPersistedState?: boolean;

  /**
   * The minimum replica set size as a number.
   *
   * @schema #/definitions/StatefulServiceProperties#minReplicaSetSize
   */
  readonly minReplicaSetSize?: number;

  /**
   * The maximum duration for which a partition is allowed to be in a state of quorum loss, represented in ISO 8601 format (hh:mm:ss.s).
   *
   * @schema #/definitions/StatefulServiceProperties#quorumLossWaitDuration
   */
  readonly quorumLossWaitDuration?: Date;

  /**
   * The duration between when a replica goes down and when a new replica is created, represented in ISO 8601 format (hh:mm:ss.s).
   *
   * @schema #/definitions/StatefulServiceProperties#replicaRestartWaitDuration
   */
  readonly replicaRestartWaitDuration?: Date;

  /**
   * @schema #/definitions/StatefulServiceProperties#serviceKind
   */
  readonly serviceKind: StatefulServicePropertiesServiceKind;

  /**
   * The definition on how long StandBy replicas should be maintained before being removed, represented in ISO 8601 format (hh:mm:ss.s).
   *
   * @schema #/definitions/StatefulServiceProperties#standByReplicaKeepDuration
   */
  readonly standByReplicaKeepDuration?: Date;

  /**
   * The target replica set size as a number.
   *
   * @schema #/definitions/StatefulServiceProperties#targetReplicaSetSize
   */
  readonly targetReplicaSetSize?: number;

}

/**
 * The properties of a stateless service resource.
 *
 * @schema #/definitions/StatelessServiceProperties
 */
export interface StatelessServiceProperties {
  /**
   * Delay duration for RequestDrain feature to ensures that the endpoint advertised by the stateless instance is removed before the delay starts prior to closing the instance. This delay enables existing requests to drain gracefully before the instance actually goes down (https://docs.microsoft.com/en-us/azure/service-fabric/service-fabric-application-upgrade-advanced#avoid-connection-drops-during-stateless-service-planned-downtime-preview). It is first interpreted as a string representing an ISO 8601 duration. If that fails, then it is interpreted as a number representing the total number of milliseconds.
   *
   * @schema #/definitions/StatelessServiceProperties#instanceCloseDelayDuration
   */
  readonly instanceCloseDelayDuration?: string;

  /**
   * The instance count.
   *
   * @schema #/definitions/StatelessServiceProperties#instanceCount
   */
  readonly instanceCount?: number;

  /**
   * @schema #/definitions/StatelessServiceProperties#serviceKind
   */
  readonly serviceKind: StatelessServicePropertiesServiceKind;

}

export enum ClustersApplicationTypesVersionsChildResourceApiVersion {
  "ClustersApplicationTypesVersionsChildResourceApiVersion_2020_03_01" = '2020-03-01',
}

/**
 * @schema #/definitions/clustersApplicationTypesVersionsChildResourceTags
 */
export interface ClustersApplicationTypesVersionsChildResourceTags {
}

export enum ClustersApplicationTypesVersionsChildResourceType {
  VERSIONS = 'versions',
}

export enum CertificateDescriptionX509StoreName {
  ADDRESS_BOOK = 'AddressBook',
  AUTH_ROOT = 'AuthRoot',
  CERTIFICATE_AUTHORITY = 'CertificateAuthority',
  DISALLOWED = 'Disallowed',
  MY = 'My',
  ROOT = 'Root',
  TRUSTED_PEOPLE = 'TrustedPeople',
  TRUSTED_PUBLISHER = 'TrustedPublisher',
}

/**
 * Describes the server certificate details using common name.
 *
 * @schema #/definitions/ServerCertificateCommonName
 */
export interface ServerCertificateCommonName {
  /**
   * The common name of the server certificate.
   *
   * @schema #/definitions/ServerCertificateCommonName#certificateCommonName
   */
  readonly certificateCommonName: string;

  /**
   * The issuer thumbprint of the server certificate.
   *
   * @schema #/definitions/ServerCertificateCommonName#certificateIssuerThumbprint
   */
  readonly certificateIssuerThumbprint: string;

}

export enum ServerCertificateCommonNamesX509StoreName {
  ADDRESS_BOOK = 'AddressBook',
  AUTH_ROOT = 'AuthRoot',
  CERTIFICATE_AUTHORITY = 'CertificateAuthority',
  DISALLOWED = 'Disallowed',
  MY = 'My',
  ROOT = 'Root',
  TRUSTED_PEOPLE = 'TrustedPeople',
  TRUSTED_PUBLISHER = 'TrustedPublisher',
}

/**
 * Describes a parameter in fabric settings of the cluster.
 *
 * @schema #/definitions/SettingsParameterDescription
 */
export interface SettingsParameterDescription {
  /**
   * The parameter name of fabric setting.
   *
   * @schema #/definitions/SettingsParameterDescription#name
   */
  readonly name: string;

  /**
   * The parameter value of fabric setting.
   *
   * @schema #/definitions/SettingsParameterDescription#value
   */
  readonly value: string;

}

/**
 * Port range details
 *
 * @schema #/definitions/EndpointRangeDescription
 */
export interface EndpointRangeDescription {
  /**
   * End port of a range of ports
   *
   * @schema #/definitions/EndpointRangeDescription#endPort
   */
  readonly endPort: number;

  /**
   * Starting port of a range of ports
   *
   * @schema #/definitions/EndpointRangeDescription#startPort
   */
  readonly startPort: number;

}

/**
 * @schema #/definitions/nodeTypeDescriptionCapacities
 */
export interface NodeTypeDescriptionCapacities {
}

export enum NodeTypeDescriptionDurabilityLevel {
  BRONZE = 'Bronze',
  SILVER = 'Silver',
  GOLD = 'Gold',
}

/**
 * @schema #/definitions/nodeTypeDescriptionPlacementProperties
 */
export interface NodeTypeDescriptionPlacementProperties {
}

/**
 * Describes the delta health policies for the cluster upgrade.
 *
 * @schema #/definitions/ClusterUpgradeDeltaHealthPolicy
 */
export interface ClusterUpgradeDeltaHealthPolicy {
  /**
   * Defines a map that contains specific application delta health policies for different applications.
Each entry specifies as key the application name and as value an ApplicationDeltaHealthPolicy used to evaluate the application health when upgrading the cluster.
The application name should include the 'fabric:' URI scheme.
The map is empty by default.

   *
   * @schema #/definitions/ClusterUpgradeDeltaHealthPolicy#applicationDeltaHealthPolicies
   */
  readonly applicationDeltaHealthPolicies?: ClusterUpgradeDeltaHealthPolicyApplicationDeltaHealthPolicies;

  /**
   * The maximum allowed percentage of applications health degradation allowed during cluster upgrades.
The delta is measured between the state of the applications at the beginning of upgrade and the state of the applications at the time of the health evaluation.
The check is performed after every upgrade domain upgrade completion to make sure the global state of the cluster is within tolerated limits. System services are not included in this.

   *
   * @schema #/definitions/ClusterUpgradeDeltaHealthPolicy#maxPercentDeltaUnhealthyApplications
   */
  readonly maxPercentDeltaUnhealthyApplications: number;

  /**
   * The maximum allowed percentage of nodes health degradation allowed during cluster upgrades.
The delta is measured between the state of the nodes at the beginning of upgrade and the state of the nodes at the time of the health evaluation.
The check is performed after every upgrade domain upgrade completion to make sure the global state of the cluster is within tolerated limits.

   *
   * @schema #/definitions/ClusterUpgradeDeltaHealthPolicy#maxPercentDeltaUnhealthyNodes
   */
  readonly maxPercentDeltaUnhealthyNodes: number;

  /**
   * The maximum allowed percentage of upgrade domain nodes health degradation allowed during cluster upgrades.
The delta is measured between the state of the upgrade domain nodes at the beginning of upgrade and the state of the upgrade domain nodes at the time of the health evaluation.
The check is performed after every upgrade domain upgrade completion for all completed upgrade domains to make sure the state of the upgrade domains is within tolerated limits.

   *
   * @schema #/definitions/ClusterUpgradeDeltaHealthPolicy#maxPercentUpgradeDomainDeltaUnhealthyNodes
   */
  readonly maxPercentUpgradeDomainDeltaUnhealthyNodes: number;

}

/**
 * Defines a health policy used to evaluate the health of the cluster or of a cluster node.

 *
 * @schema #/definitions/ClusterHealthPolicy
 */
export interface ClusterHealthPolicy {
  /**
   * Defines a map that contains specific application health policies for different applications.
Each entry specifies as key the application name and as value an ApplicationHealthPolicy used to evaluate the application health.
The application name should include the 'fabric:' URI scheme.
The map is empty by default.

   *
   * @schema #/definitions/ClusterHealthPolicy#applicationHealthPolicies
   */
  readonly applicationHealthPolicies?: ClusterHealthPolicyApplicationHealthPolicies;

  /**
   * The maximum allowed percentage of unhealthy applications before reporting an error. For example, to allow 10% of applications to be unhealthy, this value would be 10.

The percentage represents the maximum tolerated percentage of applications that can be unhealthy before the cluster is considered in error.
If the percentage is respected but there is at least one unhealthy application, the health is evaluated as Warning.
This is calculated by dividing the number of unhealthy applications over the total number of application instances in the cluster, excluding applications of application types that are included in the ApplicationTypeHealthPolicyMap.
The computation rounds up to tolerate one failure on small numbers of applications. Default percentage is zero.

   *
   * @schema #/definitions/ClusterHealthPolicy#maxPercentUnhealthyApplications
   */
  readonly maxPercentUnhealthyApplications?: number;

  /**
   * The maximum allowed percentage of unhealthy nodes before reporting an error. For example, to allow 10% of nodes to be unhealthy, this value would be 10.

The percentage represents the maximum tolerated percentage of nodes that can be unhealthy before the cluster is considered in error.
If the percentage is respected but there is at least one unhealthy node, the health is evaluated as Warning.
The percentage is calculated by dividing the number of unhealthy nodes over the total number of nodes in the cluster.
The computation rounds up to tolerate one failure on small numbers of nodes. Default percentage is zero.

In large clusters, some nodes will always be down or out for repairs, so this percentage should be configured to tolerate that.

   *
   * @schema #/definitions/ClusterHealthPolicy#maxPercentUnhealthyNodes
   */
  readonly maxPercentUnhealthyNodes?: number;

}

export enum ClustersApplicationTypesChildResourceApiVersion {
  "ClustersApplicationTypesChildResourceApiVersion_2020_03_01" = '2020-03-01',
}

/**
 * @schema #/definitions/clustersApplicationTypesChildResourceTags
 */
export interface ClustersApplicationTypesChildResourceTags {
}

export enum ClustersApplicationTypesChildResourceType {
  APPLICATION_TYPES = 'applicationTypes',
}

export enum ClustersApplicationsChildResourceApiVersion {
  "ClustersApplicationsChildResourceApiVersion_2020_03_01" = '2020-03-01',
}

/**
 * @schema #/definitions/clustersApplicationsChildResourceTags
 */
export interface ClustersApplicationsChildResourceTags {
}

export enum ClustersApplicationsChildResourceType {
  APPLICATIONS = 'applications',
}

/**
 * Defines a health policy used to evaluate the health of an application or one of its children entities.

 *
 * @schema #/definitions/ArmApplicationHealthPolicy
 */
export interface ArmApplicationHealthPolicy {
  /**
   * Indicates whether warnings are treated with the same severity as errors.
   *
   * @schema #/definitions/ArmApplicationHealthPolicy#considerWarningAsError
   */
  readonly considerWarningAsError?: boolean;

  /**
   * Represents the health policy used to evaluate the health of services belonging to a service type.

   *
   * @schema #/definitions/ArmApplicationHealthPolicy#defaultServiceTypeHealthPolicy
   */
  readonly defaultServiceTypeHealthPolicy?: ArmServiceTypeHealthPolicy;

  /**
   * The maximum allowed percentage of unhealthy deployed applications. Allowed values are Byte values from zero to 100.
The percentage represents the maximum tolerated percentage of deployed applications that can be unhealthy before the application is considered in error.
This is calculated by dividing the number of unhealthy deployed applications over the number of nodes where the application is currently deployed on in the cluster.
The computation rounds up to tolerate one failure on small numbers of nodes. Default percentage is zero.

   *
   * @schema #/definitions/ArmApplicationHealthPolicy#maxPercentUnhealthyDeployedApplications
   */
  readonly maxPercentUnhealthyDeployedApplications?: number;

  /**
   * Defines a ServiceTypeHealthPolicy per service type name.

The entries in the map replace the default service type health policy for each specified service type.
For example, in an application that contains both a stateless gateway service type and a stateful engine service type, the health policies for the stateless and stateful services can be configured differently.
With policy per service type, there's more granular control of the health of the service.

If no policy is specified for a service type name, the DefaultServiceTypeHealthPolicy is used for evaluation.

   *
   * @schema #/definitions/ArmApplicationHealthPolicy#serviceTypeHealthPolicyMap
   */
  readonly serviceTypeHealthPolicyMap?: ArmApplicationHealthPolicyServiceTypeHealthPolicyMap;

}

/**
 * The policy used for monitoring the application upgrade
 *
 * @schema #/definitions/ArmRollingUpgradeMonitoringPolicy
 */
export interface ArmRollingUpgradeMonitoringPolicy {
  /**
   * The activation Mode of the service package.
   *
   * @schema #/definitions/ArmRollingUpgradeMonitoringPolicy#failureAction
   */
  readonly failureAction?: ArmRollingUpgradeMonitoringPolicyFailureAction;

  /**
   * The amount of time to retry health evaluation when the application or cluster is unhealthy before FailureAction is executed. It is first interpreted as a string representing an ISO 8601 duration. If that fails, then it is interpreted as a number representing the total number of milliseconds.
   *
   * @schema #/definitions/ArmRollingUpgradeMonitoringPolicy#healthCheckRetryTimeout
   */
  readonly healthCheckRetryTimeout?: string;

  /**
   * The amount of time that the application or cluster must remain healthy before the upgrade proceeds to the next upgrade domain. It is first interpreted as a string representing an ISO 8601 duration. If that fails, then it is interpreted as a number representing the total number of milliseconds.
   *
   * @schema #/definitions/ArmRollingUpgradeMonitoringPolicy#healthCheckStableDuration
   */
  readonly healthCheckStableDuration?: string;

  /**
   * The amount of time to wait after completing an upgrade domain before applying health policies. It is first interpreted as a string representing an ISO 8601 duration. If that fails, then it is interpreted as a number representing the total number of milliseconds.
   *
   * @schema #/definitions/ArmRollingUpgradeMonitoringPolicy#healthCheckWaitDuration
   */
  readonly healthCheckWaitDuration?: string;

  /**
   * The amount of time each upgrade domain has to complete before FailureAction is executed. It is first interpreted as a string representing an ISO 8601 duration. If that fails, then it is interpreted as a number representing the total number of milliseconds.
   *
   * @schema #/definitions/ArmRollingUpgradeMonitoringPolicy#upgradeDomainTimeout
   */
  readonly upgradeDomainTimeout?: string;

  /**
   * The amount of time the overall upgrade has to complete before FailureAction is executed. It is first interpreted as a string representing an ISO 8601 duration. If that fails, then it is interpreted as a number representing the total number of milliseconds.
   *
   * @schema #/definitions/ArmRollingUpgradeMonitoringPolicy#upgradeTimeout
   */
  readonly upgradeTimeout?: string;

}

export enum ApplicationUpgradePolicyUpgradeMode {
  INVALID = 'Invalid',
  UNMONITORED_AUTO = 'UnmonitoredAuto',
  UNMONITORED_MANUAL = 'UnmonitoredManual',
  MONITORED = 'Monitored',
}

export enum StatefulServicePropertiesServiceKind {
  STATEFUL = 'Stateful',
}

export enum StatelessServicePropertiesServiceKind {
  STATELESS = 'Stateless',
}

/**
 * @schema #/definitions/clusterUpgradeDeltaHealthPolicyApplicationDeltaHealthPolicies
 */
export interface ClusterUpgradeDeltaHealthPolicyApplicationDeltaHealthPolicies {
}

/**
 * @schema #/definitions/clusterHealthPolicyApplicationHealthPolicies
 */
export interface ClusterHealthPolicyApplicationHealthPolicies {
}

/**
 * Represents the health policy used to evaluate the health of services belonging to a service type.

 *
 * @schema #/definitions/ArmServiceTypeHealthPolicy
 */
export interface ArmServiceTypeHealthPolicy {
  /**
   * The maximum percentage of partitions per service allowed to be unhealthy before your application is considered in error.

   *
   * @schema #/definitions/ArmServiceTypeHealthPolicy#maxPercentUnhealthyPartitionsPerService
   */
  readonly maxPercentUnhealthyPartitionsPerService?: number;

  /**
   * The maximum percentage of replicas per partition allowed to be unhealthy before your application is considered in error.

   *
   * @schema #/definitions/ArmServiceTypeHealthPolicy#maxPercentUnhealthyReplicasPerPartition
   */
  readonly maxPercentUnhealthyReplicasPerPartition?: number;

  /**
   * The maximum percentage of services allowed to be unhealthy before your application is considered in error.

   *
   * @schema #/definitions/ArmServiceTypeHealthPolicy#maxPercentUnhealthyServices
   */
  readonly maxPercentUnhealthyServices?: number;

}

/**
 * @schema #/definitions/armApplicationHealthPolicyServiceTypeHealthPolicyMap
 */
export interface ArmApplicationHealthPolicyServiceTypeHealthPolicyMap {
}

export enum ArmRollingUpgradeMonitoringPolicyFailureAction {
  ROLLBACK = 'Rollback',
  MANUAL = 'Manual',
}


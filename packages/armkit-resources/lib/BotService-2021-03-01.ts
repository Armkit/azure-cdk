// generated by armkit
import { ArmResource } from '@yetics/armkit-core';
import { Construct } from 'constructs';

/**
 * Microsoft.BotService/botServices
 *
 * @schema Microsoft.BotService.botServices
 */
export class BotServices extends ArmResource {
  /**
   * Defines a "Microsoft.BotService.botServices" Arm Template object
   * @param scope the scope in which to define this object
   * @param name a scope-local name for the object
   * @param options configuration options
   */
  public constructor(scope: Construct, name: string, options: BotServicesOptions) {
    super(scope, name, {
      ...options,
      armResourceType: 'botServices',
    });
  }
}

/**
 * Microsoft.BotService/botServices/channels
 *
 * @schema Microsoft.BotService.botServices_channels
 */
export class BotServicesChannels extends ArmResource {
  /**
   * Defines a "Microsoft.BotService.botServices_channels" Arm Template object
   * @param scope the scope in which to define this object
   * @param name a scope-local name for the object
   * @param options configuration options
   */
  public constructor(scope: Construct, name: string, options: BotServicesChannelsOptions) {
    super(scope, name, {
      ...options,
      armResourceType: 'botServices_channels',
    });
  }
}

/**
 * Microsoft.BotService/botServices/connections
 *
 * @schema Microsoft.BotService.botServices_connections
 */
export class BotServicesConnections extends ArmResource {
  /**
   * Defines a "Microsoft.BotService.botServices_connections" Arm Template object
   * @param scope the scope in which to define this object
   * @param name a scope-local name for the object
   * @param options configuration options
   */
  public constructor(scope: Construct, name: string, options: BotServicesConnectionsOptions) {
    super(scope, name, {
      ...options,
      armResourceType: 'botServices_connections',
    });
  }
}

/**
 * Microsoft.BotService/botServices
 *
 * @schema Microsoft.BotService.botServices
 */
export interface BotServicesOptions {
  /**
   * @schema Microsoft.BotService.botServices#apiVersion
   */
  readonly apiVersion?: MicrosoftBotServiceBotServicesApiVersion;

  /**
   * Entity Tag
   *
   * @schema Microsoft.BotService.botServices#etag
   */
  readonly etag?: string;

  /**
   * Required. Gets or sets the Kind of the resource.
   *
   * @schema Microsoft.BotService.botServices#kind
   */
  readonly kind?: MicrosoftBotServiceBotServicesKind;

  /**
   * Specifies the location of the resource.
   *
   * @schema Microsoft.BotService.botServices#location
   */
  readonly location?: string;

  /**
   * The name of the Bot resource.
   *
   * @schema Microsoft.BotService.botServices#name
   */
  readonly name: MicrosoftBotServiceBotServicesNamePattern;

  /**
   * The parameters to provide for the Bot.
   *
   * @schema Microsoft.BotService.botServices#properties
   */
  readonly properties: BotProperties;

  /**
   * @schema Microsoft.BotService.botServices#resources
   */
  readonly resources?: MicrosoftBotServiceBotServicesResources[];

  /**
   * The SKU of the cognitive services account.
   *
   * @schema Microsoft.BotService.botServices#sku
   */
  readonly sku?: Sku;

  /**
   * Contains resource tags defined as key/value pairs.
   *
   * @schema Microsoft.BotService.botServices#tags
   */
  readonly tags?: MicrosoftBotServiceBotServicesTags;

  /**
   * @schema Microsoft.BotService.botServices#type
   */
  readonly type: MicrosoftBotServiceBotServicesType;

}

/**
 * Microsoft.BotService/botServices/channels
 *
 * @schema Microsoft.BotService.botServices_channels
 */
export interface BotServicesChannelsOptions {
  /**
   * @schema Microsoft.BotService.botServices_channels#apiVersion
   */
  readonly apiVersion?: MicrosoftBotServiceBotServicesChannelsApiVersion;

  /**
   * Entity Tag
   *
   * @schema Microsoft.BotService.botServices_channels#etag
   */
  readonly etag?: string;

  /**
   * Required. Gets or sets the Kind of the resource.
   *
   * @schema Microsoft.BotService.botServices_channels#kind
   */
  readonly kind?: MicrosoftBotServiceBotServicesChannelsKind;

  /**
   * Specifies the location of the resource.
   *
   * @schema Microsoft.BotService.botServices_channels#location
   */
  readonly location?: string;

  /**
   * The name of the Channel resource.
   *
   * @schema Microsoft.BotService.botServices_channels#name
   */
  readonly name: MicrosoftBotServiceBotServicesChannelsName;

  /**
   * Channel definition
   *
   * @schema Microsoft.BotService.botServices_channels#properties
   */
  readonly properties: Channel;

  /**
   * The SKU of the cognitive services account.
   *
   * @schema Microsoft.BotService.botServices_channels#sku
   */
  readonly sku?: Sku;

  /**
   * Contains resource tags defined as key/value pairs.
   *
   * @schema Microsoft.BotService.botServices_channels#tags
   */
  readonly tags?: MicrosoftBotServiceBotServicesChannelsTags;

  /**
   * @schema Microsoft.BotService.botServices_channels#type
   */
  readonly type: MicrosoftBotServiceBotServicesChannelsType;

}

/**
 * Microsoft.BotService/botServices/connections
 *
 * @schema Microsoft.BotService.botServices_connections
 */
export interface BotServicesConnectionsOptions {
  /**
   * @schema Microsoft.BotService.botServices_connections#apiVersion
   */
  readonly apiVersion?: MicrosoftBotServiceBotServicesConnectionsApiVersion;

  /**
   * Entity Tag
   *
   * @schema Microsoft.BotService.botServices_connections#etag
   */
  readonly etag?: string;

  /**
   * Required. Gets or sets the Kind of the resource.
   *
   * @schema Microsoft.BotService.botServices_connections#kind
   */
  readonly kind?: MicrosoftBotServiceBotServicesConnectionsKind;

  /**
   * Specifies the location of the resource.
   *
   * @schema Microsoft.BotService.botServices_connections#location
   */
  readonly location?: string;

  /**
   * The name of the Bot Service Connection Setting resource.
   *
   * @schema Microsoft.BotService.botServices_connections#name
   */
  readonly name: MicrosoftBotServiceBotServicesConnectionsNamePattern;

  /**
   * Properties for a Connection Setting Item
   *
   * @schema Microsoft.BotService.botServices_connections#properties
   */
  readonly properties: ConnectionSettingProperties;

  /**
   * The SKU of the cognitive services account.
   *
   * @schema Microsoft.BotService.botServices_connections#sku
   */
  readonly sku?: Sku;

  /**
   * Contains resource tags defined as key/value pairs.
   *
   * @schema Microsoft.BotService.botServices_connections#tags
   */
  readonly tags?: MicrosoftBotServiceBotServicesConnectionsTags;

  /**
   * @schema Microsoft.BotService.botServices_connections#type
   */
  readonly type: MicrosoftBotServiceBotServicesConnectionsType;

}

export enum MicrosoftBotServiceBotServicesApiVersion {
  "MicrosoftBotServiceBotServicesApiVersion_2021_03_01" = '2021-03-01',
}

export enum MicrosoftBotServiceBotServicesKind {
  SDK = 'sdk',
  DESIGNER = 'designer',
  BOT = 'bot',
  FUNCTION = 'function',
  AZUREBOT = 'azurebot',
}

/**
 * @schema MicrosoftBotServiceBotServicesName
 */
export class MicrosoftBotServiceBotServicesNamePattern {
  public static pattern(value: string): string {
    return value;
  }
}

/**
 * The parameters to provide for the Bot.
 *
 * @schema #/definitions/BotProperties
 */
export interface BotProperties {
  /**
   * The CMK Url
   *
   * @schema #/definitions/BotProperties#cmekKeyVaultUrl
   */
  readonly cmekKeyVaultUrl?: string;

  /**
   * The description of the bot
   *
   * @schema #/definitions/BotProperties#description
   */
  readonly description?: string;

  /**
   * The Application Insights key
   *
   * @schema #/definitions/BotProperties#developerAppInsightKey
   */
  readonly developerAppInsightKey?: string;

  /**
   * The Application Insights Api Key
   *
   * @schema #/definitions/BotProperties#developerAppInsightsApiKey
   */
  readonly developerAppInsightsApiKey?: string;

  /**
   * The Application Insights App Id
   *
   * @schema #/definitions/BotProperties#developerAppInsightsApplicationId
   */
  readonly developerAppInsightsApplicationId?: string;

  /**
   * The Name of the bot
   *
   * @schema #/definitions/BotProperties#displayName
   */
  readonly displayName: string;

  /**
   * The bot's endpoint
   *
   * @schema #/definitions/BotProperties#endpoint
   */
  readonly endpoint: string;

  /**
   * The Icon Url of the bot
   *
   * @schema #/definitions/BotProperties#iconUrl
   */
  readonly iconUrl?: string;

  /**
   * Whether Cmek is enabled
   *
   * @schema #/definitions/BotProperties#isCmekEnabled
   */
  readonly isCmekEnabled?: boolean;

  /**
   * Whether the bot is in an isolated network
   *
   * @schema #/definitions/BotProperties#isIsolated
   */
  readonly isIsolated?: boolean;

  /**
   * Collection of LUIS App Ids
   *
   * @schema #/definitions/BotProperties#luisAppIds
   */
  readonly luisAppIds?: string[];

  /**
   * The LUIS Key
   *
   * @schema #/definitions/BotProperties#luisKey
   */
  readonly luisKey?: string;

  /**
   * Microsoft App Id for the bot
   *
   * @schema #/definitions/BotProperties#msaAppId
   */
  readonly msaAppId: string;

  /**
   * The channel schema transformation version for the bot
   *
   * @schema #/definitions/BotProperties#schemaTransformationVersion
   */
  readonly schemaTransformationVersion?: string;

}

/**
 * @schema MicrosoftBotServiceBotServicesResources
 */
export class MicrosoftBotServiceBotServicesResources {
  public static fromBotServicesChannelsChildResource(value: BotServicesChannelsChildResource): MicrosoftBotServiceBotServicesResources {
    return new MicrosoftBotServiceBotServicesResources(value);
  }
  public static fromBotServicesConnectionsChildResource(value: BotServicesConnectionsChildResource): MicrosoftBotServiceBotServicesResources {
    return new MicrosoftBotServiceBotServicesResources(value);
  }
  private constructor(value: any) {
    Object.defineProperty(this, 'resolve', { value: () => value });
  }
}

/**
 * The SKU of the cognitive services account.
 *
 * @schema #/definitions/Sku
 */
export interface Sku {
  /**
   * The sku name.
   *
   * @schema #/definitions/Sku#name
   */
  readonly name: SkuName;

}

/**
 * @schema MicrosoftBotServiceBotServicesTags
 */
export interface MicrosoftBotServiceBotServicesTags {
}

export enum MicrosoftBotServiceBotServicesType {
  "MicrosoftBotServiceBotServicesType_MICROSOFT_BOT_SERVICE_BOT_SERVICES" = 'Microsoft.BotService/botServices',
}

export enum MicrosoftBotServiceBotServicesChannelsApiVersion {
  "MicrosoftBotServiceBotServicesChannelsApiVersion_2021_03_01" = '2021-03-01',
}

export enum MicrosoftBotServiceBotServicesChannelsKind {
  SDK = 'sdk',
  DESIGNER = 'designer',
  BOT = 'bot',
  FUNCTION = 'function',
  AZUREBOT = 'azurebot',
}

export enum MicrosoftBotServiceBotServicesChannelsName {
  ALEXA_CHANNEL = 'AlexaChannel',
  FACEBOOK_CHANNEL = 'FacebookChannel',
  EMAIL_CHANNEL = 'EmailChannel',
  KIK_CHANNEL = 'KikChannel',
  TELEGRAM_CHANNEL = 'TelegramChannel',
  SLACK_CHANNEL = 'SlackChannel',
  MS_TEAMS_CHANNEL = 'MsTeamsChannel',
  SKYPE_CHANNEL = 'SkypeChannel',
  WEB_CHAT_CHANNEL = 'WebChatChannel',
  DIRECT_LINE_CHANNEL = 'DirectLineChannel',
  SMS_CHANNEL = 'SmsChannel',
  LINE_CHANNEL = 'LineChannel',
  DIRECT_LINE_SPEECH_CHANNEL = 'DirectLineSpeechChannel',
}

/**
 * Channel definition
 *
 * @schema #/definitions/Channel
 */
export class Channel {
  public static fromAlexaChannel(value: AlexaChannel): Channel {
    return new Channel(value);
  }
  public static fromFacebookChannel(value: FacebookChannel): Channel {
    return new Channel(value);
  }
  public static fromEmailChannel(value: EmailChannel): Channel {
    return new Channel(value);
  }
  public static fromMsTeamsChannel(value: MsTeamsChannel): Channel {
    return new Channel(value);
  }
  public static fromSkypeChannel(value: SkypeChannel): Channel {
    return new Channel(value);
  }
  public static fromKikChannel(value: KikChannel): Channel {
    return new Channel(value);
  }
  public static fromWebChatChannel(value: WebChatChannel): Channel {
    return new Channel(value);
  }
  public static fromDirectLineChannel(value: DirectLineChannel): Channel {
    return new Channel(value);
  }
  public static fromTelegramChannel(value: TelegramChannel): Channel {
    return new Channel(value);
  }
  public static fromSmsChannel(value: SmsChannel): Channel {
    return new Channel(value);
  }
  public static fromSlackChannel(value: SlackChannel): Channel {
    return new Channel(value);
  }
  public static fromLineChannel(value: LineChannel): Channel {
    return new Channel(value);
  }
  public static fromDirectLineSpeechChannel(value: DirectLineSpeechChannel): Channel {
    return new Channel(value);
  }
  private constructor(value: any) {
    Object.defineProperty(this, 'resolve', { value: () => value });
  }
}

/**
 * @schema MicrosoftBotServiceBotServicesChannelsTags
 */
export interface MicrosoftBotServiceBotServicesChannelsTags {
}

export enum MicrosoftBotServiceBotServicesChannelsType {
  "MicrosoftBotServiceBotServicesChannelsType_MICROSOFT_BOT_SERVICE_BOT_SERVICES_CHANNELS" = 'Microsoft.BotService/botServices/channels',
}

export enum MicrosoftBotServiceBotServicesConnectionsApiVersion {
  "MicrosoftBotServiceBotServicesConnectionsApiVersion_2021_03_01" = '2021-03-01',
}

export enum MicrosoftBotServiceBotServicesConnectionsKind {
  SDK = 'sdk',
  DESIGNER = 'designer',
  BOT = 'bot',
  FUNCTION = 'function',
  AZUREBOT = 'azurebot',
}

/**
 * @schema MicrosoftBotServiceBotServicesConnectionsName
 */
export class MicrosoftBotServiceBotServicesConnectionsNamePattern {
  public static pattern(value: string): string {
    return value;
  }
}

/**
 * Properties for a Connection Setting Item
 *
 * @schema #/definitions/ConnectionSettingProperties
 */
export interface ConnectionSettingProperties {
  /**
   * Client Id associated with the Connection Setting.
   *
   * @schema #/definitions/ConnectionSettingProperties#clientId
   */
  readonly clientId?: string;

  /**
   * Client Secret associated with the Connection Setting
   *
   * @schema #/definitions/ConnectionSettingProperties#clientSecret
   */
  readonly clientSecret?: string;

  /**
   * Service Provider Parameters associated with the Connection Setting
   *
   * @schema #/definitions/ConnectionSettingProperties#parameters
   */
  readonly parameters?: ConnectionSettingParameter[];

  /**
   * Scopes associated with the Connection Setting
   *
   * @schema #/definitions/ConnectionSettingProperties#scopes
   */
  readonly scopes?: string;

  /**
   * Service Provider Display Name associated with the Connection Setting
   *
   * @schema #/definitions/ConnectionSettingProperties#serviceProviderDisplayName
   */
  readonly serviceProviderDisplayName?: string;

  /**
   * Service Provider Id associated with the Connection Setting
   *
   * @schema #/definitions/ConnectionSettingProperties#serviceProviderId
   */
  readonly serviceProviderId?: string;

}

/**
 * @schema MicrosoftBotServiceBotServicesConnectionsTags
 */
export interface MicrosoftBotServiceBotServicesConnectionsTags {
}

export enum MicrosoftBotServiceBotServicesConnectionsType {
  "MicrosoftBotServiceBotServicesConnectionsType_MICROSOFT_BOT_SERVICE_BOT_SERVICES_CONNECTIONS" = 'Microsoft.BotService/botServices/connections',
}

/**
 * Microsoft.BotService/botServices/channels
 *
 * @schema #/definitions/botServices_channels_childResource
 */
export interface BotServicesChannelsChildResource {
  /**
   * @schema #/definitions/botServices_channels_childResource#apiVersion
   */
  readonly apiVersion: BotServicesChannelsChildResourceApiVersion;

  /**
   * Entity Tag
   *
   * @schema #/definitions/botServices_channels_childResource#etag
   */
  readonly etag?: string;

  /**
   * Required. Gets or sets the Kind of the resource.
   *
   * @schema #/definitions/botServices_channels_childResource#kind
   */
  readonly kind?: BotServicesChannelsChildResourceKind;

  /**
   * Specifies the location of the resource.
   *
   * @schema #/definitions/botServices_channels_childResource#location
   */
  readonly location?: string;

  /**
   * The name of the Channel resource.
   *
   * @schema #/definitions/botServices_channels_childResource#name
   */
  readonly name: BotServicesChannelsChildResourceName;

  /**
   * Channel definition
   *
   * @schema #/definitions/botServices_channels_childResource#properties
   */
  readonly properties: Channel;

  /**
   * The SKU of the cognitive services account.
   *
   * @schema #/definitions/botServices_channels_childResource#sku
   */
  readonly sku?: Sku;

  /**
   * Contains resource tags defined as key/value pairs.
   *
   * @schema #/definitions/botServices_channels_childResource#tags
   */
  readonly tags?: BotServicesChannelsChildResourceTags;

  /**
   * @schema #/definitions/botServices_channels_childResource#type
   */
  readonly type: BotServicesChannelsChildResourceType;

}

/**
 * Microsoft.BotService/botServices/connections
 *
 * @schema #/definitions/botServices_connections_childResource
 */
export interface BotServicesConnectionsChildResource {
  /**
   * @schema #/definitions/botServices_connections_childResource#apiVersion
   */
  readonly apiVersion: BotServicesConnectionsChildResourceApiVersion;

  /**
   * Entity Tag
   *
   * @schema #/definitions/botServices_connections_childResource#etag
   */
  readonly etag?: string;

  /**
   * Required. Gets or sets the Kind of the resource.
   *
   * @schema #/definitions/botServices_connections_childResource#kind
   */
  readonly kind?: BotServicesConnectionsChildResourceKind;

  /**
   * Specifies the location of the resource.
   *
   * @schema #/definitions/botServices_connections_childResource#location
   */
  readonly location?: string;

  /**
   * The name of the Bot Service Connection Setting resource.
   *
   * @schema #/definitions/botServices_connections_childResource#name
   */
  readonly name: BotServicesConnectionsChildResourceNamePattern;

  /**
   * Properties for a Connection Setting Item
   *
   * @schema #/definitions/botServices_connections_childResource#properties
   */
  readonly properties: ConnectionSettingProperties;

  /**
   * The SKU of the cognitive services account.
   *
   * @schema #/definitions/botServices_connections_childResource#sku
   */
  readonly sku?: Sku;

  /**
   * Contains resource tags defined as key/value pairs.
   *
   * @schema #/definitions/botServices_connections_childResource#tags
   */
  readonly tags?: BotServicesConnectionsChildResourceTags;

  /**
   * @schema #/definitions/botServices_connections_childResource#type
   */
  readonly type: BotServicesConnectionsChildResourceType;

}

export enum SkuName {
  "SkuName_F0" = 'F0',
  "SkuName_S1" = 'S1',
}

/**
 * Alexa channel definition
 *
 * @schema #/definitions/AlexaChannel
 */
export interface AlexaChannel {
  /**
   * @schema #/definitions/AlexaChannel#channelName
   */
  readonly channelName: AlexaChannelChannelName;

  /**
   * The parameters to provide for the Alexa channel.
   *
   * @schema #/definitions/AlexaChannel#properties
   */
  readonly properties?: AlexaChannelProperties;

}

/**
 * Facebook channel definition
 *
 * @schema #/definitions/FacebookChannel
 */
export interface FacebookChannel {
  /**
   * @schema #/definitions/FacebookChannel#channelName
   */
  readonly channelName: FacebookChannelChannelName;

  /**
   * The parameters to provide for the Facebook channel.
   *
   * @schema #/definitions/FacebookChannel#properties
   */
  readonly properties?: FacebookChannelProperties;

}

/**
 * Email channel definition
 *
 * @schema #/definitions/EmailChannel
 */
export interface EmailChannel {
  /**
   * @schema #/definitions/EmailChannel#channelName
   */
  readonly channelName: EmailChannelChannelName;

  /**
   * The parameters to provide for the Email channel.
   *
   * @schema #/definitions/EmailChannel#properties
   */
  readonly properties?: EmailChannelProperties;

}

/**
 * Microsoft Teams channel definition
 *
 * @schema #/definitions/MsTeamsChannel
 */
export interface MsTeamsChannel {
  /**
   * @schema #/definitions/MsTeamsChannel#channelName
   */
  readonly channelName: MsTeamsChannelChannelName;

  /**
   * The parameters to provide for the Microsoft Teams channel.
   *
   * @schema #/definitions/MsTeamsChannel#properties
   */
  readonly properties?: MsTeamsChannelProperties;

}

/**
 * Skype channel definition
 *
 * @schema #/definitions/SkypeChannel
 */
export interface SkypeChannel {
  /**
   * @schema #/definitions/SkypeChannel#channelName
   */
  readonly channelName: SkypeChannelChannelName;

  /**
   * The parameters to provide for the Microsoft Teams channel.
   *
   * @schema #/definitions/SkypeChannel#properties
   */
  readonly properties?: SkypeChannelProperties;

}

/**
 * Kik channel definition
 *
 * @schema #/definitions/KikChannel
 */
export interface KikChannel {
  /**
   * @schema #/definitions/KikChannel#channelName
   */
  readonly channelName: KikChannelChannelName;

  /**
   * The parameters to provide for the Kik channel.
   *
   * @schema #/definitions/KikChannel#properties
   */
  readonly properties?: KikChannelProperties;

}

/**
 * Web Chat channel definition
 *
 * @schema #/definitions/WebChatChannel
 */
export interface WebChatChannel {
  /**
   * @schema #/definitions/WebChatChannel#channelName
   */
  readonly channelName: WebChatChannelChannelName;

  /**
   * The parameters to provide for the Web Chat channel.
   *
   * @schema #/definitions/WebChatChannel#properties
   */
  readonly properties?: WebChatChannelProperties;

}

/**
 * Direct Line channel definition
 *
 * @schema #/definitions/DirectLineChannel
 */
export interface DirectLineChannel {
  /**
   * @schema #/definitions/DirectLineChannel#channelName
   */
  readonly channelName: DirectLineChannelChannelName;

  /**
   * The parameters to provide for the Direct Line channel.
   *
   * @schema #/definitions/DirectLineChannel#properties
   */
  readonly properties?: DirectLineChannelProperties;

}

/**
 * Telegram channel definition
 *
 * @schema #/definitions/TelegramChannel
 */
export interface TelegramChannel {
  /**
   * @schema #/definitions/TelegramChannel#channelName
   */
  readonly channelName: TelegramChannelChannelName;

  /**
   * The parameters to provide for the Telegram channel.
   *
   * @schema #/definitions/TelegramChannel#properties
   */
  readonly properties?: TelegramChannelProperties;

}

/**
 * Sms channel definition
 *
 * @schema #/definitions/SmsChannel
 */
export interface SmsChannel {
  /**
   * @schema #/definitions/SmsChannel#channelName
   */
  readonly channelName: SmsChannelChannelName;

  /**
   * The parameters to provide for the Sms channel.
   *
   * @schema #/definitions/SmsChannel#properties
   */
  readonly properties?: SmsChannelProperties;

}

/**
 * Slack channel definition
 *
 * @schema #/definitions/SlackChannel
 */
export interface SlackChannel {
  /**
   * @schema #/definitions/SlackChannel#channelName
   */
  readonly channelName: SlackChannelChannelName;

  /**
   * The parameters to provide for the Slack channel.
   *
   * @schema #/definitions/SlackChannel#properties
   */
  readonly properties?: SlackChannelProperties;

}

/**
 * Line channel definition
 *
 * @schema #/definitions/LineChannel
 */
export interface LineChannel {
  /**
   * @schema #/definitions/LineChannel#channelName
   */
  readonly channelName: LineChannelChannelName;

  /**
   * The parameters to provide for the Line channel.
   *
   * @schema #/definitions/LineChannel#properties
   */
  readonly properties?: LineChannelProperties;

}

/**
 * DirectLine Speech channel definition
 *
 * @schema #/definitions/DirectLineSpeechChannel
 */
export interface DirectLineSpeechChannel {
  /**
   * @schema #/definitions/DirectLineSpeechChannel#channelName
   */
  readonly channelName: DirectLineSpeechChannelChannelName;

  /**
   * The parameters to provide for the DirectLine Speech channel.
   *
   * @schema #/definitions/DirectLineSpeechChannel#properties
   */
  readonly properties?: DirectLineSpeechChannelProperties;

}

/**
 * Extra Parameter in a Connection Setting Properties to indicate service provider specific properties
 *
 * @schema #/definitions/ConnectionSettingParameter
 */
export interface ConnectionSettingParameter {
  /**
   * Key for the Connection Setting Parameter.
   *
   * @schema #/definitions/ConnectionSettingParameter#key
   */
  readonly key?: string;

  /**
   * Value associated with the Connection Setting Parameter.
   *
   * @schema #/definitions/ConnectionSettingParameter#value
   */
  readonly value?: string;

}

export enum BotServicesChannelsChildResourceApiVersion {
  "BotServicesChannelsChildResourceApiVersion_2021_03_01" = '2021-03-01',
}

export enum BotServicesChannelsChildResourceKind {
  SDK = 'sdk',
  DESIGNER = 'designer',
  BOT = 'bot',
  FUNCTION = 'function',
  AZUREBOT = 'azurebot',
}

export enum BotServicesChannelsChildResourceName {
  ALEXA_CHANNEL = 'AlexaChannel',
  FACEBOOK_CHANNEL = 'FacebookChannel',
  EMAIL_CHANNEL = 'EmailChannel',
  KIK_CHANNEL = 'KikChannel',
  TELEGRAM_CHANNEL = 'TelegramChannel',
  SLACK_CHANNEL = 'SlackChannel',
  MS_TEAMS_CHANNEL = 'MsTeamsChannel',
  SKYPE_CHANNEL = 'SkypeChannel',
  WEB_CHAT_CHANNEL = 'WebChatChannel',
  DIRECT_LINE_CHANNEL = 'DirectLineChannel',
  SMS_CHANNEL = 'SmsChannel',
  LINE_CHANNEL = 'LineChannel',
  DIRECT_LINE_SPEECH_CHANNEL = 'DirectLineSpeechChannel',
}

/**
 * @schema #/definitions/botServicesChannelsChildResourceTags
 */
export interface BotServicesChannelsChildResourceTags {
}

export enum BotServicesChannelsChildResourceType {
  CHANNELS = 'channels',
}

export enum BotServicesConnectionsChildResourceApiVersion {
  "BotServicesConnectionsChildResourceApiVersion_2021_03_01" = '2021-03-01',
}

export enum BotServicesConnectionsChildResourceKind {
  SDK = 'sdk',
  DESIGNER = 'designer',
  BOT = 'bot',
  FUNCTION = 'function',
  AZUREBOT = 'azurebot',
}

/**
 * @schema #/definitions/botServicesConnectionsChildResourceName
 */
export class BotServicesConnectionsChildResourceNamePattern {
  public static pattern(value: string): string {
    return value;
  }
}

/**
 * @schema #/definitions/botServicesConnectionsChildResourceTags
 */
export interface BotServicesConnectionsChildResourceTags {
}

export enum BotServicesConnectionsChildResourceType {
  CONNECTIONS = 'connections',
}

export enum AlexaChannelChannelName {
  ALEXA_CHANNEL = 'AlexaChannel',
}

/**
 * The parameters to provide for the Alexa channel.
 *
 * @schema #/definitions/AlexaChannelProperties
 */
export interface AlexaChannelProperties {
  /**
   * The Alexa skill Id
   *
   * @schema #/definitions/AlexaChannelProperties#alexaSkillId
   */
  readonly alexaSkillId: string;

  /**
   * Whether this channel is enabled for the bot
   *
   * @schema #/definitions/AlexaChannelProperties#isEnabled
   */
  readonly isEnabled: boolean;

}

export enum FacebookChannelChannelName {
  FACEBOOK_CHANNEL = 'FacebookChannel',
}

/**
 * The parameters to provide for the Facebook channel.
 *
 * @schema #/definitions/FacebookChannelProperties
 */
export interface FacebookChannelProperties {
  /**
   * Facebook application id
   *
   * @schema #/definitions/FacebookChannelProperties#appId
   */
  readonly appId: string;

  /**
   * Facebook application secret. Value only returned through POST to the action Channel List API, otherwise empty.
   *
   * @schema #/definitions/FacebookChannelProperties#appSecret
   */
  readonly appSecret?: string;

  /**
   * Whether this channel is enabled for the bot
   *
   * @schema #/definitions/FacebookChannelProperties#isEnabled
   */
  readonly isEnabled: boolean;

  /**
   * The list of Facebook pages
   *
   * @schema #/definitions/FacebookChannelProperties#pages
   */
  readonly pages?: FacebookPage[];

}

export enum EmailChannelChannelName {
  EMAIL_CHANNEL = 'EmailChannel',
}

/**
 * The parameters to provide for the Email channel.
 *
 * @schema #/definitions/EmailChannelProperties
 */
export interface EmailChannelProperties {
  /**
   * The email address
   *
   * @schema #/definitions/EmailChannelProperties#emailAddress
   */
  readonly emailAddress: string;

  /**
   * Whether this channel is enabled for the bot
   *
   * @schema #/definitions/EmailChannelProperties#isEnabled
   */
  readonly isEnabled: boolean;

  /**
   * The password for the email address. Value only returned through POST to the action Channel List API, otherwise empty.
   *
   * @schema #/definitions/EmailChannelProperties#password
   */
  readonly password?: string;

}

export enum MsTeamsChannelChannelName {
  MS_TEAMS_CHANNEL = 'MsTeamsChannel',
}

/**
 * The parameters to provide for the Microsoft Teams channel.
 *
 * @schema #/definitions/MsTeamsChannelProperties
 */
export interface MsTeamsChannelProperties {
  /**
   * Webhook for Microsoft Teams channel calls
   *
   * @schema #/definitions/MsTeamsChannelProperties#callingWebHook
   */
  readonly callingWebHook?: string;

  /**
   * Enable calling for Microsoft Teams channel
   *
   * @schema #/definitions/MsTeamsChannelProperties#enableCalling
   */
  readonly enableCalling?: boolean;

  /**
   * Whether this channel is enabled for the bot
   *
   * @schema #/definitions/MsTeamsChannelProperties#isEnabled
   */
  readonly isEnabled: boolean;

}

export enum SkypeChannelChannelName {
  SKYPE_CHANNEL = 'SkypeChannel',
}

/**
 * The parameters to provide for the Microsoft Teams channel.
 *
 * @schema #/definitions/SkypeChannelProperties
 */
export interface SkypeChannelProperties {
  /**
   * Calling web hook for Skype channel
   *
   * @schema #/definitions/SkypeChannelProperties#callingWebHook
   */
  readonly callingWebHook?: string;

  /**
   * Enable calling for Skype channel
   *
   * @schema #/definitions/SkypeChannelProperties#enableCalling
   */
  readonly enableCalling?: boolean;

  /**
   * Enable groups for Skype channel
   *
   * @schema #/definitions/SkypeChannelProperties#enableGroups
   */
  readonly enableGroups?: boolean;

  /**
   * Enable media cards for Skype channel
   *
   * @schema #/definitions/SkypeChannelProperties#enableMediaCards
   */
  readonly enableMediaCards?: boolean;

  /**
   * Enable messaging for Skype channel
   *
   * @schema #/definitions/SkypeChannelProperties#enableMessaging
   */
  readonly enableMessaging?: boolean;

  /**
   * Enable screen sharing for Skype channel
   *
   * @schema #/definitions/SkypeChannelProperties#enableScreenSharing
   */
  readonly enableScreenSharing?: boolean;

  /**
   * Enable video for Skype channel
   *
   * @schema #/definitions/SkypeChannelProperties#enableVideo
   */
  readonly enableVideo?: boolean;

  /**
   * Group mode for Skype channel
   *
   * @schema #/definitions/SkypeChannelProperties#groupsMode
   */
  readonly groupsMode?: string;

  /**
   * Whether this channel is enabled for the bot
   *
   * @schema #/definitions/SkypeChannelProperties#isEnabled
   */
  readonly isEnabled: boolean;

}

export enum KikChannelChannelName {
  KIK_CHANNEL = 'KikChannel',
}

/**
 * The parameters to provide for the Kik channel.
 *
 * @schema #/definitions/KikChannelProperties
 */
export interface KikChannelProperties {
  /**
   * Kik API key. Value only returned through POST to the action Channel List API, otherwise empty.
   *
   * @schema #/definitions/KikChannelProperties#apiKey
   */
  readonly apiKey?: string;

  /**
   * Whether this channel is enabled for the bot
   *
   * @schema #/definitions/KikChannelProperties#isEnabled
   */
  readonly isEnabled: boolean;

  /**
   * Whether this channel is validated for the bot
   *
   * @schema #/definitions/KikChannelProperties#isValidated
   */
  readonly isValidated?: boolean;

  /**
   * The Kik user name
   *
   * @schema #/definitions/KikChannelProperties#userName
   */
  readonly userName: string;

}

export enum WebChatChannelChannelName {
  WEB_CHAT_CHANNEL = 'WebChatChannel',
}

/**
 * The parameters to provide for the Web Chat channel.
 *
 * @schema #/definitions/WebChatChannelProperties
 */
export interface WebChatChannelProperties {
  /**
   * The list of Web Chat sites
   *
   * @schema #/definitions/WebChatChannelProperties#sites
   */
  readonly sites?: WebChatSite[];

}

export enum DirectLineChannelChannelName {
  DIRECT_LINE_CHANNEL = 'DirectLineChannel',
}

/**
 * The parameters to provide for the Direct Line channel.
 *
 * @schema #/definitions/DirectLineChannelProperties
 */
export interface DirectLineChannelProperties {
  /**
   * The list of Direct Line sites
   *
   * @schema #/definitions/DirectLineChannelProperties#sites
   */
  readonly sites?: DirectLineSite[];

}

export enum TelegramChannelChannelName {
  TELEGRAM_CHANNEL = 'TelegramChannel',
}

/**
 * The parameters to provide for the Telegram channel.
 *
 * @schema #/definitions/TelegramChannelProperties
 */
export interface TelegramChannelProperties {
  /**
   * The Telegram access token. Value only returned through POST to the action Channel List API, otherwise empty.
   *
   * @schema #/definitions/TelegramChannelProperties#accessToken
   */
  readonly accessToken?: string;

  /**
   * Whether this channel is enabled for the bot
   *
   * @schema #/definitions/TelegramChannelProperties#isEnabled
   */
  readonly isEnabled: boolean;

  /**
   * Whether this channel is validated for the bot
   *
   * @schema #/definitions/TelegramChannelProperties#isValidated
   */
  readonly isValidated?: boolean;

}

export enum SmsChannelChannelName {
  SMS_CHANNEL = 'SmsChannel',
}

/**
 * The parameters to provide for the Sms channel.
 *
 * @schema #/definitions/SmsChannelProperties
 */
export interface SmsChannelProperties {
  /**
   * The Sms account SID. Value only returned through POST to the action Channel List API, otherwise empty.
   *
   * @schema #/definitions/SmsChannelProperties#accountSID
   */
  readonly accountSID: string;

  /**
   * The Sms auth token. Value only returned through POST to the action Channel List API, otherwise empty.
   *
   * @schema #/definitions/SmsChannelProperties#authToken
   */
  readonly authToken?: string;

  /**
   * Whether this channel is enabled for the bot
   *
   * @schema #/definitions/SmsChannelProperties#isEnabled
   */
  readonly isEnabled: boolean;

  /**
   * Whether this channel is validated for the bot
   *
   * @schema #/definitions/SmsChannelProperties#isValidated
   */
  readonly isValidated?: boolean;

  /**
   * The Sms phone
   *
   * @schema #/definitions/SmsChannelProperties#phone
   */
  readonly phone: string;

}

export enum SlackChannelChannelName {
  SLACK_CHANNEL = 'SlackChannel',
}

/**
 * The parameters to provide for the Slack channel.
 *
 * @schema #/definitions/SlackChannelProperties
 */
export interface SlackChannelProperties {
  /**
   * The Slack client id
   *
   * @schema #/definitions/SlackChannelProperties#clientId
   */
  readonly clientId?: string;

  /**
   * The Slack client secret. Value only returned through POST to the action Channel List API, otherwise empty.
   *
   * @schema #/definitions/SlackChannelProperties#clientSecret
   */
  readonly clientSecret?: string;

  /**
   * Whether this channel is enabled for the bot
   *
   * @schema #/definitions/SlackChannelProperties#isEnabled
   */
  readonly isEnabled: boolean;

  /**
   * The Slack landing page Url
   *
   * @schema #/definitions/SlackChannelProperties#landingPageUrl
   */
  readonly landingPageUrl?: string;

  /**
   * The Slack signing secret.
   *
   * @schema #/definitions/SlackChannelProperties#signingSecret
   */
  readonly signingSecret?: string;

  /**
   * The Slack verification token. Value only returned through POST to the action Channel List API, otherwise empty.
   *
   * @schema #/definitions/SlackChannelProperties#verificationToken
   */
  readonly verificationToken?: string;

}

export enum LineChannelChannelName {
  LINE_CHANNEL = 'LineChannel',
}

/**
 * The parameters to provide for the Line channel.
 *
 * @schema #/definitions/LineChannelProperties
 */
export interface LineChannelProperties {
  /**
   * The list of line channel registrations
   *
   * @schema #/definitions/LineChannelProperties#lineRegistrations
   */
  readonly lineRegistrations: LineRegistration[];

}

export enum DirectLineSpeechChannelChannelName {
  DIRECT_LINE_SPEECH_CHANNEL = 'DirectLineSpeechChannel',
}

/**
 * The parameters to provide for the DirectLine Speech channel.
 *
 * @schema #/definitions/DirectLineSpeechChannelProperties
 */
export interface DirectLineSpeechChannelProperties {
  /**
   * The cognitive service subscription ID to use with this channel registration.
   *
   * @schema #/definitions/DirectLineSpeechChannelProperties#cognitiveServicesSubscriptionId
   */
  readonly cognitiveServicesSubscriptionId: string;

  /**
   * Custom voice deployment id (optional).
   *
   * @schema #/definitions/DirectLineSpeechChannelProperties#customSpeechModelId
   */
  readonly customSpeechModelId?: string;

  /**
   * Custom speech model id (optional).
   *
   * @schema #/definitions/DirectLineSpeechChannelProperties#customVoiceDeploymentId
   */
  readonly customVoiceDeploymentId?: string;

  /**
   * Make this a default bot for chosen cognitive service account.
   *
   * @schema #/definitions/DirectLineSpeechChannelProperties#isDefaultBotForCogSvcAccount
   */
  readonly isDefaultBotForCogSvcAccount?: boolean;

  /**
   * Whether this channel is enabled or not.
   *
   * @schema #/definitions/DirectLineSpeechChannelProperties#isEnabled
   */
  readonly isEnabled?: boolean;

}

/**
 * A Facebook page for Facebook channel registration
 *
 * @schema #/definitions/FacebookPage
 */
export interface FacebookPage {
  /**
   * Facebook application access token. Value only returned through POST to the action Channel List API, otherwise empty.
   *
   * @schema #/definitions/FacebookPage#accessToken
   */
  readonly accessToken?: string;

  /**
   * Page id
   *
   * @schema #/definitions/FacebookPage#id
   */
  readonly id: string;

}

/**
 * A site for the Webchat channel
 *
 * @schema #/definitions/WebChatSite
 */
export interface WebChatSite {
  /**
   * Whether this site is enabled for preview versions of Webchat
   *
   * @schema #/definitions/WebChatSite#enablePreview
   */
  readonly enablePreview: boolean;

  /**
   * Whether this site is enabled for DirectLine channel
   *
   * @schema #/definitions/WebChatSite#isEnabled
   */
  readonly isEnabled: boolean;

  /**
   * Site name
   *
   * @schema #/definitions/WebChatSite#siteName
   */
  readonly siteName: string;

}

/**
 * A site for the Direct Line channel
 *
 * @schema #/definitions/DirectLineSite
 */
export interface DirectLineSite {
  /**
   * Whether this site is enabled for DirectLine channel.
   *
   * @schema #/definitions/DirectLineSite#isEnabled
   */
  readonly isEnabled: boolean;

  /**
   * Whether this site is enabled for authentication with Bot Framework.
   *
   * @schema #/definitions/DirectLineSite#isSecureSiteEnabled
   */
  readonly isSecureSiteEnabled?: boolean;

  /**
   * Whether this site is enabled for Bot Framework V1 protocol.
   *
   * @schema #/definitions/DirectLineSite#isV1Enabled
   */
  readonly isV1Enabled: boolean;

  /**
   * Whether this site is enabled for Bot Framework V1 protocol.
   *
   * @schema #/definitions/DirectLineSite#isV3Enabled
   */
  readonly isV3Enabled: boolean;

  /**
   * Site name
   *
   * @schema #/definitions/DirectLineSite#siteName
   */
  readonly siteName: string;

  /**
   * List of Trusted Origin URLs for this site. This field is applicable only if isSecureSiteEnabled is True.
   *
   * @schema #/definitions/DirectLineSite#trustedOrigins
   */
  readonly trustedOrigins?: string[];

}

/**
 * The properties corresponding to a line channel registration
 *
 * @schema #/definitions/LineRegistration
 */
export interface LineRegistration {
  /**
   * Access token for the line channel registration
   *
   * @schema #/definitions/LineRegistration#channelAccessToken
   */
  readonly channelAccessToken?: string;

  /**
   * Secret for the line channel registration
   *
   * @schema #/definitions/LineRegistration#channelSecret
   */
  readonly channelSecret?: string;

}


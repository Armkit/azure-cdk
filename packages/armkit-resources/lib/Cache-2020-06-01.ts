    // generated by armkit
    import { ArmResource } from '@yetics/armkit-core';
    import { Construct } from 'constructs';

    /**
     * Microsoft.Cache/redis
     *
     * @schema Microsoft.Cache.redis
     */
    export class Redis extends ArmResource {
      /**
       * Defines a "Microsoft.Cache.redis" Arm Template object
       * @param scope the scope in which to define this object
       * @param name a scope-local name for the object
       * @param options configuration options
       */
      public constructor(scope: Construct, name: string, options: RedisOptions) {
        super(scope, name, {
          ...options,
          armResourceType: 'redis',
        });
      }
    }

    /**
     * Microsoft.Cache/redis/firewallRules
     *
     * @schema Microsoft.Cache.redis_firewallRules
     */
    export class RedisFirewallRules extends ArmResource {
      /**
       * Defines a "Microsoft.Cache.redis_firewallRules" Arm Template object
       * @param scope the scope in which to define this object
       * @param name a scope-local name for the object
       * @param options configuration options
       */
      public constructor(scope: Construct, name: string, options: RedisFirewallRulesOptions) {
        super(scope, name, {
          ...options,
          armResourceType: 'redis_firewallRules',
        });
      }
    }

    /**
     * Microsoft.Cache/redis/linkedServers
     *
     * @schema Microsoft.Cache.redis_linkedServers
     */
    export class RedisLinkedServers extends ArmResource {
      /**
       * Defines a "Microsoft.Cache.redis_linkedServers" Arm Template object
       * @param scope the scope in which to define this object
       * @param name a scope-local name for the object
       * @param options configuration options
       */
      public constructor(scope: Construct, name: string, options: RedisLinkedServersOptions) {
        super(scope, name, {
          ...options,
          armResourceType: 'redis_linkedServers',
        });
      }
    }

    /**
     * Microsoft.Cache/redis/patchSchedules
     *
     * @schema Microsoft.Cache.redis_patchSchedules
     */
    export class RedisPatchSchedules extends ArmResource {
      /**
       * Defines a "Microsoft.Cache.redis_patchSchedules" Arm Template object
       * @param scope the scope in which to define this object
       * @param name a scope-local name for the object
       * @param options configuration options
       */
      public constructor(scope: Construct, name: string, options: RedisPatchSchedulesOptions) {
        super(scope, name, {
          ...options,
          armResourceType: 'redis_patchSchedules',
        });
      }
    }

    /**
     * Microsoft.Cache/redis/privateEndpointConnections
     *
     * @schema Microsoft.Cache.redis_privateEndpointConnections
     */
    export class RedisPrivateEndpointConnections extends ArmResource {
      /**
       * Defines a "Microsoft.Cache.redis_privateEndpointConnections" Arm Template object
       * @param scope the scope in which to define this object
       * @param name a scope-local name for the object
       * @param options configuration options
       */
      public constructor(scope: Construct, name: string, options: RedisPrivateEndpointConnectionsOptions) {
        super(scope, name, {
          ...options,
          armResourceType: 'redis_privateEndpointConnections',
        });
      }
    }

    /**
     * Microsoft.Cache/redis
     *
     * @schema Microsoft.Cache.redis
     */
    export interface RedisOptions {
      /**
       * @schema Microsoft.Cache.redis#apiVersion
       */
      readonly apiVersion?: MicrosoftCacheRedisApiVersion;

      /**
       * The geo-location where the resource lives
       *
       * @schema Microsoft.Cache.redis#location
       */
      readonly location: string;

      /**
       * The name of the Redis cache.
       *
       * @schema Microsoft.Cache.redis#name
       */
      readonly name: string;

      /**
       * Properties supplied to Create Redis operation.
       *
       * @schema Microsoft.Cache.redis#properties
       */
      readonly properties: RedisCreateProperties;

      /**
       * @schema Microsoft.Cache.redis#resources
       */
      readonly resources?: MicrosoftCacheRedisResources[];

      /**
       * Resource tags.
       *
       * @schema Microsoft.Cache.redis#tags
       */
      readonly tags?: MicrosoftCacheRedisTags;

      /**
       * @schema Microsoft.Cache.redis#type
       */
      readonly type: MicrosoftCacheRedisType;

      /**
       * A list of availability zones denoting where the resource needs to come from.
       *
       * @schema Microsoft.Cache.redis#zones
       */
      readonly zones?: string[];

    }

    /**
     * Microsoft.Cache/redis/firewallRules
     *
     * @schema Microsoft.Cache.redis_firewallRules
     */
    export interface RedisFirewallRulesOptions {
      /**
       * @schema Microsoft.Cache.redis_firewallRules#apiVersion
       */
      readonly apiVersion?: MicrosoftCacheRedisFirewallRulesApiVersion;

      /**
       * The name of the firewall rule.
       *
       * @schema Microsoft.Cache.redis_firewallRules#name
       */
      readonly name: string;

      /**
       * Specifies a range of IP addresses permitted to connect to the cache
       *
       * @schema Microsoft.Cache.redis_firewallRules#properties
       */
      readonly properties: RedisFirewallRuleProperties;

      /**
       * @schema Microsoft.Cache.redis_firewallRules#type
       */
      readonly type: MicrosoftCacheRedisFirewallRulesType;

    }

    /**
     * Microsoft.Cache/redis/linkedServers
     *
     * @schema Microsoft.Cache.redis_linkedServers
     */
    export interface RedisLinkedServersOptions {
      /**
       * @schema Microsoft.Cache.redis_linkedServers#apiVersion
       */
      readonly apiVersion?: MicrosoftCacheRedisLinkedServersApiVersion;

      /**
       * The name of the linked server that is being added to the Redis cache.
       *
       * @schema Microsoft.Cache.redis_linkedServers#name
       */
      readonly name: string;

      /**
       * Create properties for a linked server
       *
       * @schema Microsoft.Cache.redis_linkedServers#properties
       */
      readonly properties: RedisLinkedServerCreateProperties;

      /**
       * @schema Microsoft.Cache.redis_linkedServers#type
       */
      readonly type: MicrosoftCacheRedisLinkedServersType;

    }

    /**
     * Microsoft.Cache/redis/patchSchedules
     *
     * @schema Microsoft.Cache.redis_patchSchedules
     */
    export interface RedisPatchSchedulesOptions {
      /**
       * @schema Microsoft.Cache.redis_patchSchedules#apiVersion
       */
      readonly apiVersion?: MicrosoftCacheRedisPatchSchedulesApiVersion;

      /**
       * Default string modeled as parameter for auto generation to work correctly.
       *
       * @schema Microsoft.Cache.redis_patchSchedules#name
       */
      readonly name: MicrosoftCacheRedisPatchSchedulesNamePattern;

      /**
       * List of patch schedules for a Redis cache.
       *
       * @schema Microsoft.Cache.redis_patchSchedules#properties
       */
      readonly properties: ScheduleEntries;

      /**
       * @schema Microsoft.Cache.redis_patchSchedules#type
       */
      readonly type: MicrosoftCacheRedisPatchSchedulesType;

    }

    /**
     * Microsoft.Cache/redis/privateEndpointConnections
     *
     * @schema Microsoft.Cache.redis_privateEndpointConnections
     */
    export interface RedisPrivateEndpointConnectionsOptions {
      /**
       * @schema Microsoft.Cache.redis_privateEndpointConnections#apiVersion
       */
      readonly apiVersion?: MicrosoftCacheRedisPrivateEndpointConnectionsApiVersion;

      /**
       * The name of the private endpoint connection associated with the Azure resource
       *
       * @schema Microsoft.Cache.redis_privateEndpointConnections#name
       */
      readonly name: string;

      /**
       * Properties of the PrivateEndpointConnectProperties.
       *
       * @schema Microsoft.Cache.redis_privateEndpointConnections#properties
       */
      readonly properties: PrivateEndpointConnectionProperties;

      /**
       * @schema Microsoft.Cache.redis_privateEndpointConnections#type
       */
      readonly type: MicrosoftCacheRedisPrivateEndpointConnectionsType;

    }

    export enum MicrosoftCacheRedisApiVersion {
      "MicrosoftCacheRedisApiVersion_2020_06_01" = '2020-06-01',
    }

    /**
     * Properties supplied to Create Redis operation.
     *
     * @schema #/definitions/RedisCreateProperties
     */
    export interface RedisCreateProperties {
      /**
       * Specifies whether the non-ssl Redis server port (6379) is enabled.
       *
       * @schema #/definitions/RedisCreateProperties#enableNonSslPort
       */
      readonly enableNonSslPort?: boolean;

      /**
       * Optional: requires clients to use a specified TLS version (or higher) to connect (e,g, '1.0', '1.1', '1.2').
       *
       * @schema #/definitions/RedisCreateProperties#minimumTlsVersion
       */
      readonly minimumTlsVersion?: RedisCreatePropertiesMinimumTlsVersion;

      /**
       * Whether or not public endpoint access is allowed for this cache.  Value is optional but if passed in, must be 'Enabled' or 'Disabled'. If 'Disabled', private endpoints are the exclusive access method. Default value is 'Enabled'.
       *
       * @schema #/definitions/RedisCreateProperties#publicNetworkAccess
       */
      readonly publicNetworkAccess?: RedisCreatePropertiesPublicNetworkAccess;

      /**
       * All Redis Settings. Few possible keys: rdb-backup-enabled,rdb-storage-connection-string,rdb-backup-frequency,maxmemory-delta,maxmemory-policy,notify-keyspace-events,maxmemory-samples,slowlog-log-slower-than,slowlog-max-len,list-max-ziplist-entries,list-max-ziplist-value,hash-max-ziplist-entries,hash-max-ziplist-value,set-max-intset-entries,zset-max-ziplist-entries,zset-max-ziplist-value etc.
       *
       * @schema #/definitions/RedisCreateProperties#redisConfiguration
       */
      readonly redisConfiguration?: RedisCreatePropertiesRedisConfiguration;

      /**
       * The number of replicas to be created per master.
       *
       * @schema #/definitions/RedisCreateProperties#replicasPerMaster
       */
      readonly replicasPerMaster?: number;

      /**
       * The number of shards to be created on a Premium Cluster Cache.
       *
       * @schema #/definitions/RedisCreateProperties#shardCount
       */
      readonly shardCount?: number;

      /**
       * SKU parameters supplied to the create Redis operation.
       *
       * @schema #/definitions/RedisCreateProperties#sku
       */
      readonly sku: Sku;

      /**
       * Static IP address. Required when deploying a Redis cache inside an existing Azure Virtual Network.
       *
       * @schema #/definitions/RedisCreateProperties#staticIP
       */
      readonly staticIP?: RedisCreatePropertiesStaticIpPattern;

      /**
       * The full resource ID of a subnet in a virtual network to deploy the Redis cache in. Example format: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/Microsoft.{Network|ClassicNetwork}/VirtualNetworks/vnet1/subnets/subnet1
       *
       * @schema #/definitions/RedisCreateProperties#subnetId
       */
      readonly subnetId?: RedisCreatePropertiesSubnetIdPattern;

      /**
       * A dictionary of tenant settings
       *
       * @schema #/definitions/RedisCreateProperties#tenantSettings
       */
      readonly tenantSettings?: RedisCreatePropertiesTenantSettings;

    }

    /**
     * @schema MicrosoftCacheRedisResources
     */
    export class MicrosoftCacheRedisResources {
      public static fromRedisFirewallRulesChildResource(value: RedisFirewallRulesChildResource): MicrosoftCacheRedisResources {
        return new MicrosoftCacheRedisResources(value);
      }
      public static fromRedisPatchSchedulesChildResource(value: RedisPatchSchedulesChildResource): MicrosoftCacheRedisResources {
        return new MicrosoftCacheRedisResources(value);
      }
      public static fromRedisLinkedServersChildResource(value: RedisLinkedServersChildResource): MicrosoftCacheRedisResources {
        return new MicrosoftCacheRedisResources(value);
      }
      public static fromRedisPrivateEndpointConnectionsChildResource(value: RedisPrivateEndpointConnectionsChildResource): MicrosoftCacheRedisResources {
        return new MicrosoftCacheRedisResources(value);
      }
      private constructor(value: any) {
        Object.defineProperty(this, 'resolve', { value: () => value });
      }
    }

    /**
     * @schema MicrosoftCacheRedisTags
     */
    export interface MicrosoftCacheRedisTags {
    }

    export enum MicrosoftCacheRedisType {
      "MicrosoftCacheRedisType_MICROSOFT_CACHE_REDIS" = 'Microsoft.Cache/redis',
    }

    export enum MicrosoftCacheRedisFirewallRulesApiVersion {
      "MicrosoftCacheRedisFirewallRulesApiVersion_2020_06_01" = '2020-06-01',
    }

    /**
     * Specifies a range of IP addresses permitted to connect to the cache
     *
     * @schema #/definitions/RedisFirewallRuleProperties
     */
    export interface RedisFirewallRuleProperties {
      /**
       * highest IP address included in the range
       *
       * @schema #/definitions/RedisFirewallRuleProperties#endIP
       */
      readonly endIP: string;

      /**
       * lowest IP address included in the range
       *
       * @schema #/definitions/RedisFirewallRuleProperties#startIP
       */
      readonly startIP: string;

    }

    export enum MicrosoftCacheRedisFirewallRulesType {
      "MicrosoftCacheRedisFirewallRulesType_MICROSOFT_CACHE_REDIS_FIREWALL_RULES" = 'Microsoft.Cache/redis/firewallRules',
    }

    export enum MicrosoftCacheRedisLinkedServersApiVersion {
      "MicrosoftCacheRedisLinkedServersApiVersion_2020_06_01" = '2020-06-01',
    }

    /**
     * Create properties for a linked server
     *
     * @schema #/definitions/RedisLinkedServerCreateProperties
     */
    export interface RedisLinkedServerCreateProperties {
      /**
       * Fully qualified resourceId of the linked redis cache.
       *
       * @schema #/definitions/RedisLinkedServerCreateProperties#linkedRedisCacheId
       */
      readonly linkedRedisCacheId: string;

      /**
       * Location of the linked redis cache.
       *
       * @schema #/definitions/RedisLinkedServerCreateProperties#linkedRedisCacheLocation
       */
      readonly linkedRedisCacheLocation: string;

      /**
       * Role of the linked server.
       *
       * @schema #/definitions/RedisLinkedServerCreateProperties#serverRole
       */
      readonly serverRole: RedisLinkedServerCreatePropertiesServerRole;

    }

    export enum MicrosoftCacheRedisLinkedServersType {
      "MicrosoftCacheRedisLinkedServersType_MICROSOFT_CACHE_REDIS_LINKED_SERVERS" = 'Microsoft.Cache/redis/linkedServers',
    }

    export enum MicrosoftCacheRedisPatchSchedulesApiVersion {
      "MicrosoftCacheRedisPatchSchedulesApiVersion_2020_06_01" = '2020-06-01',
    }

    /**
     * @schema MicrosoftCacheRedisPatchSchedulesName
     */
    export class MicrosoftCacheRedisPatchSchedulesNamePattern {
      public static pattern(value: string): string {
        return value;
      }
    }

    /**
     * List of patch schedules for a Redis cache.
     *
     * @schema #/definitions/ScheduleEntries
     */
    export interface ScheduleEntries {
      /**
       * List of patch schedules for a Redis cache.
       *
       * @schema #/definitions/ScheduleEntries#scheduleEntries
       */
      readonly scheduleEntries: ScheduleEntry[];

    }

    export enum MicrosoftCacheRedisPatchSchedulesType {
      "MicrosoftCacheRedisPatchSchedulesType_MICROSOFT_CACHE_REDIS_PATCH_SCHEDULES" = 'Microsoft.Cache/redis/patchSchedules',
    }

    export enum MicrosoftCacheRedisPrivateEndpointConnectionsApiVersion {
      "MicrosoftCacheRedisPrivateEndpointConnectionsApiVersion_2020_06_01" = '2020-06-01',
    }

    /**
     * Properties of the PrivateEndpointConnectProperties.
     *
     * @schema #/definitions/PrivateEndpointConnectionProperties
     */
    export interface PrivateEndpointConnectionProperties {
      /**
       * The Private Endpoint resource.
       *
       * @schema #/definitions/PrivateEndpointConnectionProperties#privateEndpoint
       */
      readonly privateEndpoint?: PrivateEndpoint;

      /**
       * A collection of information about the state of the connection between service consumer and provider.
       *
       * @schema #/definitions/PrivateEndpointConnectionProperties#privateLinkServiceConnectionState
       */
      readonly privateLinkServiceConnectionState: PrivateLinkServiceConnectionState;

      /**
       * The provisioning state of the private endpoint connection resource.
       *
       * @schema #/definitions/PrivateEndpointConnectionProperties#provisioningState
       */
      readonly provisioningState?: PrivateEndpointConnectionPropertiesProvisioningState;

    }

    export enum MicrosoftCacheRedisPrivateEndpointConnectionsType {
      "MicrosoftCacheRedisPrivateEndpointConnectionsType_MICROSOFT_CACHE_REDIS_PRIVATE_ENDPOINT_CONNECTIONS" = 'Microsoft.Cache/redis/privateEndpointConnections',
    }

    export enum RedisCreatePropertiesMinimumTlsVersion {
      "RedisCreatePropertiesMinimumTlsVersion_1_0" = '1.0',
      "RedisCreatePropertiesMinimumTlsVersion_1_1" = '1.1',
      "RedisCreatePropertiesMinimumTlsVersion_1_2" = '1.2',
    }

    export enum RedisCreatePropertiesPublicNetworkAccess {
      ENABLED = 'Enabled',
      DISABLED = 'Disabled',
    }

    /**
     * @schema #/definitions/redisCreatePropertiesRedisConfiguration
     */
    export interface RedisCreatePropertiesRedisConfiguration {
    }

    /**
     * SKU parameters supplied to the create Redis operation.
     *
     * @schema #/definitions/Sku
     */
    export interface Sku {
      /**
       * The size of the Redis cache to deploy. Valid values: for C (Basic/Standard) family (0, 1, 2, 3, 4, 5, 6), for P (Premium) family (1, 2, 3, 4).
       *
       * @schema #/definitions/Sku#capacity
       */
      readonly capacity: number;

      /**
       * The SKU family to use. Valid values: (C, P). (C = Basic/Standard, P = Premium).
       *
       * @schema #/definitions/Sku#family
       */
      readonly family: SkuFamily;

      /**
       * The type of Redis cache to deploy. Valid values: (Basic, Standard, Premium).
       *
       * @schema #/definitions/Sku#name
       */
      readonly name: SkuName;

    }

    /**
     * @schema #/definitions/redisCreatePropertiesStaticIp
     */
    export class RedisCreatePropertiesStaticIpPattern {
      public static pattern(value: string): string {
        return value;
      }
    }

    /**
     * @schema #/definitions/redisCreatePropertiesSubnetId
     */
    export class RedisCreatePropertiesSubnetIdPattern {
      public static pattern(value: string): string {
        return value;
      }
    }

    /**
     * @schema #/definitions/redisCreatePropertiesTenantSettings
     */
    export interface RedisCreatePropertiesTenantSettings {
    }

    /**
     * Microsoft.Cache/redis/firewallRules
     *
     * @schema #/definitions/redis_firewallRules_childResource
     */
    export interface RedisFirewallRulesChildResource {
      /**
       * @schema #/definitions/redis_firewallRules_childResource#apiVersion
       */
      readonly apiVersion: RedisFirewallRulesChildResourceApiVersion;

      /**
       * The name of the firewall rule.
       *
       * @schema #/definitions/redis_firewallRules_childResource#name
       */
      readonly name: string;

      /**
       * Specifies a range of IP addresses permitted to connect to the cache
       *
       * @schema #/definitions/redis_firewallRules_childResource#properties
       */
      readonly properties: RedisFirewallRuleProperties;

      /**
       * @schema #/definitions/redis_firewallRules_childResource#type
       */
      readonly type: RedisFirewallRulesChildResourceType;

    }

    /**
     * Microsoft.Cache/redis/patchSchedules
     *
     * @schema #/definitions/redis_patchSchedules_childResource
     */
    export interface RedisPatchSchedulesChildResource {
      /**
       * @schema #/definitions/redis_patchSchedules_childResource#apiVersion
       */
      readonly apiVersion: RedisPatchSchedulesChildResourceApiVersion;

      /**
       * Default string modeled as parameter for auto generation to work correctly.
       *
       * @schema #/definitions/redis_patchSchedules_childResource#name
       */
      readonly name: RedisPatchSchedulesChildResourceName;

      /**
       * List of patch schedules for a Redis cache.
       *
       * @schema #/definitions/redis_patchSchedules_childResource#properties
       */
      readonly properties: ScheduleEntries;

      /**
       * @schema #/definitions/redis_patchSchedules_childResource#type
       */
      readonly type: RedisPatchSchedulesChildResourceType;

    }

    /**
     * Microsoft.Cache/redis/linkedServers
     *
     * @schema #/definitions/redis_linkedServers_childResource
     */
    export interface RedisLinkedServersChildResource {
      /**
       * @schema #/definitions/redis_linkedServers_childResource#apiVersion
       */
      readonly apiVersion: RedisLinkedServersChildResourceApiVersion;

      /**
       * The name of the linked server that is being added to the Redis cache.
       *
       * @schema #/definitions/redis_linkedServers_childResource#name
       */
      readonly name: string;

      /**
       * Create properties for a linked server
       *
       * @schema #/definitions/redis_linkedServers_childResource#properties
       */
      readonly properties: RedisLinkedServerCreateProperties;

      /**
       * @schema #/definitions/redis_linkedServers_childResource#type
       */
      readonly type: RedisLinkedServersChildResourceType;

    }

    /**
     * Microsoft.Cache/redis/privateEndpointConnections
     *
     * @schema #/definitions/redis_privateEndpointConnections_childResource
     */
    export interface RedisPrivateEndpointConnectionsChildResource {
      /**
       * @schema #/definitions/redis_privateEndpointConnections_childResource#apiVersion
       */
      readonly apiVersion: RedisPrivateEndpointConnectionsChildResourceApiVersion;

      /**
       * The name of the private endpoint connection associated with the Azure resource
       *
       * @schema #/definitions/redis_privateEndpointConnections_childResource#name
       */
      readonly name: string;

      /**
       * Properties of the PrivateEndpointConnectProperties.
       *
       * @schema #/definitions/redis_privateEndpointConnections_childResource#properties
       */
      readonly properties: PrivateEndpointConnectionProperties;

      /**
       * @schema #/definitions/redis_privateEndpointConnections_childResource#type
       */
      readonly type: RedisPrivateEndpointConnectionsChildResourceType;

    }

    export enum RedisLinkedServerCreatePropertiesServerRole {
      PRIMARY = 'Primary',
      SECONDARY = 'Secondary',
    }

    /**
     * Patch schedule entry for a Premium Redis Cache.
     *
     * @schema #/definitions/ScheduleEntry
     */
    export interface ScheduleEntry {
      /**
       * Day of the week when a cache can be patched.
       *
       * @schema #/definitions/ScheduleEntry#dayOfWeek
       */
      readonly dayOfWeek: ScheduleEntryDayOfWeek;

      /**
       * ISO8601 timespan specifying how much time cache patching can take. 
       *
       * @schema #/definitions/ScheduleEntry#maintenanceWindow
       */
      readonly maintenanceWindow?: string;

      /**
       * Start hour after which cache patching can start.
       *
       * @schema #/definitions/ScheduleEntry#startHourUtc
       */
      readonly startHourUtc: number;

    }

    /**
     * The Private Endpoint resource.
     *
     * @schema #/definitions/PrivateEndpoint
     */
    export interface PrivateEndpoint {
    }

    /**
     * A collection of information about the state of the connection between service consumer and provider.
     *
     * @schema #/definitions/PrivateLinkServiceConnectionState
     */
    export interface PrivateLinkServiceConnectionState {
      /**
       * A message indicating if changes on the service provider require any updates on the consumer.
       *
       * @schema #/definitions/PrivateLinkServiceConnectionState#actionsRequired
       */
      readonly actionsRequired?: string;

      /**
       * The reason for approval/rejection of the connection.
       *
       * @schema #/definitions/PrivateLinkServiceConnectionState#description
       */
      readonly description?: string;

      /**
       * Indicates whether the connection has been Approved/Rejected/Removed by the owner of the service.
       *
       * @schema #/definitions/PrivateLinkServiceConnectionState#status
       */
      readonly status?: PrivateLinkServiceConnectionStateStatus;

    }

    export enum PrivateEndpointConnectionPropertiesProvisioningState {
      SUCCEEDED = 'Succeeded',
      CREATING = 'Creating',
      DELETING = 'Deleting',
      FAILED = 'Failed',
    }

    export enum SkuFamily {
      C = 'C',
      P = 'P',
    }

    export enum SkuName {
      BASIC = 'Basic',
      STANDARD = 'Standard',
      PREMIUM = 'Premium',
    }

    export enum RedisFirewallRulesChildResourceApiVersion {
      "RedisFirewallRulesChildResourceApiVersion_2020_06_01" = '2020-06-01',
    }

    export enum RedisFirewallRulesChildResourceType {
      FIREWALL_RULES = 'firewallRules',
    }

    export enum RedisPatchSchedulesChildResourceApiVersion {
      "RedisPatchSchedulesChildResourceApiVersion_2020_06_01" = '2020-06-01',
    }

    export enum RedisPatchSchedulesChildResourceName {
      DEFAULT = 'default',
    }

    export enum RedisPatchSchedulesChildResourceType {
      PATCH_SCHEDULES = 'patchSchedules',
    }

    export enum RedisLinkedServersChildResourceApiVersion {
      "RedisLinkedServersChildResourceApiVersion_2020_06_01" = '2020-06-01',
    }

    export enum RedisLinkedServersChildResourceType {
      LINKED_SERVERS = 'linkedServers',
    }

    export enum RedisPrivateEndpointConnectionsChildResourceApiVersion {
      "RedisPrivateEndpointConnectionsChildResourceApiVersion_2020_06_01" = '2020-06-01',
    }

    export enum RedisPrivateEndpointConnectionsChildResourceType {
      PRIVATE_ENDPOINT_CONNECTIONS = 'privateEndpointConnections',
    }

    export enum ScheduleEntryDayOfWeek {
      MONDAY = 'Monday',
      TUESDAY = 'Tuesday',
      WEDNESDAY = 'Wednesday',
      THURSDAY = 'Thursday',
      FRIDAY = 'Friday',
      SATURDAY = 'Saturday',
      SUNDAY = 'Sunday',
      EVERYDAY = 'Everyday',
      WEEKEND = 'Weekend',
    }

    export enum PrivateLinkServiceConnectionStateStatus {
      PENDING = 'Pending',
      APPROVED = 'Approved',
      REJECTED = 'Rejected',
    }

